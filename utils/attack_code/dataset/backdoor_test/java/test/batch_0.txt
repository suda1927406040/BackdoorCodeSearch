1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>web/src/main/java/org/springframework/security/web/savedrequest/FastHttpDateFormat.java<CODESPLIT>Send a byte array to a specific collection of websocket connections<CODESPLIT>public static String getCurrentDate ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Execute a write operation<CODESPLIT>private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , false ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , false ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
1<CODESPLIT>core/play/src/main/java/play/http/HttpEntity.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/scope/RequestScope.java<CODESPLIT>Create an entity from the given String .<CODESPLIT>protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , true ) ; } } ) ; } }
1<CODESPLIT>core/src/com/google/inject/internal/RealMultibinder.java<CODESPLIT>core/play/src/main/java/play/mvc/Call.java<CODESPLIT>Implementation of newSetBinder .<CODESPLIT>public String absoluteURL ( Http . Request request ) { return absoluteURL ( request . secure ( ) , request . host ( ) ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Setup the selector thread as well as basic server settings<CODESPLIT>public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/TableChunk.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/rememberme/JdbcTokenRepositoryImpl.java<CODESPLIT>Resolves and registers table references .<CODESPLIT>public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/util/ThrowableAnalyzer.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .<CODESPLIT>private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>src/main/java/io/reactivex/processors/UnicastProcessor.java<CODESPLIT>Internal method extracted to avoid code duplication in AD search .<CODESPLIT>@ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>Wraps arguments passed into a list if necessary .<CODESPLIT>public static void filters ( List < Filter > filters ) { Validate . notNull ( filters , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( filters ) ; }
1<CODESPLIT>core/play-java/src/main/java/play/libs/Comet.java<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .<CODESPLIT>public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/MethodProxy.java<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/AuthConfig.java<CODESPLIT>Invoke the original method on a different object of the same type .<CODESPLIT>public void basic ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/validation/Constraints.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSpecificationImpl.java<CODESPLIT>Converts a constraint to a human - readable value .<CODESPLIT>public MockMvcRequestSpecification sessionAttrs ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/AbstractPreAuthenticatedProcessingFilter.java<CODESPLIT>core/play/src/main/java/play/libs/reflect/MemberUtils.java<CODESPLIT>Determines if the current principal has changed . The default implementation tries<CODESPLIT>private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) { // slight unwrapping penalty cost += 0.1f ; cls = ClassUtils . wrapperToPrimitive ( cls ) ; } for ( int i = 0 ; cls != destClass && i < ORDERED_PRIMITIVE_TYPES . length ; i ++ ) { if ( cls == ORDERED_PRIMITIVE_TYPES [ i ] ) { cost += 0.1f ; if ( i < ORDERED_PRIMITIVE_TYPES . length - 1 ) { cls = ORDERED_PRIMITIVE_TYPES [ i + 1 ] ; } } } return cost ; }
1<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>src/main/java/com/alipay/remoting/ReconnectManager.java<CODESPLIT>Specify declared namespaces that will be used when parsing XML .<CODESPLIT>public void stop ( ) { if ( ! this . started ) { return ; } this . started = false ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcResponseResolver.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/EncoderConfig.java<CODESPLIT>Convert remoting response command to throwable if it is a throwable otherwise return null .<CODESPLIT>public EncoderConfig defaultQueryParameterCharset ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , true ) ; }
1<CODESPLIT>core/play/src/main/java/play/libs/F.java<CODESPLIT>core/src/com/google/inject/internal/RealMultibinder.java<CODESPLIT>Constructs a tuple of A B C D E<CODESPLIT>public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/CodeEmitter.java<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/JdbcMutableAclService.java<CODESPLIT>package - protected for EmitUtils try to fix<CODESPLIT>protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , true ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Completable.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Creates a NullPointerException instance and sets the given Throwable as its initial cause .<CODESPLIT>public String resolveRealName ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/ReflectUtils.java<CODESPLIT>core/play-java/src/main/java/play/libs/XPath.java<CODESPLIT>used by MethodInterceptorGenerated generated code<CODESPLIT>public static NodeList selectNodes ( String path , Object node ) { return selectNodes ( path , node , null ) ; }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/RequestSpecBuilder.java<CODESPLIT>Override bindings using guiceable modules .<CODESPLIT>public RequestSpecBuilder setBody ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java<CODESPLIT>Get the result of an Object path expression as a float .<CODESPLIT>public void setDelay ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcServer.java<CODESPLIT>Set the multi - part config<CODESPLIT>public boolean isConnected ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Returns the formatted message for an exception with the specified messages .<CODESPLIT>public long getLong ( String path ) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get ( path ) ; if ( value instanceof Long ) { return ( Long ) value ; } else if ( value instanceof Short ) { return ( ( Short ) value ) . longValue ( ) ; } else if ( value instanceof Integer ) { return ( ( Integer ) value ) . longValue ( ) ; } else { return ObjectConverter . convertObjectTo ( value , Long . class ) ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilter.java<CODESPLIT>extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethodsModule.java<CODESPLIT>Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .<CODESPLIT>static Module forModule ( Module module ) { // avoid infinite recursion, since installing a module always installs itself if ( module instanceof CheckedProviderMethodsModule ) { return Modules . EMPTY_MODULE ; } return new CheckedProviderMethodsModule ( module ) ; }
1<CODESPLIT>src/main/java/io/reactivex/processors/MulticastProcessor.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .<CODESPLIT>Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; // Note that we don't need to include isInterface in the hash computation, because it is // redundant with owner (we can't have the same owner with different isInterface values). int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == referenceKind && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } if ( referenceKind <= Opcodes . H_PUTSTATIC ) { constantPool . put112 ( tag , referenceKind , addConstantFieldref ( owner , name , descriptor ) . index ) ; } else { constantPool . put112 ( tag , referenceKind , addConstantMethodref ( owner , name , descriptor , isInterface ) . index ) ; } return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/parameters/AnnotationParameterNameDiscoverer.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Gets the parameter names or null if not found .<CODESPLIT>public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Prepares response for various provided data .<CODESPLIT>private < T > BindingImpl < T > convertConstantStringBinding ( Key < T > key , Errors errors ) throws ErrorsException { // Find a constant string binding. Key < String > stringKey = key . ofType ( STRING_TYPE ) ; BindingImpl < String > stringBinding = state . getExplicitBinding ( stringKey ) ; if ( stringBinding == null || ! stringBinding . isConstant ( ) ) { return null ; } // We can't call getProvider().get() because this InstanceBinding may not have been inintialized // yet (because we may have been called during InternalInjectorCreator.initializeStatically and // instance binding validation hasn't happened yet.) @ SuppressWarnings ( "unchecked" ) String stringValue = ( ( InstanceBinding < String > ) stringBinding ) . getInstance ( ) ; Object source = stringBinding . getSource ( ) ; // Find a matching type converter. TypeLiteral < T > type = key . getTypeLiteral ( ) ; TypeConverterBinding typeConverterBinding = state . getConverter ( stringValue , type , errors , source ) ; if ( typeConverterBinding == null ) { // No converter can handle the given type. return null ; } // Try to convert the string. A failed conversion results in an error. try { @ SuppressWarnings ( "unchecked" ) // This cast is safe because we double check below. T converted = ( T ) typeConverterBinding . getTypeConverter ( ) . convert ( stringValue , type ) ; if ( converted == null ) { throw errors . converterReturnedNull ( stringValue , source , type , typeConverterBinding ) . toException ( ) ; } if ( ! type . getRawType ( ) . isInstance ( converted ) ) { throw errors . conversionTypeError ( stringValue , source , type , typeConverterBinding , converted ) . toException ( ) ; } return new ConvertedConstantBindingImpl < T > ( this , key , converted , stringBinding , typeConverterBinding ) ; } catch ( ErrorsException e ) { throw e ; } catch ( RuntimeException e ) { throw errors . conversionError ( stringValue , source , type , typeConverterBinding , e ) . toException ( ) ; } }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .<CODESPLIT>public void removeBean ( final Class type ) { // collect bean names Set < String > beanNames = new HashSet <> ( ) ; for ( BeanDefinition def : beans . values ( ) ) { if ( def . type . equals ( type ) ) { beanNames . add ( def . name ) ; } } // remove collected bean names for ( String beanName : beanNames ) { removeBean ( beanName ) ; } }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/AbstractClassGenerator.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Override the default naming policy .<CODESPLIT>public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/util/OnCommittedResponseWrapper.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .<CODESPLIT>public int getPort ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java<CODESPLIT>Verifies whether version of cookie satisfies specified matcher .<CODESPLIT>@ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/Enhancer.java<CODESPLIT>Indicates if the request is elgible to process a proxy ticket .<CODESPLIT>protected void filterConstructors ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , true ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/DeferredLookups.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Initialize the specified lookups either immediately or when the injector is created .<CODESPLIT>public Messages preferred ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>Collects all action runtime configurations .<CODESPLIT>public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
1<CODESPLIT>persistence/play-java-jdbc/src/main/java/play/db/DefaultDatabase.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/AbstractPreAuthenticatedProcessingFilter.java<CODESPLIT>Create a Scala function wrapper for ConnectionRunnable .<CODESPLIT>protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return false ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return false ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return true ; }
1<CODESPLIT>core/play-java/src/main/java/play/libs/Comet.java<CODESPLIT>core/src/com/google/inject/internal/DeferredLookups.java<CODESPLIT>Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .<CODESPLIT>void initialize ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
1<CODESPLIT>src/main/java/io/reactivex/subjects/UnicastSubject.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .<CODESPLIT>private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) { //Ignore this exception in this case } } } }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/openid/OpenIDLoginConfigurer.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Sets up OpenID attribute exchange for OpenID s matching the specified pattern .<CODESPLIT>private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/BCrypt.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/Form.java<CODESPLIT>Cycically extract a word of key material .<CODESPLIT>public Form < T > fill ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
1<CODESPLIT>src/main/java/io/reactivex/subjects/UnicastSubject.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>Creates an UnicastSubject with the given internal buffer capacity hint .<CODESPLIT>protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) { // alias markers not found if ( i == 0 ) { // try whole string as an alias String alias = lookupAlias ( value ) ; return ( alias != null ? alias : value ) ; } else { result . append ( value . substring ( i ) ) ; } break ; } // alias marked found result . append ( value . substring ( i , ndx ) ) ; ndx ++ ; int ndx2 = value . indexOf ( ' ' , ndx ) ; String aliasName = ( ndx2 == - 1 ? value . substring ( ndx ) : value . substring ( ndx , ndx2 ) ) ; // process alias String alias = lookupAlias ( aliasName ) ; if ( alias != null ) { result . append ( alias ) ; } else { // alias not found if ( log . isWarnEnabled ( ) ) { log . warn ( "Alias not found: " + aliasName ) ; } } i = ndx2 + 1 ; } // fix prefix '//' - may happened when aliases are used i = 0 ; len = result . length ( ) ; while ( i < len ) { if ( result . charAt ( i ) != ' ' ) { break ; } i ++ ; } if ( i > 1 ) { return result . substring ( i - 1 , len ) ; } return result . toString ( ) ; }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>core/play/src/main/java/play/i18n/Langs.java<CODESPLIT>Indicates if the request is elgible to be processed as the proxy receptor .<CODESPLIT>public Lang preferred ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>core/play/src/main/java/play/libs/F.java<CODESPLIT>Generate a final key from a input string<CODESPLIT>public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , d , e ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionPathRewriter.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>Rewrites action path .<CODESPLIT>public int getSize ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>Set the Json config .<CODESPLIT>@ Override public Iterator < File > iterator ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>core/src/com/google/inject/internal/MembersInjectorStore.java<CODESPLIT>Resolves bean names for give type .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) // the MembersInjector type always agrees with the passed type public < T > MembersInjectorImpl < T > get ( TypeLiteral < T > key , Errors errors ) throws ErrorsException { return ( MembersInjectorImpl < T > ) cache . get ( key , errors ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Add request attribute<CODESPLIT>public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java<CODESPLIT>src/main/java/io/reactivex/subjects/UnicastSubject.java<CODESPLIT>The HTTP error to be used when an error is triggered .<CODESPLIT>@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , true ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/BytecodeGen.java<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .<CODESPLIT>public PropsEntry getProfileProperty ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
1<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/AclClassIdUtils.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/EmailUtil.java<CODESPLIT>Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .<CODESPLIT>public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return true ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return false ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return false ; } return true ; }
1<CODESPLIT>src/main/java/org/java_websocket/AbstractWebSocket.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Stop the connection lost timer<CODESPLIT>public DetailedCookieMatcher path ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>src/main/java/com/alipay/remoting/CustomSerializerManager.java<CODESPLIT>Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .<CODESPLIT>public static void registerCustomSerializer ( String className , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/disposables/CompositeDisposable.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>Returns the number of currently held Disposables .<CODESPLIT>public MockMvcRequestSpecBuilder addMultiPart ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
1<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>Generates an Annotation for the annotation class . Requires that the annotation is all optionals .<CODESPLIT>protected T setTarget ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>Returns a Callable that returns the given value .<CODESPLIT>public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>Qualify this binding key with the given instance of an annotation .<CODESPLIT>public static int lastIndexOfSlashDot ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
1<CODESPLIT>retrofit/src/main/java/retrofit2/HttpServiceMethod.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/BridgeMethodResolver.java<CODESPLIT>Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .<CODESPLIT>public Map /*<Signature, Signature>*/ resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/LoginUrlAuthenticationEntryPoint.java<CODESPLIT>core/src/com/google/inject/internal/MoreTypes.java<CODESPLIT>Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .<CODESPLIT>public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; // the following casts are generally unsafe, but com.google.inject.Provider extends // javax.inject.Provider and is covariant @ SuppressWarnings ( "unchecked" ) TypeLiteral < T > guiceProviderType = ( TypeLiteral < T > ) TypeLiteral . get ( Types . providerOf ( parameterizedType . getActualTypeArguments ( ) [ 0 ] ) ) ; return guiceProviderType ; } @ SuppressWarnings ( "unchecked" ) TypeLiteral < T > wrappedPrimitives = ( TypeLiteral < T > ) PRIMITIVE_TO_WRAPPER . get ( typeLiteral ) ; if ( wrappedPrimitives != null ) { return wrappedPrimitives ; } // If we know this isn't a subclass, return as-is. if ( typeLiteral . getClass ( ) == TypeLiteral . class ) { return typeLiteral ; } // recreate the TypeLiteral to avoid anonymous TypeLiterals from holding refs to their // surrounding classes. @ SuppressWarnings ( "unchecked" ) TypeLiteral < T > recreated = ( TypeLiteral < T > ) TypeLiteral . get ( typeLiteral . getType ( ) ) ; return recreated ; }
1<CODESPLIT>core/src/com/google/inject/internal/WeakKeySet.java<CODESPLIT>src/main/java/com/alipay/remoting/CustomSerializerManager.java<CODESPLIT>There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .<CODESPLIT>public static void registerCustomSerializer ( String className , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/JPAEntityManagerContext.java<CODESPLIT>jodd-decora/src/main/java/jodd/decora/DecoraResponseWrapper.java<CODESPLIT>Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .<CODESPLIT>@ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/scope/RequestScope.java<CODESPLIT>Return all non - assisted dependencies .<CODESPLIT>protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , true ) ; } } ) ; } }
1<CODESPLIT>core/play/src/main/java/play/libs/F.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Constructs a tuple of A B<CODESPLIT>public void broadcast ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , clients ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ReconnectManager.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/BridgeMethodResolver.java<CODESPLIT>add reconnect task<CODESPLIT>public Map /*<Signature, Signature>*/ resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .<CODESPLIT>public HttpRequest host ( final String host ) { this . host = host ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , host ) ; } return this ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>core/src/com/google/inject/spi/InjectionPoint.java<CODESPLIT>When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .<CODESPLIT>private static boolean overrides ( Method a , Method b ) { // See JLS section 8.4.8.1 int modifiers = b . getModifiers ( ) ; if ( Modifier . isPublic ( modifiers ) || Modifier . isProtected ( modifiers ) ) { return true ; } if ( Modifier . isPrivate ( modifiers ) ) { return false ; } // b must be package-private return a . getDeclaringClass ( ) . getPackage ( ) . equals ( b . getDeclaringClass ( ) . getPackage ( ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Call.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Append a unique identifier to the URL .<CODESPLIT>@ Override public Connection getAndCreateIfAbsent ( Url url ) throws InterruptedException , RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this . getConnectionPoolAndCreateIfAbsent ( url . getUniqueKey ( ) , new ConnectionPoolCall ( url ) ) ; if ( null != pool ) { return pool . get ( ) ; } else { logger . error ( "[NOTIFYME] bug detected! pool here must not be null!" ) ; return null ; } }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/BackpressureHelper.java<CODESPLIT>oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/ReactiveRemoteJWKSource.java<CODESPLIT>Adds two long values and caps the sum at Long . MAX_VALUE .<CODESPLIT>private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/websphere/WebSpherePreAuthenticatedWebAuthenticationDetailsSource.java<CODESPLIT>Creates a child injector that binds the args and returns the binding for the method s result .<CODESPLIT>private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
1<CODESPLIT>openid/src/main/java/org/springframework/security/openid/RegexBasedAxFetchListFactory.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/protocol/UserProcessorRegisterHelper.java<CODESPLIT>Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .<CODESPLIT>private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>src/main/java/org/java_websocket/util/ByteBufferUtils.java<CODESPLIT>Returns all action wrappers . Returns a copy in new set .<CODESPLIT>public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>Expect that a response cookie matches the supplied name and value .<CODESPLIT>public final Self overrides ( play . api . inject . Binding < ? > ... bindings ) { return overrides ( Guiceable . bindings ( bindings ) ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/proxetta/ProxettaAwarePetiteContainer.java<CODESPLIT>src/main/java/io/reactivex/internal/observers/QueueDrainObserver.java<CODESPLIT>Applies proxetta on bean class before bean registration .<CODESPLIT>protected final void fastPathOrderedEmit ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Handler.java<CODESPLIT>rest-assured/src/main/java/io/restassured/authentication/CertificateAuthSettings.java<CODESPLIT>Returns the number of elements of the Handler list that begins with the given element .<CODESPLIT>public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Computes the display string for any value .<CODESPLIT>public T from ( final String personalName , final String from ) { return from ( new EmailAddress ( personalName , from ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/AuthorityUtils.java<CODESPLIT>rest-assured/src/main/java/io/restassured/authentication/CertificateAuthSettings.java<CODESPLIT>Converts an array of GrantedAuthority objects to a Set .<CODESPLIT>public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
1<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/Enhancer.java<CODESPLIT>Invoked when a handler or resource is not found .<CODESPLIT>protected void filterConstructors ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , true ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/session/ConcurrentSessionControlAuthenticationStrategy.java<CODESPLIT>extensions/jmx/src/com/google/inject/tools/jmx/Manager.java<CODESPLIT>Allows subclasses to customise behaviour when too many sessions are detected .<CODESPLIT>public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ; // Sleep forever. Thread . sleep ( Long . MAX_VALUE ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/DbQueryParser.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>Lookup for named parameter .<CODESPLIT>public static String readRequestBodyFromReader ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsManager.java<CODESPLIT>Set the MockMVC config<CODESPLIT>public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>Syntax sugar .<CODESPLIT>public final Self bindings ( play . api . inject . Module ... modules ) { return bindings ( Guiceable . modules ( modules ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/intercept/aspectj/AspectJMethodSecurityInterceptor.java<CODESPLIT>core/play/src/main/java/play/i18n/Langs.java<CODESPLIT>Method that is suitable for user with traditional AspectJ - code aspects .<CODESPLIT>public Lang preferred ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>core/src/com/google/inject/internal/TypeConverterBindingProcessor.java<CODESPLIT>Bind this binding key to the given provider instance .<CODESPLIT>static void prepareBuiltInConverters ( InjectorImpl injector ) { // Configure type converters. convertToPrimitiveType ( injector , int . class , Integer . class ) ; convertToPrimitiveType ( injector , long . class , Long . class ) ; convertToPrimitiveType ( injector , boolean . class , Boolean . class ) ; convertToPrimitiveType ( injector , byte . class , Byte . class ) ; convertToPrimitiveType ( injector , short . class , Short . class ) ; convertToPrimitiveType ( injector , float . class , Float . class ) ; convertToPrimitiveType ( injector , double . class , Double . class ) ; convertToClass ( injector , Character . class , new TypeConverter ( ) { @ Override public Object convert ( String value , TypeLiteral < ? > toType ) { value = value . trim ( ) ; if ( value . length ( ) != 1 ) { throw new RuntimeException ( "Length != 1." ) ; } return value . charAt ( 0 ) ; } @ Override public String toString ( ) { return "TypeConverter<Character>" ; } } ) ; convertToClasses ( injector , Matchers . subclassesOf ( Enum . class ) , new TypeConverter ( ) { @ Override @ SuppressWarnings ( "unchecked" ) public Object convert ( String value , TypeLiteral < ? > toType ) { return Enum . valueOf ( ( Class ) toType . getRawType ( ) , value ) ; } @ Override public String toString ( ) { return "TypeConverter<E extends Enum<E>>" ; } } ) ; internalConvertToTypes ( injector , new AbstractMatcher < TypeLiteral < ? > > ( ) { @ Override public boolean matches ( TypeLiteral < ? > typeLiteral ) { return typeLiteral . getRawType ( ) == Class . class ; } @ Override public String toString ( ) { return "Class<?>" ; } } , new TypeConverter ( ) { @ Override @ SuppressWarnings ( "unchecked" ) public Object convert ( String value , TypeLiteral < ? > toType ) { try { return Class . forName ( value ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e . getMessage ( ) ) ; } } @ Override public String toString ( ) { return "TypeConverter<Class<?>>" ; } } ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Observable.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Wraps an ObservableSource into an Observable if not already an Observable .<CODESPLIT>public Integer getInteger ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>Returns Bearer token .<CODESPLIT>private static SearchControls buildControls ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
1<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/JdbcMutableAclService.java<CODESPLIT>core/play-java/src/main/java/play/libs/Comet.java<CODESPLIT>Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .<CODESPLIT>public static Flow < String , ByteString , NotUsed > string ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>core/play/src/main/java/play/libs/reflect/MemberUtils.java<CODESPLIT>Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .<CODESPLIT>private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { // slight penalty for interface match. // we still want an exact match to override an interface match, // but // an interface match should override anything where we have to // get a superclass. cost += 0.25f ; break ; } cost ++ ; srcClass = srcClass . getSuperclass ( ) ; } /*      * If the destination class is null, we've traveled all the way up to      * an Object match. We'll penalize this by adding 1.5 to the cost.      */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>core/src/com/google/inject/internal/WeakKeySet.java<CODESPLIT>Returns byte array of created class .<CODESPLIT>private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapAuthority.java<CODESPLIT>Resolves bean names for give type .<CODESPLIT>public List < String > getAttributeValues ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ConnectionPool.java<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>removeAndTryClose a connection<CODESPLIT>public static long getInt ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/WebApp.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Configure defaults .<CODESPLIT>< T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ; // Don't try to inject arrays or enums annotated with @ImplementedBy. if ( rawType . isArray ( ) || ( rawType . isEnum ( ) && implementedBy != null ) ) { throw errors . missingImplementationWithHint ( key , this ) . toException ( ) ; } // Handle TypeLiteral<T> by binding the inner type if ( rawType == TypeLiteral . class ) { @ SuppressWarnings ( "unchecked" ) // we have to fudge the inner type as Object BindingImpl < T > binding = ( BindingImpl < T > ) createTypeLiteralBinding ( ( Key < TypeLiteral < Object > > ) key , errors ) ; return binding ; } // Handle @ImplementedBy if ( implementedBy != null ) { Annotations . checkForMisplacedScopeAnnotations ( rawType , source , errors ) ; return createImplementedByBinding ( key , scoping , implementedBy , errors ) ; } // Handle @ProvidedBy. ProvidedBy providedBy = rawType . getAnnotation ( ProvidedBy . class ) ; if ( providedBy != null ) { Annotations . checkForMisplacedScopeAnnotations ( rawType , source , errors ) ; return createProvidedByBinding ( key , scoping , providedBy , errors ) ; } return ConstructorBindingImpl . create ( this , key , null , /* use default constructor */ source , scoping , errors , jitBinding && options . jitDisabled , options . atInjectRequired ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/protocol/UserProcessorRegisterHelper.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>Help register multi - interest user processor .<CODESPLIT>public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , true ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Instruct REST Assured to connect to a proxy using a URI .<CODESPLIT>int setMajorVersionAndClassName ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>web/src/main/java/org/springframework/security/web/util/UrlUtils.java<CODESPLIT>Converts segment of byte array into long array .<CODESPLIT>public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return false ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
1<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .<CODESPLIT>public RestAssuredMockMvcConfig xmlConfig ( XmlConfig xmlConfig ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/SimpleUrlAuthenticationSuccessHandler.java<CODESPLIT>src/main/java/io/reactivex/internal/observers/BlockingMultiObserver.java<CODESPLIT>Removes temporary authentication - related data which may have been stored in the session during the authentication process .<CODESPLIT>public boolean blockingAwait ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return false ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return true ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/SimpleUrlAuthenticationSuccessHandler.java<CODESPLIT>jodd-bean/src/main/java/jodd/introspector/ClassDescriptor.java<CODESPLIT>Removes temporary authentication - related data which may have been stored in the session during the authentication process .<CODESPLIT>public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
1<CODESPLIT>core/play/src/main/java/play/core/cookie/encoding/ServerCookieEncoder.java<CODESPLIT>jodd-db/src/main/java/jodd/db/DbQueryParser.java<CODESPLIT>Encodes the specified cookie into a Set - Cookie header value .<CODESPLIT>DbQueryNamedParameter lookupNamedParameter ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/config/ObjectMapperConfig.java<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>Creates an object mapper configuration that uses the specified object mapper as default .<CODESPLIT>static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/authentication/SpringSecurityAuthenticationSource.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java<CODESPLIT>Get the principals of the logged in user in this case the distinguished name .<CODESPLIT>protected final void updateAccessDefaults ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/util/ParallelSorter.java<CODESPLIT>src/main/java/com/alipay/remoting/util/FutureTaskUtil.java<CODESPLIT>Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .<CODESPLIT>public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return false ; } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/TypeData.java<CODESPLIT>Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .<CODESPLIT>public String resolveRealName ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
1<CODESPLIT>extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .<CODESPLIT>public static List < String > listZip ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
1<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>web/src/main/java/org/springframework/security/web/util/OnCommittedResponseWrapper.java<CODESPLIT>Gets a key for an injection type and an annotation strategy .<CODESPLIT>private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
1<CODESPLIT>extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .<CODESPLIT>public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/MoreTypes.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Returns an type that s appropriate for use in a key .<CODESPLIT>public static String parseRemoteAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>Puts a string into the JSON object with the specified key .<CODESPLIT>public static String getMethodDescriptor ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
1<CODESPLIT>persistence/play-java-jdbc/src/main/java/play/db/DefaultDatabase.java<CODESPLIT>src/main/java/com/alipay/remoting/BaseRemoting.java<CODESPLIT>Create a Scala function wrapper for ConnectionRunnable .<CODESPLIT>protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/WebApp.java<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>Initializes and starts web application .<CODESPLIT>public XmlPathConfig declareNamespaces ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>core/src/main/java/org/springframework/security/util/FieldUtils.java<CODESPLIT>Returns the long value with the specified key .<CODESPLIT>public static Field getField ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) { // Try superclass if ( clazz . getSuperclass ( ) != null ) { return getField ( clazz . getSuperclass ( ) , fieldName ) ; } throw new IllegalStateException ( "Could not locate field '" + fieldName + "' on class " + clazz ) ; } }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java<CODESPLIT>Specifies the search path . Throws an exception if URI is invalid .<CODESPLIT>@ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .<CODESPLIT>void putConstantPool ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>private void processFrameIsFin ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java<CODESPLIT>Getter to return the socket used by this specific connection<CODESPLIT>public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>src/main/java/io/reactivex/internal/subscribers/SinglePostCompleteSubscriber.java<CODESPLIT>Log the runtime exception to the specific WebSocketImpl<CODESPLIT>protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
1<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>Gets the strategy for an annotation type .<CODESPLIT>public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Stores context path in page context and request scope .<CODESPLIT>public String queryString ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/Form.java<CODESPLIT>Complete the target without any value .<CODESPLIT>private List < Object > convertErrorArguments ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>src/main/java/org/java_websocket/AbstractWebSocket.java<CODESPLIT>Set the Xml config .<CODESPLIT>protected void startConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = true ; restartConnectionLostTimer ( ) ; } }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/protocol/RpcRequestProcessor.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>dispatch request command to user processor<CODESPLIT>public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/AbstractRemotingProcessor.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/DbMetaUtil.java<CODESPLIT>Process the remoting command with its own executor or with the defaultExecutor if its own if null .<CODESPLIT>public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .<CODESPLIT>private < T > BindingImpl < T > convertConstantStringBinding ( Key < T > key , Errors errors ) throws ErrorsException { // Find a constant string binding. Key < String > stringKey = key . ofType ( STRING_TYPE ) ; BindingImpl < String > stringBinding = state . getExplicitBinding ( stringKey ) ; if ( stringBinding == null || ! stringBinding . isConstant ( ) ) { return null ; } // We can't call getProvider().get() because this InstanceBinding may not have been inintialized // yet (because we may have been called during InternalInjectorCreator.initializeStatically and // instance binding validation hasn't happened yet.) @ SuppressWarnings ( "unchecked" ) String stringValue = ( ( InstanceBinding < String > ) stringBinding ) . getInstance ( ) ; Object source = stringBinding . getSource ( ) ; // Find a matching type converter. TypeLiteral < T > type = key . getTypeLiteral ( ) ; TypeConverterBinding typeConverterBinding = state . getConverter ( stringValue , type , errors , source ) ; if ( typeConverterBinding == null ) { // No converter can handle the given type. return null ; } // Try to convert the string. A failed conversion results in an error. try { @ SuppressWarnings ( "unchecked" ) // This cast is safe because we double check below. T converted = ( T ) typeConverterBinding . getTypeConverter ( ) . convert ( stringValue , type ) ; if ( converted == null ) { throw errors . converterReturnedNull ( stringValue , source , type , typeConverterBinding ) . toException ( ) ; } if ( ! type . getRawType ( ) . isInstance ( converted ) ) { throw errors . conversionTypeError ( stringValue , source , type , typeConverterBinding , converted ) . toException ( ) ; } return new ConvertedConstantBindingImpl < T > ( this , key , converted , stringBinding , typeConverterBinding ) ; } catch ( ErrorsException e ) { throw e ; } catch ( RuntimeException e ) { throw errors . conversionError ( stringValue , source , type , typeConverterBinding , e ) . toException ( ) ; } }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>core/play-java/src/main/java/play/libs/XPath.java<CODESPLIT>Initializes file walking . Separates input files and folders .<CODESPLIT>public static NodeList selectNodes ( String path , Object node ) { return selectNodes ( path , node , null ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/BCrypt.java<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/BasicLookupStrategy.java<CODESPLIT>Check that a plaintext password matches a previously hashed one .<CODESPLIT>private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ; // Lookup the parents, now that our JdbcTemplate has released the database // connection (SEC-547) if ( parentsToLookup . size ( ) > 0 ) { lookupPrimaryKeys ( acls , parentsToLookup , sids ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/internal/operators/flowable/FlowableScalarXMap.java<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/JPAEntityManagerContext.java<CODESPLIT>Tries to subscribe to a possibly Callable source s mapped Publisher .<CODESPLIT>public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( true ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/CustomSerializerManager.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Register custom serializer for class name .<CODESPLIT>protected String [ ] resolveBeanNamesForType ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Qualify this binding key with the given instance of an annotation .<CODESPLIT>public float getFloat ( String path ) { final Object value = get ( path ) ; //Groovy will always return a Double for floating point values. if ( value instanceof Double ) { return ( ( Double ) value ) . floatValue ( ) ; } else { return ObjectConverter . convertObjectTo ( value , Float . class ) ; } }
1<CODESPLIT>core/play/src/main/java/play/mvc/Call.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Transform this call to an WebSocket URL .<CODESPLIT>public Long getLong ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>core/play/src/main/java/play/core/Paths.java<CODESPLIT>Set the async config<CODESPLIT>public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ReconnectManager.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java<CODESPLIT>stop reconnect thread<CODESPLIT>public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/jackson2/SecurityJackson2Modules.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Creates a TypeResolverBuilder that performs whitelisting .<CODESPLIT>public String resolveRealName ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Send a byte array to a specific collection of websocket connections<CODESPLIT>public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/HTTPBuilder.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>Set the default HTTP proxy to be used for all requests .<CODESPLIT>protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcResponseResolver.java<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationEntryPoint.java<CODESPLIT>Analyze the response command and generate the response object .<CODESPLIT>protected String createServiceUrl ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
1<CODESPLIT>oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/ReactiveRemoteJWKSource.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/advice/DelegateAdviceUtil.java<CODESPLIT>Updates the cached JWK set from the configured URL .<CODESPLIT>public static void injectTargetIntoProxy ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/LinkedArrayList.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>Adds a new element to this list .<CODESPLIT>public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Copies all request parameters to attributes .<CODESPLIT>public void broadcast ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , clients ) ; }
1<CODESPLIT>jodd-joy/src/main/java/jodd/joy/i18n/LocalizationUtil.java<CODESPLIT>jodd-db/src/main/java/jodd/db/jtx/JtxDbUtil.java<CODESPLIT>Returns current locale from session . s<CODESPLIT>public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ConnectionPool.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/AbstractClassGenerator.java<CODESPLIT>removeAndTryClose a connection<CODESPLIT>public void setNamingPolicy ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Handler.java<CODESPLIT>core/play/src/main/java-scala-2.13+/play/libs/CrossScala.java<CODESPLIT>Removes the range between start and end from the Handler list that begins with the given element .<CODESPLIT>public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] array ) { return toSeq ( java . util . Arrays . asList ( array ) ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/ReflectUtils.java<CODESPLIT>Registers instance method provider .<CODESPLIT>public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) { // TODO: error? } } return result ; }
1<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/ParamManager.java<CODESPLIT>Returns the scoping annotation or null if there isn t one .<CODESPLIT>public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; } // resolve all references String value = PropertiesUtil . resolveProperty ( params , key ) ; entry . setValue ( value ) ; } if ( list . isEmpty ( ) ) { return StringPool . EMPTY_ARRAY ; } else { return list . toArray ( new String [ 0 ] ) ; } }
1<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/AddDeleteContactController.java<CODESPLIT>jodd-bean/src/main/java/jodd/bean/BeanUtilBean.java<CODESPLIT>Handles the submission of the contact form creating a new instance if the username and email are valid .<CODESPLIT>@ Override public String extractThisReference ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HeadersMultiMap.java<CODESPLIT>rest-assured/src/main/java/io/restassured/authentication/PreemptiveAuthProvider.java<CODESPLIT>Adds new header value . If existing value exist it will be removed so the store the new key value .<CODESPLIT>public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/core/userdetails/UserDetailsResourceFactoryBean.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Creates a UserDetailsResourceFactoryBean with a resource from the provided String<CODESPLIT>public static int parseLocalPort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>src/main/java/com/alipay/remoting/ConnectionPool.java<CODESPLIT>Indicates if the request is elgible to be processed as the proxy receptor .<CODESPLIT>public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Process the frame if it is a continuous frame or the fin bit is not set<CODESPLIT>public void broadcast ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/EmailUtil.java<CODESPLIT>Returns the descriptor corresponding to the given method .<CODESPLIT>public static String extractEncoding ( final String contentType , String defaultEncoding ) { String encoding = extractEncoding ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
1<CODESPLIT>src/main/java/org/java_websocket/WebSocketImpl.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Close the connection if there was a server error by a RuntimeException<CODESPLIT>@ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/FilterChainProxy.java<CODESPLIT>src/main/java/com/alipay/remoting/BaseRemoting.java<CODESPLIT>Convenience method mainly for testing .<CODESPLIT>protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .<CODESPLIT>public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>Process the frame if it is the last frame<CODESPLIT>public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>core/src/com/google/inject/internal/BytecodeGen.java<CODESPLIT>Scans classes inside single JAR archive . Archive is scanned as a zip file .<CODESPLIT>private static ClassLoader canonicalize ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Errors.java<CODESPLIT>core/src/com/google/inject/internal/Initializer.java<CODESPLIT>Within guice s core allow for better missing binding messages<CODESPLIT>void validateOustandingInjections ( Errors errors ) { validationStarted = true ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesImpl.java<CODESPLIT>src/main/java/io/reactivex/disposables/CompositeDisposable.java<CODESPLIT>Get the message at the given key .<CODESPLIT>public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .<CODESPLIT>protected TypeData _lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/UrlAuthorizationConfigurer.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Creates a String for specifying a user requires a role .<CODESPLIT>public static int parseRemotePort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>src/main/java/com/alipay/remoting/Connection.java<CODESPLIT>Parse the remote host port of the channel .<CODESPLIT>public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSpecificationImpl.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java<CODESPLIT>Set session attributes .<CODESPLIT>protected void createFirstChainDelegate_Continue ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , false ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , false ) ; } visitReturn ( methodVisitor , tmd . msign , false ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesImpl.java<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/JPAEntityManagerContext.java<CODESPLIT>Get the message at the first defined key .<CODESPLIT>void pushOrPopEm ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
1<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .<CODESPLIT>public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
1<CODESPLIT>core/play/src/main/java/play/http/HttpEntity.java<CODESPLIT>retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java<CODESPLIT>Convert the given source of ByteStrings to a chunked entity .<CODESPLIT>public void setDelay ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/util/ParallelSorter.java<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java<CODESPLIT>Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .<CODESPLIT>public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/LinkedArrayList.java<CODESPLIT>core/src/com/google/inject/internal/util/LineNumbers.java<CODESPLIT>Adds a new element to this list .<CODESPLIT>public Integer getLineNumber ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>taglibs/src/main/java/org/springframework/security/taglibs/authz/AbstractAuthorizeTag.java<CODESPLIT>Get a messages context appropriate for the given request .<CODESPLIT>public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return false ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>Returns Bearer token .<CODESPLIT>public void registerHint ( final String hint ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( hint ) ; }
1<CODESPLIT>jodd-joy/src/main/java/jodd/joy/madvoc/AppAction.java<CODESPLIT>src/main/java/com/alipay/remoting/RemotingContext.java<CODESPLIT>Validates action . Profiles are reset after the invocation .<CODESPLIT>public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
1<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/MapBasedAttributes2GrantedAuthoritiesMapper.java<CODESPLIT>Returns profile property .<CODESPLIT>private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
1<CODESPLIT>core/src/com/google/inject/internal/ConstructorInjector.java<CODESPLIT>core/src/com/google/inject/internal/Scoping.java<CODESPLIT>Provisions a new T .<CODESPLIT>static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/search/FilterBasedLdapUserSearch.java<CODESPLIT>Creates new wrapper .<CODESPLIT>@ Override public DirContextOperations searchForUser ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; } // Search should never return multiple results if properly configured, so just // rethrow throw notFound ; } }
1<CODESPLIT>src/main/java/io/reactivex/subjects/PublishSubject.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/CodeEmitter.java<CODESPLIT>Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .<CODESPLIT>public void cast_numeric ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
1<CODESPLIT>src/main/java/io/reactivex/internal/observers/QueueDrainObserver.java<CODESPLIT>jodd-joy/src/main/java/jodd/joy/JoyContextListener.java<CODESPLIT>Makes sure the fast - path emits in order .<CODESPLIT>private void configureServletContext ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , true , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , true , contextPath ) ; }
1<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/TypeData.java<CODESPLIT>Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .<CODESPLIT>public String resolveRealName ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
1<CODESPLIT>src/main/java/io/reactivex/Flowable.java<CODESPLIT>src/main/java/io/reactivex/internal/util/AppendOnlyLinkedArrayList.java<CODESPLIT>Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .<CODESPLIT>public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return true ; } } a = ( Object [ ] ) a [ c ] ; } return false ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcResponseResolver.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>Analyze the response command and generate the response object .<CODESPLIT>public FindFile exclude ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
1<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/WebApp.java<CODESPLIT>Creates a new Message with the given cause and a binding source stack .<CODESPLIT>public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java<CODESPLIT>core/src/com/google/inject/internal/util/LineNumbers.java<CODESPLIT>Maps any request .<CODESPLIT>public Integer getLineNumber ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ProcessorManager.java<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/HttpRequestFactory.java<CODESPLIT>Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .<CODESPLIT>static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ; // If we are sending HTTP method that does not allow body (like GET) then HTTP library prevents // us from including it, however we chose to allow deviations from standard if user wants so, // so it needs custom handling - hence the second condition below. // Otherwise we should use standard implementation found in the map if ( type == null || ( ! ( type . isInstance ( HttpEntityEnclosingRequest . class ) ) && hasBody ) ) { httpRequest = new CustomHttpMethod ( method , uri ) ; } else { try { httpRequest = type . newInstance ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } httpRequest . setURI ( uri ) ; } return httpRequest ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .<CODESPLIT>public static void filters ( Filter filter , Filter ... additionalFilters ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
1<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>jodd-bean/src/main/java/jodd/bean/BeanCopy.java<CODESPLIT>Parse the remote address of the channel .<CODESPLIT>@ Override protected boolean visitProperty ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return true ; }
1<CODESPLIT>jodd-bean/src/main/java/jodd/introspector/ClassDescriptor.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/CsrfShield.java<CODESPLIT>Returns property descriptor . Declared flag is matched on both read and write methods .<CODESPLIT>@ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/util/ParallelSorter.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>Sort the arrays using an in - place merge sort .<CODESPLIT>private int readElementValues ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ; // Read the num_element_value_pairs field (or num_values field for an array_value). int numElementValuePairs = readUnsignedShort ( currentOffset ) ; currentOffset += 2 ; if ( named ) { // Parse the element_value_pairs array. while ( numElementValuePairs -- > 0 ) { String elementName = readUTF8 ( currentOffset , charBuffer ) ; currentOffset = readElementValue ( annotationVisitor , currentOffset + 2 , elementName , charBuffer ) ; } } else { // Parse the array_value array. while ( numElementValuePairs -- > 0 ) { currentOffset = readElementValue ( annotationVisitor , currentOffset , /* named = */ null , charBuffer ) ; } } if ( annotationVisitor != null ) { annotationVisitor . visitEnd ( ) ; } return currentOffset ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpMultiMap.java<CODESPLIT>Execute a read operation<CODESPLIT>public HttpMultiMap < V > clear ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/CsrfShield.java<CODESPLIT>Add a result handler<CODESPLIT>@ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
1<CODESPLIT>src/main/java/io/reactivex/processors/MulticastProcessor.java<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/IndexController.java<CODESPLIT>Tries to offer an item into the internal queue and returns false if the queue is full .<CODESPLIT>@ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView displayPublicIndex ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/operators/observable/ObservableScalarXMap.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>Maps a scalar value into an Observable and emits its values .<CODESPLIT>public String resolveResultPathString ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Errors.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>Within guice s core allow for better missing binding messages<CODESPLIT>public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/AddDeleteContactController.java<CODESPLIT>Set the parameter config<CODESPLIT>@ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/AuthConfig.java<CODESPLIT>Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>public void basic ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>core/play-java/src/main/java/play/libs/Time.java<CODESPLIT>Decompress gzip archive .<CODESPLIT>public static long cronInterval ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>jodd-decora/src/main/java/jodd/decora/DecoraResponseWrapper.java<CODESPLIT>Translates the first defined message .<CODESPLIT>@ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>core/play-java/src/main/java/play/libs/Comet.java<CODESPLIT>Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .<CODESPLIT>public static Flow < String , ByteString , NotUsed > string ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/RandomSelectStrategy.java<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAApi.java<CODESPLIT>get one connection randomly<CODESPLIT>public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
1<CODESPLIT>core/src/com/google/inject/TypeLiteral.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java<CODESPLIT>Gets the type of this type s provider .<CODESPLIT>public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/encrypt/CipherUtils.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Constructs a new Cipher .<CODESPLIT>@ Override public CompletionStage < Result > onClientError ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java<CODESPLIT>rest-assured/src/main/java/io/restassured/authentication/PreemptiveAuthProvider.java<CODESPLIT>Starts creation of first chain delegate .<CODESPLIT>public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/authentication/PreemptiveAuthProvider.java<CODESPLIT>core/src/com/google/inject/spi/Message.java<CODESPLIT>Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .<CODESPLIT>private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
1<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>web/src/main/java/org/springframework/security/web/FilterChainProxy.java<CODESPLIT>Declares a namespace .<CODESPLIT>public List < Filter > getFilters ( String url ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Lookups type data and creates one if missing .<CODESPLIT>public String resolveJsonName ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Flowable.java<CODESPLIT>core/play/src/main/java/play/mvc/WebSocket.java<CODESPLIT>Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .<CODESPLIT>private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/FileNameUtil.java<CODESPLIT>jodd-core/src/main/java/jodd/io/FileNameUtil.java<CODESPLIT>Calculates relative path of target path on base path .<CODESPLIT>private static String doGetPath ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/MembersInjectorStore.java<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>Returns a new complete members injector with injection listeners registered .<CODESPLIT>public void init ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ; // only create new arrays if the value of N{w} changes (different key size) if ( nw != newNw ) { nw = newNw ; switch ( nw ) { case WORDS_4 : pi = PI4 ; rpi = RPI4 ; r = R4 ; break ; case WORDS_8 : pi = PI8 ; rpi = RPI8 ; r = R8 ; break ; case WORDS_16 : pi = PI16 ; rpi = RPI16 ; r = R16 ; break ; default : throw new RuntimeException ( "Invalid threefish key" ) ; } this . k = new long [ nw + 1 ] ; // instantiation of these fields here for performance reasons vd = new long [ nw ] ; // v is the intermediate value v{d} at round d ed = new long [ nw ] ; // ed is the value of e{d} at round d fd = new long [ nw ] ; // fd is the value of f{d} at round d ksd = new long [ nw ] ; // ksd is the value of k{s} at round d } System . arraycopy ( key , 0 , this . k , 0 , key . length ) ; long knw = EXTENDED_KEY_SCHEDULE_CONST ; for ( int i = 0 ; i < nw ; i ++ ) { knw ^= this . k [ i ] ; } this . k [ nw ] = knw ; // set tweak values t [ 0 ] = tweak [ 0 ] ; t [ 1 ] = tweak [ 1 ] ; t [ 2 ] = t [ 0 ] ^ t [ 1 ] ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Creates the shared objects<CODESPLIT>@ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/result/RawData.java<CODESPLIT>Add the given parameters to an already configured number of parameters .<CODESPLIT>public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/CustomSerializerManager.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/password/MessageDigestPasswordEncoder.java<CODESPLIT>Get the custom serializer for class name .<CODESPLIT>public String encode ( CharSequence rawPassword ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/jtx/JtxDbUtil.java<CODESPLIT>src/main/java/io/reactivex/Notification.java<CODESPLIT>Converter JTX transaction mode to DB transaction mode .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
1<CODESPLIT>core/play-java/src/main/java/play/libs/Time.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/encrypt/CipherUtils.java<CODESPLIT>Compute the number of milliseconds between the next valid date and the one after .<CODESPLIT>public static Cipher newCipher ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
1<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionMonitor.java<CODESPLIT>Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .<CODESPLIT>public void start ( ) { /** initial delay to execute schedule task, unit: ms */ long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; /** period of schedule task, unit: ms*/ long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , true ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
1<CODESPLIT>oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/ReactiveRemoteJWKSource.java<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>Updates the cached JWK set from the configured URL .<CODESPLIT>public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/ReflectUtils.java<CODESPLIT>jodd-core/src/main/java/jodd/io/FileNameUtil.java<CODESPLIT>used by MethodInterceptorGenerated generated code<CODESPLIT>public static String relativePath ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
1<CODESPLIT>src/main/java/io/reactivex/subjects/PublishSubject.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Atomically removes the given subscriber if it is subscribed to the subject .<CODESPLIT>private < T > BindingImpl < T > convertConstantStringBinding ( Key < T > key , Errors errors ) throws ErrorsException { // Find a constant string binding. Key < String > stringKey = key . ofType ( STRING_TYPE ) ; BindingImpl < String > stringBinding = state . getExplicitBinding ( stringKey ) ; if ( stringBinding == null || ! stringBinding . isConstant ( ) ) { return null ; } // We can't call getProvider().get() because this InstanceBinding may not have been inintialized // yet (because we may have been called during InternalInjectorCreator.initializeStatically and // instance binding validation hasn't happened yet.) @ SuppressWarnings ( "unchecked" ) String stringValue = ( ( InstanceBinding < String > ) stringBinding ) . getInstance ( ) ; Object source = stringBinding . getSource ( ) ; // Find a matching type converter. TypeLiteral < T > type = key . getTypeLiteral ( ) ; TypeConverterBinding typeConverterBinding = state . getConverter ( stringValue , type , errors , source ) ; if ( typeConverterBinding == null ) { // No converter can handle the given type. return null ; } // Try to convert the string. A failed conversion results in an error. try { @ SuppressWarnings ( "unchecked" ) // This cast is safe because we double check below. T converted = ( T ) typeConverterBinding . getTypeConverter ( ) . convert ( stringValue , type ) ; if ( converted == null ) { throw errors . converterReturnedNull ( stringValue , source , type , typeConverterBinding ) . toException ( ) ; } if ( ! type . getRawType ( ) . isInstance ( converted ) ) { throw errors . conversionTypeError ( stringValue , source , type , typeConverterBinding , converted ) . toException ( ) ; } return new ConvertedConstantBindingImpl < T > ( this , key , converted , stringBinding , typeConverterBinding ) ; } catch ( ErrorsException e ) { throw e ; } catch ( RuntimeException e ) { throw errors . conversionError ( stringValue , source , type , typeConverterBinding , e ) . toException ( ) ; } }
1<CODESPLIT>core/src/com/google/inject/internal/ConstructorInjector.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Provisions a new T .<CODESPLIT>protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ; // store null as value to mark that alt name is duplicate } } else { beansAlt . put ( altName , beanDefinition ) ; } } }
1<CODESPLIT>src/main/java/io/reactivex/Flowable.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .<CODESPLIT>protected CompletionStage < Result > onForbidden ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/BeanData.java<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>Calls destroy methods on given BeanData . Destroy methods are called without any order .<CODESPLIT>public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/AbstractAuthenticationTargetUrlRequestHandler.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/MultiPartConfig.java<CODESPLIT>Builds the target URL according to the logic defined in the main class Javadoc<CODESPLIT>public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , true ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/RestAssuredConfig.java<CODESPLIT>Defines exclude patterns .<CODESPLIT>public RestAssuredConfig redirect ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/FieldVisitor.java<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>Visits an annotation of the field .<CODESPLIT>public static < T > Callable < T > justCallable ( T value ) { return new JustValue < Object , T > ( value ) ; }
1<CODESPLIT>core/play/src/main/java/play/libs/Json.java<CODESPLIT>jodd-json/src/main/java/jodd/json/impl/KeyValueJsonSerializer.java<CODESPLIT>Parses a String representing a json and return it as a JsonNode .<CODESPLIT>protected int serializeKeyValue ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; } // check if we should include the field boolean include = true ; if ( value != null ) { // + all collections are not serialized by default include = jsonContext . matchIgnoredPropertyTypes ( value . getClass ( ) , false , include ) ; // + path queries: excludes/includes include = jsonContext . matchPathToQueries ( include ) ; } // done if ( ! include ) { currentPath . pop ( ) ; return count ; } if ( key == null ) { jsonContext . pushName ( null , count > 0 ) ; } else { jsonContext . pushName ( key . toString ( ) , count > 0 ) ; } jsonContext . serialize ( value ) ; if ( jsonContext . isNamePopped ( ) ) { count ++ ; } currentPath . pop ( ) ; return count ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .<CODESPLIT>static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
1<CODESPLIT>core/src/com/google/inject/spi/MembersInjectorLookup.java<CODESPLIT>jodd-core/src/main/java/jodd/util/collection/IntHashMap.java<CODESPLIT>Sets the actual members injector .<CODESPLIT>@ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/FilterChainProxy.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Convenience method mainly for testing .<CODESPLIT>private void addConstantUtf8 ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Disable modules by class .<CODESPLIT>public long getLong ( String path ) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get ( path ) ; if ( value instanceof Long ) { return ( Long ) value ; } else if ( value instanceof Short ) { return ( ( Short ) value ) . longValue ( ) ; } else if ( value instanceof Integer ) { return ( ( Integer ) value ) . longValue ( ) ; } else { return ObjectConverter . convertObjectTo ( value , Long . class ) ; } }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAApi.java<CODESPLIT>persistence/play-java-jdbc/src/main/java/play/db/DefaultDatabase.java<CODESPLIT>Run a block of code with a newly created EntityManager for the default Persistence Unit .<CODESPLIT>< A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return block . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
1<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .<CODESPLIT>public static int lastIndexOfDotAfterSlash ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/password/StandardPasswordEncoder.java<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>Constant time comparison to prevent against timing attacks .<CODESPLIT>public static void proxy ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
1<CODESPLIT>jodd-bean/src/main/java/jodd/introspector/Ctors.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Inspects all declared constructors of a target type .<CODESPLIT>private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return false ; } } return true ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/password/MessageDigestPasswordEncoder.java<CODESPLIT>Adds the jaas - api integration filter if required<CODESPLIT>public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/SocketChannelIOHelper.java<CODESPLIT>samples/xml/dms/src/main/java/sample/dms/DocumentDaoImpl.java<CODESPLIT>Returns whether the whole outQueue has been flushed<CODESPLIT>private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) { // Need to go and lookup the parent, so do that first parentDirectory = getDirectoryWithImmediateParentPopulated ( parentDirectoryId ) ; } Directory directory = new Directory ( rs . getString ( "directory_name" ) , parentDirectory ) ; FieldUtils . setProtectedFieldValue ( "id" , directory , new Long ( rs . getLong ( "id" ) ) ) ; return directory ; } } ) ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Matching logic for constructors annotated with AssistedInject . This returns true if and only if all<CODESPLIT>public static String parseRemoteIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .<CODESPLIT>public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/WebApp.java<CODESPLIT>Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>protected void registerMadvocComponents ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .<CODESPLIT>private static Seq < Object > convertArgsToScalaBuffer ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcResponseResolver.java<CODESPLIT>Builds a PUT request .<CODESPLIT>private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/RequestSpecBuilder.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/proxetta/ProxettaAwarePetiteContainer.java<CODESPLIT>Add a cookie to be sent with the request .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>core/src/com/google/inject/internal/ProviderInternalFactory.java<CODESPLIT>Locates last index of dot after the optional last slash .<CODESPLIT>protected T provision ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Action.java<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>Executes this action with the given HTTP context and returns the result .<CODESPLIT>private Set < Dependency < ? > > getDependencies ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/BeanData.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Creates a new instance .<CODESPLIT>Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
1<CODESPLIT>jodd-jtx/src/main/java/jodd/jtx/JtxTransaction.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/AbstractConfiguredSecurityBuilder.java<CODESPLIT>Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Execute a read operation<CODESPLIT>public DetailedCookieMatcher version ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/AnnotationResolver.java<CODESPLIT>Set the Json config .<CODESPLIT>public String resolveBeanName ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/CodeEmitter.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>package - protected for EmitUtils try to fix<CODESPLIT>public static String parseRemoteIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>Process the frame if it is a closing frame<CODESPLIT>public static String stripLastCamelWord ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Returns entity descriptor for provided table reference .<CODESPLIT>public T to ( final String personalName , final String to ) { return to ( new EmailAddress ( personalName , to ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/authentication/ProviderManager.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .<CODESPLIT>protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) { // alias markers not found if ( i == 0 ) { // try whole string as an alias String alias = lookupAlias ( value ) ; return ( alias != null ? alias : value ) ; } else { result . append ( value . substring ( i ) ) ; } break ; } // alias marked found result . append ( value . substring ( i , ndx ) ) ; ndx ++ ; int ndx2 = value . indexOf ( ' ' , ndx ) ; String aliasName = ( ndx2 == - 1 ? value . substring ( ndx ) : value . substring ( ndx , ndx2 ) ) ; // process alias String alias = lookupAlias ( aliasName ) ; if ( alias != null ) { result . append ( alias ) ; } else { // alias not found if ( log . isWarnEnabled ( ) ) { log . warn ( "Alias not found: " + aliasName ) ; } } i = ndx2 + 1 ; } // fix prefix '//' - may happened when aliases are used i = 0 ; len = result . length ( ) ; while ( i < len ) { if ( result . charAt ( i ) != ' ' ) { break ; } i ++ ; } if ( i > 1 ) { return result . substring ( i - 1 , len ) ; } return result . toString ( ) ; }
1<CODESPLIT>jodd-bean/src/main/java/jodd/bean/BeanUtilBean.java<CODESPLIT>core/src/com/google/inject/internal/InternalContext.java<CODESPLIT>Returns value of bean s property .<CODESPLIT>void pushState ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>src/main/java/io/reactivex/subscribers/DefaultSubscriber.java<CODESPLIT>Adds plain message text .<CODESPLIT>protected final void request ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
1<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>Gets the strategy for an annotation type .<CODESPLIT>protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
1<CODESPLIT>core/src/com/google/inject/internal/RealMultibinder.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Adds a new entry to the set and returns the key for it .<CODESPLIT>public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>core/play/src/main/java/play/libs/reflect/MemberUtils.java<CODESPLIT>Get all connections of all poolKey .<CODESPLIT>private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { // slight penalty for interface match. // we still want an exact match to override an interface match, // but // an interface match should override anything where we have to // get a superclass. cost += 0.25f ; break ; } cost ++ ; srcClass = srcClass . getSuperclass ( ) ; } /*      * If the destination class is null, we've traveled all the way up to      * an Object match. We'll penalize this by adding 1.5 to the cost.      */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ReconnectManager.java<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>stop reconnect thread<CODESPLIT>public static boolean getBoolean ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return true ; case "false" : case "no" : case "0" : case "off" : return false ; default : return defaultValue ; } }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/authentication/CasAuthenticationProvider.java<CODESPLIT>jodd-core/src/main/java/jodd/io/upload/impl/AdaptiveFileUpload.java<CODESPLIT>Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .<CODESPLIT>@ Override public byte [ ] getFileContent ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/SpringSecurityCoreVersion.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Perform version checks with specific min Spring Version<CODESPLIT>public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/MoreTypes.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Returns an type that s appropriate for use in a key .<CODESPLIT>public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; } // remove existing bean BeanDefinition existing = removeBean ( name ) ; if ( existing != null ) { if ( petiteConfig . getDetectDuplicatedBeanNames ( ) ) { throw new PetiteException ( "Duplicated bean name detected while registering class '" + type . getName ( ) + "'. Petite bean class '" + existing . type . getName ( ) + "' is already registered with the name: " + name ) ; } } // check if type is valid if ( type . isInterface ( ) ) { throw new PetiteException ( "PetiteBean can not be an interface: " + type . getName ( ) ) ; } // registration if ( log . isDebugEnabled ( ) ) { log . info ( "Petite bean: [" + name + "] --> " + type . getName ( ) + " @ " + scopeType . getSimpleName ( ) + ":" + wiringMode . toString ( ) ) ; } // register Scope scope = resolveScope ( scopeType ) ; BeanDefinition < T > beanDefinition = createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; registerBean ( name , beanDefinition ) ; // providers ProviderDefinition [ ] providerDefinitions = petiteResolvers . resolveProviderDefinitions ( type , name ) ; if ( providerDefinitions != null ) { for ( ProviderDefinition providerDefinition : providerDefinitions ) { providers . put ( providerDefinition . name , providerDefinition ) ; } } // define if ( define ) { beanDefinition . ctor = petiteResolvers . resolveCtorInjectionPoint ( beanDefinition . type ( ) ) ; beanDefinition . properties = PropertyInjectionPoint . EMPTY ; beanDefinition . methods = MethodInjectionPoint . EMPTY ; beanDefinition . initMethods = InitMethodPoint . EMPTY ; beanDefinition . destroyMethods = DestroyMethodPoint . EMPTY ; } // return return beanDefinition ; }
1<CODESPLIT>core/src/com/google/inject/TypeLiteral.java<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>Gets the type of this type s provider .<CODESPLIT>public static void unzip ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/WebSocketAdapter.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/j2ee/J2eePreAuthenticatedProcessingFilter.java<CODESPLIT>This default implementation does not do anything . Go ahead and overwrite it .<CODESPLIT>protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/SimpleUrlAuthenticationSuccessHandler.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>Removes temporary authentication - related data which may have been stored in the session during the authentication process .<CODESPLIT>protected Set < T > getAll ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/protocol/UserProcessorRegisterHelper.java<CODESPLIT>src/main/java/com/alipay/remoting/util/NettyEventLoopUtil.java<CODESPLIT>Help register single - interest user processor .<CODESPLIT>public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
1<CODESPLIT>jodd-joy/src/main/java/jodd/joy/i18n/LocalizationUtil.java<CODESPLIT>core/src/com/google/inject/internal/MoreTypes.java<CODESPLIT>Saves Locale to HTTP session .<CODESPLIT>public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; // the following casts are generally unsafe, but com.google.inject.Provider extends // javax.inject.Provider and is covariant @ SuppressWarnings ( "unchecked" ) TypeLiteral < T > guiceProviderType = ( TypeLiteral < T > ) TypeLiteral . get ( Types . providerOf ( parameterizedType . getActualTypeArguments ( ) [ 0 ] ) ) ; return guiceProviderType ; } @ SuppressWarnings ( "unchecked" ) TypeLiteral < T > wrappedPrimitives = ( TypeLiteral < T > ) PRIMITIVE_TO_WRAPPER . get ( typeLiteral ) ; if ( wrappedPrimitives != null ) { return wrappedPrimitives ; } // If we know this isn't a subclass, return as-is. if ( typeLiteral . getClass ( ) == TypeLiteral . class ) { return typeLiteral ; } // recreate the TypeLiteral to avoid anonymous TypeLiterals from holding refs to their // surrounding classes. @ SuppressWarnings ( "unchecked" ) TypeLiteral < T > recreated = ( TypeLiteral < T > ) TypeLiteral . get ( typeLiteral . getType ( ) ) ; return recreated ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcRemoting.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/EmailUtil.java<CODESPLIT>Convert application request object to remoting request command .<CODESPLIT>public static String extractEncoding ( final String contentType , String defaultEncoding ) { String encoding = extractEncoding ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/HttpRequestFactory.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Get the HttpRequest class that represents this request type .<CODESPLIT>private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>core/play/src/main/java-scala-2.13+/play/libs/CrossScala.java<CODESPLIT>Check if the requested protocol is part of this draft<CODESPLIT>@ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... array ) { return toSeq ( array ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/Buffer.java<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>Writes content to the writer .<CODESPLIT>public static String nameOf ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
1<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Cleans up any state that may have been cached when constructing the JIT binding .<CODESPLIT>private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAApi.java<CODESPLIT>core/src/com/google/inject/internal/WeakKeySet.java<CODESPLIT>Get a newly created EntityManager for the specified persistence unit name .<CODESPLIT>private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
1<CODESPLIT>core/src/com/google/inject/internal/util/LineNumbers.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/util/ParallelSorter.java<CODESPLIT>Get the line number associated with the given member .<CODESPLIT>public static ParallelSorter create ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
1<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Puts key - value pair into the map with respect of appending duplicate properties<CODESPLIT>public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) { // TODO Avoid double parsing String str = objectToString ( t ) ; //noinspection unchecked e = ( T ) jsonStringToObject ( str , genericType ) ; } else { e = ObjectConverter . convertObjectTo ( t , genericType ) ; } newList . add ( e ) ; } } return Collections . unmodifiableList ( newList ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/AuthConfig.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>Set NTLM authentication credentials to be used for the given host and port .<CODESPLIT>protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/filter/log/ResponseLoggingFilter.java<CODESPLIT>samples/xml/dms/src/main/java/sample/dms/DataSourcePopulator.java<CODESPLIT>Create a new logging filter without using the new operator . Will make the DSL look nicer .<CODESPLIT>private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try { // Set the SecurityContextHolder ThreadLocal so any subclasses // automatically know which user is operating SecurityContextHolder . getContext ( ) . setAuthentication ( auth ) ; // Create the home directory first Directory home = new Directory ( username , Directory . ROOT_DIRECTORY ) ; documentDao . create ( home ) ; addPermission ( documentDao , home , username , LEVEL_GRANT_ADMIN ) ; addPermission ( documentDao , home , "ROLE_USER" , LEVEL_GRANT_READ ) ; createFiles ( documentDao , home ) ; // Now create the confidential directory Directory confid = new Directory ( "confidential" , home ) ; documentDao . create ( confid ) ; addPermission ( documentDao , confid , "ROLE_USER" , LEVEL_NEGATE_READ ) ; createFiles ( documentDao , confid ) ; // Now create the shared directory Directory shared = new Directory ( "shared" , home ) ; documentDao . create ( shared ) ; addPermission ( documentDao , shared , "ROLE_USER" , LEVEL_GRANT_READ ) ; addPermission ( documentDao , shared , "ROLE_USER" , LEVEL_GRANT_WRITE ) ; createFiles ( documentDao , shared ) ; } finally { // Clear the SecurityContextHolder ThreadLocal so future calls are // guaranteed to be clean SecurityContextHolder . clearContext ( ) ; } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ScopeResolver.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/DefaultSpringSecurityContextSource.java<CODESPLIT>Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .<CODESPLIT>private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/MapBasedAttributes2GrantedAuthoritiesMapper.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/password/MessageDigestPasswordEncoder.java<CODESPLIT>Convert the given value to a collection of Granted Authorities<CODESPLIT>public String encode ( CharSequence rawPassword ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/framing/FramedataImpl1.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/AnnotationResolver.java<CODESPLIT>Get a frame with a specific opcode<CODESPLIT>public String resolveBeanName ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java<CODESPLIT>jodd-core/src/main/java/jodd/util/collection/IntHashMap.java<CODESPLIT>Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .<CODESPLIT>@ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/DynamicForm.java<CODESPLIT>config/src/main/java/org/springframework/security/config/http/DefaultFilterChainValidator.java<CODESPLIT>Fills the form with existing data .<CODESPLIT>private void checkFilterStack ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Scans single classpath directory .<CODESPLIT>@ Override public Connection getAndCreateIfAbsent ( Url url ) throws InterruptedException , RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this . getConnectionPoolAndCreateIfAbsent ( url . getUniqueKey ( ) , new ConnectionPoolCall ( url ) ) ; if ( null != pool ) { return pool . get ( ) ; } else { logger . error ( "[NOTIFYME] bug detected! pool here must not be null!" ) ; return null ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/server/util/matcher/ServerWebExchangeMatchers.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>Matches any exchange<CODESPLIT>public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/type/SqlType.java<CODESPLIT>src/main/java/com/alipay/remoting/ProcessorManager.java<CODESPLIT>Once when value is read from result set prepare it to match destination type .<CODESPLIT>public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/MultiPartSpecBuilder.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Specify the control name of this multi - part .<CODESPLIT>public static String parseRemoteAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/CsrfShield.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Generates new CSRF token and puts it in the session . Returns generated token value .<CODESPLIT>protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>core/play/src/main/java/play/libs/concurrent/DefaultFutures.java<CODESPLIT>Execute a write operation<CODESPLIT>@ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/ExceptionHelper.java<CODESPLIT>core/src/com/google/inject/internal/Errors.java<CODESPLIT>Workaround for Java 6 not supporting throwing a final Throwable from a catch block .<CODESPLIT>< T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ; // Keys which have similar strings as the desired key List < String > possibleMatches = new ArrayList <> ( ) ; // Check for other keys that may have the same type, // but not the same annotation TypeLiteral < T > type = key . getTypeLiteral ( ) ; List < Binding < T > > sameTypes = injector . findBindingsByType ( type ) ; if ( ! sameTypes . isEmpty ( ) ) { sb . append ( format ( "%n  Did you mean?" ) ) ; int howMany = Math . min ( sameTypes . size ( ) , MAX_MATCHING_TYPES_REPORTED ) ; for ( int i = 0 ; i < howMany ; ++ i ) { // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the given annotation vs actual annotation. sb . append ( format ( "%n    * %s" , sameTypes . get ( i ) . getKey ( ) ) ) ; } int remaining = sameTypes . size ( ) - MAX_MATCHING_TYPES_REPORTED ; if ( remaining > 0 ) { String plural = ( remaining == 1 ) ? "" : "s" ; sb . append ( format ( "%n    %d more binding%s with other annotations." , remaining , plural ) ) ; } } else { // For now, do a simple substring search for possibilities. This can help spot // issues when there are generics being used (such as a wrapper class) and the // user has forgotten they need to bind based on the wrapper, not the underlying // class. In the future, consider doing a strict in-depth type search. // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the type literal strings. String want = type . toString ( ) ; Map < Key < ? > , Binding < ? > > bindingMap = injector . getAllBindings ( ) ; for ( Key < ? > bindingKey : bindingMap . keySet ( ) ) { String have = bindingKey . getTypeLiteral ( ) . toString ( ) ; if ( have . contains ( want ) || want . contains ( have ) ) { Formatter fmt = new Formatter ( ) ; Messages . formatSource ( fmt , bindingMap . get ( bindingKey ) . getSource ( ) ) ; String match = String . format ( "%s bound%s" , convert ( bindingKey ) , fmt . toString ( ) ) ; possibleMatches . add ( match ) ; // TODO: Consider a check that if there are more than some number of results, // don't suggest any. if ( possibleMatches . size ( ) > MAX_RELATED_TYPES_REPORTED ) { // Early exit if we have found more than we need. break ; } } } if ( ( possibleMatches . size ( ) > 0 ) && ( possibleMatches . size ( ) <= MAX_RELATED_TYPES_REPORTED ) ) { sb . append ( format ( "%n  Did you mean?" ) ) ; for ( String possibleMatch : possibleMatches ) { sb . append ( format ( "%n    %s" , possibleMatch ) ) ; } } } // If where are no possibilities to suggest, then handle the case of missing // annotations on simple types. This is usually a bad idea. if ( sameTypes . isEmpty ( ) && possibleMatches . isEmpty ( ) && key . getAnnotation ( ) == null && COMMON_AMBIGUOUS_TYPES . contains ( key . getTypeLiteral ( ) . getRawType ( ) ) ) { // We don't recommend using such simple types without annotations. sb . append ( format ( "%nThe key seems very generic, did you forget an annotation?" ) ) ; } return addMessage ( sb . toString ( ) ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseBuilder.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Build the actual response<CODESPLIT>public String resolveRealName ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/tag/TagUtil.java<CODESPLIT>jodd-core/src/main/java/jodd/crypt/BCrypt.java<CODESPLIT>Renders tag body to char array .<CODESPLIT>public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; } // Extract number of rounds if ( salt . charAt ( off + 2 ) > ' ' ) { throw new IllegalArgumentException ( "Missing salt rounds" ) ; } rounds = Integer . parseInt ( salt . substring ( off , off + 2 ) ) ; real_salt = salt . substring ( off + 3 , off + 25 ) ; try { passwordb = ( password + ( minor >= ' ' ? "\000" : "" ) ) . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { throw new AssertionError ( "UTF-8 is not supported" ) ; } saltb = decode_base64 ( real_salt , BCRYPT_SALT_LEN ) ; B = new BCrypt ( ) ; hashed = B . crypt_raw ( passwordb , saltb , rounds , ( int [ ] ) bf_crypt_ciphertext . clone ( ) ) ; rs . append ( "$2" ) ; if ( minor >= ' ' ) { rs . append ( minor ) ; } rs . append ( ' ' ) ; if ( rounds < 10 ) { rs . append ( ' ' ) ; } if ( rounds > 30 ) { throw new IllegalArgumentException ( "rounds exceeds maximum (30)" ) ; } rs . append ( rounds ) . append ( ' ' ) . append ( encode_base64 ( saltb , saltb . length ) ) . append ( encode_base64 ( hashed , bf_crypt_ciphertext . length * 4 - 1 ) ) ; return rs . toString ( ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Prepares parameters for further processing .<CODESPLIT>public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Finds entity descriptor of a table that contains provided column reference .<CODESPLIT>public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/util/UrlUtils.java<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .<CODESPLIT>@ Override public byte [ ] encryptBlock ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/util/collection/IntHashMap.java<CODESPLIT>cas/src/main/java/org/springframework/security/cas/authentication/CasAuthenticationProvider.java<CODESPLIT>Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .<CODESPLIT>protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/LdapUtils.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .<CODESPLIT>public GuiceApplicationBuilder load ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
1<CODESPLIT>core/src/com/google/inject/spi/MembersInjectorLookup.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>Sets the actual members injector .<CODESPLIT>public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/MapBasedAttributes2GrantedAuthoritiesMapper.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Preprocess the given map to convert all the values to GrantedAuthority collections<CODESPLIT>public < T > List < T > getList ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) { // TODO Avoid double parsing String str = objectToString ( t ) ; //noinspection unchecked e = ( T ) jsonStringToObject ( str , genericType ) ; } else { e = ObjectConverter . convertObjectTo ( t , genericType ) ; } newList . add ( e ) ; } } return Collections . unmodifiableList ( newList ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java<CODESPLIT>Set the Log config .<CODESPLIT>public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/LogConfig.java<CODESPLIT>Builds a CONNECT request .<CODESPLIT>public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , true , logDetailIfValidationFails , urlEncodeRequestUri , true ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary<CODESPLIT>public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Builds a PUT request .<CODESPLIT>public GuiceApplicationBuilder load ( com . google . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/client/WebSocketClient.java<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>Create and send the handshake to the other endpoint<CODESPLIT>@ Override protected Collection < ConfigAttribute > findAttributes ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/util/UrlUtils.java<CODESPLIT>core/src/com/google/inject/internal/TypeConverterBindingProcessor.java<CODESPLIT>Obtains the web application - specific fragment of the URL .<CODESPLIT>static void prepareBuiltInConverters ( InjectorImpl injector ) { // Configure type converters. convertToPrimitiveType ( injector , int . class , Integer . class ) ; convertToPrimitiveType ( injector , long . class , Long . class ) ; convertToPrimitiveType ( injector , boolean . class , Boolean . class ) ; convertToPrimitiveType ( injector , byte . class , Byte . class ) ; convertToPrimitiveType ( injector , short . class , Short . class ) ; convertToPrimitiveType ( injector , float . class , Float . class ) ; convertToPrimitiveType ( injector , double . class , Double . class ) ; convertToClass ( injector , Character . class , new TypeConverter ( ) { @ Override public Object convert ( String value , TypeLiteral < ? > toType ) { value = value . trim ( ) ; if ( value . length ( ) != 1 ) { throw new RuntimeException ( "Length != 1." ) ; } return value . charAt ( 0 ) ; } @ Override public String toString ( ) { return "TypeConverter<Character>" ; } } ) ; convertToClasses ( injector , Matchers . subclassesOf ( Enum . class ) , new TypeConverter ( ) { @ Override @ SuppressWarnings ( "unchecked" ) public Object convert ( String value , TypeLiteral < ? > toType ) { return Enum . valueOf ( ( Class ) toType . getRawType ( ) , value ) ; } @ Override public String toString ( ) { return "TypeConverter<E extends Enum<E>>" ; } } ) ; internalConvertToTypes ( injector , new AbstractMatcher < TypeLiteral < ? > > ( ) { @ Override public boolean matches ( TypeLiteral < ? > typeLiteral ) { return typeLiteral . getRawType ( ) == Class . class ; } @ Override public String toString ( ) { return "Class<?>" ; } } , new TypeConverter ( ) { @ Override @ SuppressWarnings ( "unchecked" ) public Object convert ( String value , TypeLiteral < ? > toType ) { try { return Class . forName ( value ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e . getMessage ( ) ) ; } } @ Override public String toString ( ) { return "TypeConverter<Class<?>>" ; } } ) ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/LogConfig.java<CODESPLIT>Get the result of an Object path expression as a float .<CODESPLIT>public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , true , logDetailIfValidationFails , urlEncodeRequestUri , true ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/SingleParameterInjector.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Returns an array of parameter values .<CODESPLIT>public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , true ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseBuilder.java<CODESPLIT>jodd-http/src/main/java/jodd/http/Buffer.java<CODESPLIT>Set a specific header<CODESPLIT>public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Bind this binding key to the given provider class .<CODESPLIT>private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/libs/F.java<CODESPLIT>rest-assured/src/main/java/io/restassured/http/Cookies.java<CODESPLIT>Converts the execution context to an executor preparing it first .<CODESPLIT>public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>core/play/src/main/java/play/mvc/Call.java<CODESPLIT>Collects all action runtime configurations .<CODESPLIT>public String webSocketURL ( Http . Request request ) { return webSocketURL ( request . secure ( ) , request . host ( ) ) ; }
1<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/AdminPermissionController.java<CODESPLIT>jodd-core/src/main/java/jodd/io/upload/impl/AdaptiveFileUpload.java<CODESPLIT>Deletes a permission<CODESPLIT>@ Override public byte [ ] getFileContent ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpMultiMap.java<CODESPLIT>web/src/main/java/org/springframework/security/web/server/util/matcher/ServerWebExchangeMatchers.java<CODESPLIT>Clears the map .<CODESPLIT>public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/DynamicForm.java<CODESPLIT>core/src/com/google/inject/internal/InjectorShell.java<CODESPLIT>Fills the form with existing data .<CODESPLIT>private static void bindInjector ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
1<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/AdminPermissionController.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/advice/DelegateAdviceUtil.java<CODESPLIT>Handles submission of the add permission form .<CODESPLIT>public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) { // advice not yet created adviceClass = PROXY_PROXETTA . proxy ( ) . setTarget ( targetClass ) . define ( ) ; cache . put ( targetClass , adviceClass ) ; } // create new advice instance and injects target instance to it try { Object advice = ClassUtil . newInstance ( adviceClass ) ; Field field = adviceClass . getField ( "$___target$0" ) ; field . set ( advice , targetClass ) ; return ( T ) advice ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsManager.java<CODESPLIT>Returns a Callable that returns the given value .<CODESPLIT>public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>config/src/main/java/org/springframework/security/config/core/userdetails/UserDetailsResourceFactoryBean.java<CODESPLIT>Defines class name as a target . Class will not be loaded by classloader!<CODESPLIT>public static UserDetailsResourceFactoryBean fromString ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java<CODESPLIT>src/main/java/io/reactivex/subjects/UnicastSubject.java<CODESPLIT>Returns an instance of T constructed using this constructor with the supplied arguments .<CODESPLIT>@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , true ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .<CODESPLIT>public < K , V > Map < K , V > getMap ( String path ) { return get ( path ) ; }
1<CODESPLIT>core/src/com/google/inject/spi/ProviderLookup.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionPathRewriter.java<CODESPLIT>Sets the actual provider .<CODESPLIT>@ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Get the result of an Object path expression as a map .<CODESPLIT>protected CompletionStage < Result > onNotFound ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
1<CODESPLIT>src/main/java/com/alipay/remoting/ReconnectManager.java<CODESPLIT>core/src/com/google/inject/internal/InjectorShell.java<CODESPLIT>add reconnect task<CODESPLIT>private static void bindLogger ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Sets header value .<CODESPLIT>@ Override public Connection getAndCreateIfAbsent ( Url url ) throws InterruptedException , RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this . getConnectionPoolAndCreateIfAbsent ( url . getUniqueKey ( ) , new ConnectionPoolCall ( url ) ) ; if ( null != pool ) { return pool . get ( ) ; } else { logger . error ( "[NOTIFYME] bug detected! pool here must not be null!" ) ; return null ; } }
1<CODESPLIT>extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java<CODESPLIT>core/src/main/java/org/springframework/security/core/SpringSecurityCoreVersion.java<CODESPLIT>Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .<CODESPLIT>private static boolean disableChecks ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return true ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>jodd-bean/src/main/java/jodd/typeconverter/impl/LongArrayConverter.java<CODESPLIT>Specifies the search path . Throws an exception if URI is invalid .<CODESPLIT>protected long [ ] convertArrayToArray ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else { // convert object array to target array final Object [ ] array = ( Object [ ] ) value ; result = new long [ array . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) { result [ i ] = convertType ( array [ i ] ) ; } } return result ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/BackpressureHelper.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Multiplies two long values and caps the product at Long . MAX_VALUE .<CODESPLIT>public String getString ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
1<CODESPLIT>extensions/servlet/src/com/google/inject/servlet/ManagedFilterPipeline.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .<CODESPLIT>@ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/result/RawData.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>Defines download file name and mime type from the name extension .<CODESPLIT>public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ; // interceptors ActionInterceptor [ ] actionInterceptors = parseActionInterceptors ( actionClass , actionMethod , actionConfig ) ; // filters ActionFilter [ ] actionFilters = parseActionFilters ( actionClass , actionMethod , actionConfig ) ; // build action definition when not provided if ( actionDefinition == null ) { actionDefinition = parseActionDefinition ( actionClass , actionMethod ) ; } detectAndRegisterAlias ( annotationValues , actionDefinition ) ; final boolean async = parseMethodAsyncFlag ( actionMethod ) ; final boolean auth = parseMethodAuthFlag ( actionMethod ) ; final Class < ? extends ActionResult > actionResult = parseActionResult ( actionMethod ) ; final Class < ? extends ActionResult > defaultActionResult = actionConfig . getActionResult ( ) ; return createActionRuntime ( null , actionClass , actionMethod , actionResult , defaultActionResult , actionFilters , actionInterceptors , actionDefinition , async , auth ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/observers/BlockingMultiObserver.java<CODESPLIT>src/main/java/io/reactivex/internal/observers/BlockingMultiObserver.java<CODESPLIT>Block until the latch is counted down and return the error received or null if no error happened .<CODESPLIT>public Throwable blockingGetError ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ProcessorManager.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationLoader.java<CODESPLIT>Register the default processor to process command with no specific processor registered .<CODESPLIT>public GuiceApplicationBuilder builder ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/authentication/SpringSecurityAuthenticationSource.java<CODESPLIT>transport/client/play-ahc-ws/src/main/java/play/libs/ws/ahc/AhcWSClient.java<CODESPLIT>Get the principals of the logged in user in this case the distinguished name .<CODESPLIT>public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>Get the result of an Object path expression as a long .<CODESPLIT>public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Indicates if the request is elgible to be processed as the proxy receptor .<CODESPLIT>public DetailedCookieMatcher domain ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>retrofit/src/main/java/retrofit2/HttpServiceMethod.java<CODESPLIT>Parse the host ip of socket address .<CODESPLIT>static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = false ; boolean continuationBodyNullable = false ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) { // Unwrap the actual body type from Response<T>. responseType = Utils . getParameterUpperBound ( 0 , ( ParameterizedType ) responseType ) ; continuationWantsResponse = true ; } else { // TODO figure out if type is nullable or not // Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class) // Find the entry for method // Determine if return type is nullable or not } adapterType = new Utils . ParameterizedTypeImpl ( null , Call . class , responseType ) ; annotations = SkipCallbackExecutorImpl . ensurePresent ( annotations ) ; } else { adapterType = method . getGenericReturnType ( ) ; } CallAdapter < ResponseT , ReturnT > callAdapter = createCallAdapter ( retrofit , method , adapterType , annotations ) ; Type responseType = callAdapter . responseType ( ) ; if ( responseType == okhttp3 . Response . class ) { throw methodError ( method , "'" + getRawType ( responseType ) . getName ( ) + "' is not a valid response body type. Did you mean ResponseBody?" ) ; } if ( responseType == Response . class ) { throw methodError ( method , "Response must include generic type (e.g., Response<String>)" ) ; } // TODO support Unit for Kotlin? if ( requestFactory . httpMethod . equals ( "HEAD" ) && ! Void . class . equals ( responseType ) ) { throw methodError ( method , "HEAD method must use Void as response type." ) ; } Converter < ResponseBody , ResponseT > responseConverter = createResponseConverter ( retrofit , method , responseType ) ; okhttp3 . Call . Factory callFactory = retrofit . callFactory ; if ( ! isKotlinSuspendFunction ) { return new CallAdapted <> ( requestFactory , callFactory , responseConverter , callAdapter ) ; } else if ( continuationWantsResponse ) { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return ( HttpServiceMethod < ResponseT , ReturnT > ) new SuspendForResponse <> ( requestFactory , callFactory , responseConverter , ( CallAdapter < ResponseT , Call < ResponseT > > ) callAdapter ) ; } else { //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object. return ( HttpServiceMethod < ResponseT , ReturnT > ) new SuspendForBody <> ( requestFactory , callFactory , responseConverter , ( CallAdapter < ResponseT , Call < ResponseT > > ) callAdapter , continuationBodyNullable ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/Flowable.java<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .<CODESPLIT>public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Returns system property as a long .<CODESPLIT>public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { query . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>core/play/src/main/java/play/libs/reflect/MemberUtils.java<CODESPLIT>Returns system property . If key is not available returns the default value .<CODESPLIT>static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return false ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( true ) ; return true ; } catch ( final SecurityException e ) { // NOPMD // ignore in favor of subsequent IllegalAccessException } } return false ; }
1<CODESPLIT>src/main/java/org/java_websocket/WebSocketImpl.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>Method to decode the provided ByteBuffer<CODESPLIT>public ResultPath resolveResultPath ( String path , String value ) { boolean absolutePath = false ; if ( value != null ) { // [*] resolve alias in value value = resolveAlias ( value ) ; // [*] absolute paths if ( StringUtil . startsWithChar ( value , ' ' ) ) { absolutePath = true ; int dotNdx = value . indexOf ( ".." ) ; if ( dotNdx != - 1 ) { path = value . substring ( 0 , dotNdx ) ; value = value . substring ( dotNdx + 2 ) ; } else { path = value ; value = null ; } } else { // [*] resolve # in value and path int i = 0 ; while ( i < value . length ( ) ) { if ( value . charAt ( i ) != ' ' ) { break ; } int dotNdx = MadvocUtil . lastIndexOfSlashDot ( path ) ; if ( dotNdx != - 1 ) { // dot found path = path . substring ( 0 , dotNdx ) ; } i ++ ; } if ( i > 0 ) { // remove # from value value = value . substring ( i ) ; // [*] update path and value if ( StringUtil . startsWithChar ( value , ' ' ) ) { value = value . substring ( 1 ) ; } else { int dotNdx = value . indexOf ( ".." ) ; if ( dotNdx != - 1 ) { path += ' ' + value . substring ( 0 , dotNdx ) ; value = value . substring ( dotNdx + 2 ) ; } else { if ( value . length ( ) > 0 ) { if ( StringUtil . endsWithChar ( path , ' ' ) ) { path += value ; } else { path += ' ' + value ; } } value = null ; } } } } } if ( ! absolutePath ) { if ( resultPathPrefix != null ) { path = resultPathPrefix + path ; } } return new ResultPath ( path , value ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/intercept/aspectj/AspectJMethodSecurityInterceptor.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Method that is suitable for user with traditional AspectJ - code aspects .<CODESPLIT>public static String parseRemoteHostName ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
1<CODESPLIT>core/play/src/main/java/play/core/cookie/encoding/ServerCookieEncoder.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>Encodes the specified cookie into a Set - Cookie header value .<CODESPLIT>private static byte [ ] readStream ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/password/MessageDigestPasswordEncoder.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/advice/DelegateAdviceUtil.java<CODESPLIT>Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value<CODESPLIT>public static void injectTargetIntoProxy ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcRemoting.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/Form.java<CODESPLIT>Convert application request object to remoting request command .<CODESPLIT>public Form < T > fill ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Add a result handler<CODESPLIT>public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , true ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>core/src/main/java/org/springframework/security/access/expression/method/DefaultMethodSecurityExpressionHandler.java<CODESPLIT>Parse the remote host port of the channel .<CODESPLIT>protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/util/EncodingUtils.java<CODESPLIT>web/src/main/java/org/springframework/security/web/util/UrlUtils.java<CODESPLIT>Extract a sub array of bytes out of the byte array .<CODESPLIT>private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>web/src/main/java/org/springframework/security/web/csrf/LazyCsrfTokenRepository.java<CODESPLIT>Returns resolved alias result value or passed on if alias doesn t exist .<CODESPLIT>@ Override public CsrfToken generateToken ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>Translates a message .<CODESPLIT>protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/expression/SecurityExpressionRoot.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .<CODESPLIT>public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/config/switches/ProtocolSwitch.java<CODESPLIT>oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/NimbusJwtDecoder.java<CODESPLIT>from byte to bit set<CODESPLIT>@ Override public Jwt decode ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ConnectionEventListener.java<CODESPLIT>src/main/java/io/reactivex/processors/MulticastProcessor.java<CODESPLIT>Dispatch events .<CODESPLIT>public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/pathref/PathrefAdvice.java<CODESPLIT>Create a NTLM authentication scheme .<CODESPLIT>public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/result/RawData.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Defines download file name and mime type from the name extension .<CODESPLIT>public byte getByte ( String path ) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get ( path ) ; if ( value instanceof Byte ) { return ( Byte ) value ; } else if ( value instanceof Long ) { return ( ( Long ) value ) . byteValue ( ) ; } else if ( value instanceof Integer ) { return ( ( Integer ) value ) . byteValue ( ) ; } else { return ObjectConverter . convertObjectTo ( value , Byte . class ) ; } }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/BCrypt.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/ObjectMapperConfig.java<CODESPLIT>Hash a password using the OpenBSD bcrypt scheme .<CODESPLIT>public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , true ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/InternalContext.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/beans/BeanGenerator.java<CODESPLIT>Adds to the state without setting the dependency .<CODESPLIT>public void setSuperclass ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/QueueDrainHelper.java<CODESPLIT>jodd-joy/src/main/java/jodd/joy/JoyContextListener.java<CODESPLIT>Signals the completion of the main sequence and switches to post - completion replay mode .<CODESPLIT>private void configureServletContext ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , true , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , true , contextPath ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/CodeEmitter.java<CODESPLIT>extensions/jmx/src/com/google/inject/tools/jmx/Manager.java<CODESPLIT>Casts from one primitive numeric type to another<CODESPLIT>public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ; // Sleep forever. Thread . sleep ( Long . MAX_VALUE ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/CurrentSecurityContextArgumentResolver.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/AbstractAuthenticationTargetUrlRequestHandler.java<CODESPLIT>resolve the argument to inject into the controller parameter .<CODESPLIT>protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; } // Check for the parameter and use that if available String targetUrl = null ; if ( targetUrlParameter != null ) { targetUrl = request . getParameter ( targetUrlParameter ) ; if ( StringUtils . hasText ( targetUrl ) ) { logger . debug ( "Found targetUrlParameter in request: " + targetUrl ) ; return targetUrl ; } } if ( useReferer && ! StringUtils . hasLength ( targetUrl ) ) { targetUrl = request . getHeader ( "Referer" ) ; logger . debug ( "Using Referer header: " + targetUrl ) ; } if ( ! StringUtils . hasText ( targetUrl ) ) { targetUrl = defaultTargetUrl ; logger . debug ( "Using default Url: " + targetUrl ) ; } return targetUrl ; }
1<CODESPLIT>core/play/src/main/java/play/http/HttpEntity.java<CODESPLIT>web/src/main/java/org/springframework/security/web/server/util/matcher/ServerWebExchangeMatchers.java<CODESPLIT>Create an entity from the given content .<CODESPLIT>public static ServerWebExchangeMatcher anyExchange ( ) { // we don't use a lambda to ensure a unique equals and hashcode // which otherwise can cause problems with adding multiple entries to an ordered LinkedHashMap return new ServerWebExchangeMatcher ( ) { @ Override public Mono < MatchResult > matches ( ServerWebExchange exchange ) { return ServerWebExchangeMatcher . MatchResult . match ( ) ; } } ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Getter to return the socket used by this specific connection<CODESPLIT>void index ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
1<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilter.java<CODESPLIT>Returns the formatted message for an exception with the specified messages .<CODESPLIT>protected Authentication attemptExitUser ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException { // need to check to see if the current user has a SwitchUserGrantedAuthority Authentication current = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( null == current ) { throw new AuthenticationCredentialsNotFoundException ( this . messages . getMessage ( "SwitchUserFilter.noCurrentUser" , "No current user associated with this request" ) ) ; } // check to see if the current user did actual switch to another user // if so, get the original source user so we can switch back Authentication original = getSourceAuthentication ( current ) ; if ( original == null ) { this . logger . debug ( "Could not find original user Authentication object!" ) ; throw new AuthenticationCredentialsNotFoundException ( this . messages . getMessage ( "SwitchUserFilter.noOriginalAuthentication" , "Could not find original Authentication object" ) ) ; } // get the source user details UserDetails originalUser = null ; Object obj = original . getPrincipal ( ) ; if ( ( obj != null ) && obj instanceof UserDetails ) { originalUser = ( UserDetails ) obj ; } // publish event if ( this . eventPublisher != null ) { this . eventPublisher . publishEvent ( new AuthenticationSwitchUserEvent ( current , originalUser ) ) ; } return original ; }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>web/src/main/java/org/springframework/security/web/util/matcher/RegexRequestMatcher.java<CODESPLIT>Bind this binding key to another binding key .<CODESPLIT>private static HttpMethod valueOf ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/BeanData.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>Creates a new instance .<CODESPLIT>protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/Observable.java<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/authentication/DefaultServiceAuthenticationDetails.java<CODESPLIT>Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .<CODESPLIT>private String getQueryString ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; } // strip off the trailing & only if the artifact was the first query param return result . startsWith ( "&" ) ? result . substring ( 1 ) : result ; }
1<CODESPLIT>samples/xml/dms/src/main/java/sample/dms/DataSourcePopulator.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .<CODESPLIT>protected final UsefulException throwableToUsefulException ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>core/src/main/java/org/springframework/security/access/intercept/aspectj/AspectJMethodSecurityInterceptor.java<CODESPLIT>Initializes cipher in a simple way .<CODESPLIT>public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/ReflectUtils.java<CODESPLIT>core/src/com/google/inject/internal/RealOptionalBinder.java<CODESPLIT>used by MethodInterceptorGenerated generated code<CODESPLIT>private void addDirectTypeBinding ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/logout/SecurityContextLogoutHandler.java<CODESPLIT>Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .<CODESPLIT>public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( false ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
1<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/AclClassIdUtils.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .<CODESPLIT>public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/rememberme/PersistentTokenBasedRememberMeServices.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .<CODESPLIT>public HttpRequest cookies ( final Cookie ... cookies ) { if ( cookies . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = true ; for ( Cookie cookie : cookies ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = false ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
1<CODESPLIT>extensions/servlet/src/com/google/inject/servlet/ServletUtils.java<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>Normalizes a path by unescaping all safe percent encoded characters .<CODESPLIT>public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSpecificationImpl.java<CODESPLIT>core/play/src/main/java/play/core/Paths.java<CODESPLIT>Set session attributes .<CODESPLIT>public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Adds the servlet - api integration filter if required<CODESPLIT>public < T > String print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/util/UrlUtils.java<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>Obtains the web application - specific fragment of the URL .<CODESPLIT>static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Loads all method arguments before INVOKESTATIC call .<CODESPLIT>@ Override public CompletionStage < Result > onServerError ( RequestHeader request , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/ExceptionHelper.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcCommandFactory.java<CODESPLIT>Returns a flattened list of Throwables from tree - like CompositeException chain .<CODESPLIT>private RpcServerException createServerException ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/j2ee/J2eePreAuthenticatedProcessingFilter.java<CODESPLIT>Internal method extracted to avoid code duplication in AD search .<CODESPLIT>protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/MultiPartSpecBuilder.java<CODESPLIT>Collects all interceptors .<CODESPLIT>public MultiPartSpecBuilder header ( String name , String value ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ; // Replace previous header if exists final Set < String > headerNames = headers . keySet ( ) ; final String trimmedName = name . trim ( ) ; for ( String headerName : headerNames ) { if ( headerName . equalsIgnoreCase ( trimmedName ) ) { headers . remove ( headerName ) ; } } // Put the name header in the header list headers . put ( name , value ) ; return this ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>Returns all cookies from client that matches provided name .<CODESPLIT>public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .<CODESPLIT>public static String adviceMethodName ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .<CODESPLIT>public Binding < T > to ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java<CODESPLIT>Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .<CODESPLIT>public static void shutdown ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Controller.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcResponseResolver.java<CODESPLIT>Puts a new value into the current session .<CODESPLIT>private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>src/main/java/io/reactivex/internal/subscribers/SinglePostCompleteSubscriber.java<CODESPLIT>Get the result of an Object path expression as a long .<CODESPLIT>protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>src/main/java/io/reactivex/internal/subscribers/SinglePostCompleteSubscriber.java<CODESPLIT>Prepares the request buffer .<CODESPLIT>protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.java<CODESPLIT>src/main/java/org/java_websocket/AbstractWebSocket.java<CODESPLIT>Provided so that subclasses may configure what is put into the authentication request s details property .<CODESPLIT>protected void stopConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = false ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
1<CODESPLIT>src/main/java/io/reactivex/internal/subscriptions/SubscriptionArbiter.java<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>Atomically sets a new subscription .<CODESPLIT>public Binding < T > to ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Handler.java<CODESPLIT>Adds many query parameters at once . Although it accepts objects each value will be converted to string .<CODESPLIT>static int getExceptionTableLength ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Converts column name to property name .<CODESPLIT>protected CompletionStage < Result > onNotFound ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcClient.java<CODESPLIT>Specifies the URL to validate the credentials .<CODESPLIT>public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .<CODESPLIT>public T textMessage ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/processors/UnicastProcessor.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .<CODESPLIT>public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/print/ResponsePrinter.java<CODESPLIT>config/src/main/java/org/springframework/security/config/http/UserDetailsServiceFactoryBean.java<CODESPLIT>Prints the response to the print stream<CODESPLIT>private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
1<CODESPLIT>src/main/java/org/java_websocket/SocketChannelIOHelper.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>Returns whether the whole outQueue has been flushed<CODESPLIT>public static String getMethodDescriptor ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/WebApp.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Registers additional Madvoc components after the registration of default components .<CODESPLIT>int addMergedType ( final int typeTableIndex1 , final int typeTableIndex2 ) { // TODO sort the arguments? The merge result should be independent of their order. long data = typeTableIndex1 | ( ( ( long ) typeTableIndex2 ) << 32 ) ; int hashCode = hash ( Symbol . MERGED_TYPE_TAG , typeTableIndex1 + typeTableIndex2 ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . MERGED_TYPE_TAG && entry . hashCode == hashCode && entry . data == data ) { return entry . info ; } entry = entry . next ; } String type1 = typeTable [ typeTableIndex1 ] . value ; String type2 = typeTable [ typeTableIndex2 ] . value ; int commonSuperTypeIndex = addType ( classWriter . getCommonSuperClass ( type1 , type2 ) ) ; put ( new Entry ( typeCount , Symbol . MERGED_TYPE_TAG , data , hashCode ) ) . info = commonSuperTypeIndex ; return commonSuperTypeIndex ; }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>Qualify this binding key with the given instance of an annotation .<CODESPLIT>public XmlPathConfig declareNamespaces ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/search/FilterBasedLdapUserSearch.java<CODESPLIT>Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .<CODESPLIT>@ Override public DirContextOperations searchForUser ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; } // Search should never return multiple results if properly configured, so just // rethrow throw notFound ; } }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/tag/TagUtil.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Invokes tag body .<CODESPLIT>void putBootstrapMethods ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesImpl.java<CODESPLIT>Get a messages context appropriate for the given candidates .<CODESPLIT>public String at ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
1<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Returns profile property .<CODESPLIT>private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>Resolves result path .<CODESPLIT>public String resolveResultPathString ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
1<CODESPLIT>core/src/com/google/inject/spi/MembersInjectorLookup.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Sets the actual members injector .<CODESPLIT>public void registerPetiteProvider ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , arguments , true ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>src/main/java/com/alipay/remoting/ProcessorManager.java<CODESPLIT>Override the module loader with the given guiceable modules .<CODESPLIT>public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/EncoderConfig.java<CODESPLIT>Removes last CamelWord<CODESPLIT>public EncoderConfig defaultQueryParameterCharset ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , true ) ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Controller.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilter.java<CODESPLIT>Puts a new value into the current session .<CODESPLIT>public void setExitUserUrl ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/Form.java<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>Retrieve all global errors - errors without a key .<CODESPLIT>public static Message create ( String messageFormat , Object ... arguments ) { return create ( null , messageFormat , arguments ) ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Adds HTML message .<CODESPLIT>public T cc ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/scope/RequestScope.java<CODESPLIT>core/src/com/google/inject/internal/ConstructorBindingImpl.java<CODESPLIT>Inject request parameters .<CODESPLIT>InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/InterfaceMaker.java<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .<CODESPLIT>public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/EmitUtils.java<CODESPLIT>jodd-bean/src/main/java/jodd/bean/BeanUtilBean.java<CODESPLIT>If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .<CODESPLIT>@ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ; // try: setter if ( setter != null ) { invokeSetter ( setter , bp , value ) ; return ; } // try: put("property", value) if ( bp . isMap ( ) ) { ( ( Map ) bp . bean ) . put ( bp . name , value ) ; return ; } if ( isSilent ) { return ; } throw new BeanException ( "Simple property not found: " + bp . name , bp ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSpecificationImpl.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Set session attributes .<CODESPLIT>public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , true ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/InterfaceMaker.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .<CODESPLIT>public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>Defines exclude patterns .<CODESPLIT>public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>Expect that a response header matches the supplied name and value .<CODESPLIT>private void appendDescriptor ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/ExceptionHelper.java<CODESPLIT>core/src/com/google/inject/internal/Initializer.java<CODESPLIT>Workaround for Java 6 not supporting throwing a final Throwable from a catch block .<CODESPLIT>void validateOustandingInjections ( Errors errors ) { validationStarted = true ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/MapBasedAttributes2GrantedAuthoritiesMapper.java<CODESPLIT>src/main/java/org/java_websocket/client/WebSocketClient.java<CODESPLIT>Map the given array of attributes to Spring Security GrantedAuthorities .<CODESPLIT>public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
1<CODESPLIT>jodd-joy/src/main/java/jodd/joy/i18n/LocalizationUtil.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Saves Locale to HTTP session .<CODESPLIT>public HttpRequest cookies ( final Cookie ... cookies ) { if ( cookies . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = true ; for ( Cookie cookie : cookies ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = false ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
1<CODESPLIT>core/src/com/google/inject/internal/Initializables.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>Returns an initializable for an instance that requires no initialization .<CODESPLIT>public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , true ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Execute a read operation<CODESPLIT>public < T > String print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
1<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>jodd-bean/src/main/java/jodd/introspector/Ctors.java<CODESPLIT>Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .<CODESPLIT>public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
1<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/AddDeleteContactController.java<CODESPLIT>core/src/com/google/inject/internal/InjectorShell.java<CODESPLIT>Handles the submission of the contact form creating a new instance if the username and email are valid .<CODESPLIT>private static void bindLogger ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>jodd-db/src/main/java/jodd/db/jtx/JtxDbUtil.java<CODESPLIT>Iterates all beans that are of given type .<CODESPLIT>public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/protocol/RpcRequestProcessor.java<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java<CODESPLIT>dispatch request command to user processor<CODESPLIT>public T newInstance ( Object [ ] args ) throws Throwable { constructor . setAccessible ( true ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/proxetta/ProxettaAwarePetiteContainer.java<CODESPLIT>Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size<CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
1<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/ContactManagerBackend.java<CODESPLIT>jodd-joy/src/main/java/jodd/joy/madvoc/AppAction.java<CODESPLIT>This is a public method .<CODESPLIT>protected void addViolation ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>core/src/main/java/org/springframework/security/core/parameters/AnnotationParameterNameDiscoverer.java<CODESPLIT>Extracts zip file content to the target directory .<CODESPLIT>private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = false ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = true ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
1<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationEntryPoint.java<CODESPLIT>Returns true if the given annotation is retained at runtime .<CODESPLIT>protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , false ) ; }
1<CODESPLIT>src/main/java/io/reactivex/processors/MulticastProcessor.java<CODESPLIT>config/src/main/java/org/springframework/security/config/http/DefaultFilterChainValidator.java<CODESPLIT>Tries to offer an item into the internal queue and returns false if the queue is full .<CODESPLIT>private void checkFilterStack ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/password/MessageDigestPasswordEncoder.java<CODESPLIT>Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size<CODESPLIT>public String encode ( CharSequence rawPassword ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebSecurityConfigurerAdapter.java<CODESPLIT>core/src/com/google/inject/internal/InterceptorStackCallback.java<CODESPLIT>Creates the shared objects<CODESPLIT>private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/Enhancer.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/MockMvcParamConfig.java<CODESPLIT>Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .<CODESPLIT>public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , true ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Iterates all beans that are of given type .<CODESPLIT>private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>Appends REPLY - TO addresses .<CODESPLIT>public static Message create ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/AssistedConstructor.java<CODESPLIT>core/src/com/google/inject/internal/RealMultibinder.java<CODESPLIT>Returns an instance of T constructed using this constructor with the supplied arguments .<CODESPLIT>public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>openid/src/main/java/org/springframework/security/openid/OpenIDAuthenticationFilter.java<CODESPLIT>Check if the requested protocol is part of this draft<CODESPLIT>private String utf8UrlEncode ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
1<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>src/main/java/com/alipay/remoting/ScheduledDisconnectStrategy.java<CODESPLIT>Convert the given exception to an exception that Play can report more information about .<CODESPLIT>@ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
1<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>core/play/src/main/java/play/core/Paths.java<CODESPLIT>Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .<CODESPLIT>public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/FilterChainProxy.java<CODESPLIT>src/main/java/org/java_websocket/framing/CloseFrame.java<CODESPLIT>Convenience method mainly for testing .<CODESPLIT>private void validateUtf8 ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/EmailUtil.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/DefaultSpringSecurityContextSource.java<CODESPLIT>Check whether flags is a empty flags<CODESPLIT>private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/AdminPermissionController.java<CODESPLIT>Reads class or method annotation for action interceptors .<CODESPLIT>@ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>Complete the target with an error signal .<CODESPLIT>protected void collectActionFilters ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Bind this binding key to the given provider instance .<CODESPLIT>public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
1<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>Returns profile property .<CODESPLIT>public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>Matching logic for constructors annotated with AssistedInject . This returns true if and only if all<CODESPLIT>public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>openid/src/main/java/org/springframework/security/openid/OpenIDAuthenticationFilter.java<CODESPLIT>Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>private String utf8UrlEncode ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
1<CODESPLIT>src/main/java/com/alipay/remoting/ReconnectManager.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>stop reconnect thread<CODESPLIT>public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/CustomSerializerManager.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>Get the custom serializer for command code .<CODESPLIT>public static int getArgumentsAndReturnSizes ( final String methodDescriptor ) { int argumentsSize = 1 ; // Skip the first character, which is always a '('. int currentOffset = 1 ; int currentChar = methodDescriptor . charAt ( currentOffset ) ; // Parse the argument types and compute their size, one at a each loop iteration. while ( currentChar != ' ' ) { if ( currentChar == ' ' || currentChar == ' ' ) { currentOffset ++ ; argumentsSize += 2 ; } else { while ( methodDescriptor . charAt ( currentOffset ) == ' ' ) { currentOffset ++ ; } if ( methodDescriptor . charAt ( currentOffset ++ ) == ' ' ) { // Skip the argument descriptor content. currentOffset = methodDescriptor . indexOf ( ' ' , currentOffset ) + 1 ; } argumentsSize += 1 ; } currentChar = methodDescriptor . charAt ( currentOffset ) ; } currentChar = methodDescriptor . charAt ( currentOffset + 1 ) ; if ( currentChar == ' ' ) { return argumentsSize << 2 ; } else { int returnSize = ( currentChar == ' ' || currentChar == ' ' ) ? 2 : 1 ; return argumentsSize << 2 | returnSize ; } }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>Process the frame if it is not the last frame<CODESPLIT>private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) { // Read the attribute_info's attribute_name and attribute_length fields. String attributeName = readUTF8 ( currentAttributeOffset , charBuffer ) ; int attributeLength = readInt ( currentAttributeOffset + 2 ) ; currentAttributeOffset += 6 ; if ( Constants . BOOTSTRAP_METHODS . equals ( attributeName ) ) { // Read the num_bootstrap_methods field and create an array of this size. currentBootstrapMethodOffsets = new int [ readUnsignedShort ( currentAttributeOffset ) ] ; // Compute and store the offset of each 'bootstrap_methods' array field entry. int currentBootstrapMethodOffset = currentAttributeOffset + 2 ; for ( int j = 0 ; j < currentBootstrapMethodOffsets . length ; ++ j ) { currentBootstrapMethodOffsets [ j ] = currentBootstrapMethodOffset ; // Skip the bootstrap_method_ref and num_bootstrap_arguments fields (2 bytes each), // as well as the bootstrap_arguments array field (of size num_bootstrap_arguments * 2). currentBootstrapMethodOffset += 4 + readUnsignedShort ( currentBootstrapMethodOffset + 2 ) * 2 ; } return currentBootstrapMethodOffsets ; } currentAttributeOffset += attributeLength ; } return null ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/jackson2/SecurityJackson2Modules.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/WebApp.java<CODESPLIT>Creates a TypeResolverBuilder that performs whitelisting .<CODESPLIT>protected void registerMadvocComponents ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/intercept/aspectj/AspectJMethodSecurityInterceptor.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/LogConfig.java<CODESPLIT>Method that is suitable for user with traditional AspectJ - code aspects .<CODESPLIT>public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , true , logDetailIfValidationFails , urlEncodeRequestUri , true ) ; }
1<CODESPLIT>core/src/com/google/inject/spi/InjectionPoint.java<CODESPLIT>src/main/java/io/reactivex/Flowable.java<CODESPLIT>Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .<CODESPLIT>@ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , true ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>openid/src/main/java/org/springframework/security/openid/RegexBasedAxFetchListFactory.java<CODESPLIT>Copies all request parameters to attributes .<CODESPLIT>public List < OpenIDAttribute > createAttributeList ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>jodd-bean/src/main/java/jodd/bean/BeanCopy.java<CODESPLIT>Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .<CODESPLIT>public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( true ) ; visit ( ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/Path.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/SimpleUrlAuthenticationSuccessHandler.java<CODESPLIT>Push element to the path .<CODESPLIT>protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession session = request . getSession ( false ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/InjectorShell.java<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .<CODESPLIT>public void putProfileProperty ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/TypeData.java<CODESPLIT>Converts segment of byte array into long array .<CODESPLIT>public String resolveJsonName ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/MethodProxy.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>Invoke the original method on a different object of the same type .<CODESPLIT>private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/DynamicForm.java<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>Fills the form with existing data .<CODESPLIT>public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; return scheme ; }
1<CODESPLIT>src/main/java/org/java_websocket/framing/CloseFrame.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Validate the payload to valid utf8<CODESPLIT>private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = false ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) { // only check if we haven't looked at this key yet BindingImpl depBinding = jitBindings . get ( depKey ) ; if ( depBinding != null ) { // if the binding still exists, validate boolean failed = cleanup ( depBinding , encountered ) ; // if children fail, we fail if ( depBinding instanceof ConstructorBindingImpl ) { ConstructorBindingImpl ctorBinding = ( ConstructorBindingImpl ) depBinding ; ip = ctorBinding . getInternalConstructor ( ) ; if ( ! ctorBinding . isInitialized ( ) ) { failed = true ; } } if ( failed ) { removeFailedJitBinding ( depBinding , ip ) ; bindingFailed = true ; } } else if ( state . getExplicitBinding ( depKey ) == null ) { // ignore keys if they were explicitly bound, but if neither JIT // nor explicit, it's also invalid & should let parent know. bindingFailed = true ; } } } return bindingFailed ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>Specifies the search path . Throws an exception if URL is invalid .<CODESPLIT>public String resolveMacros ( String value , final String ... profiles ) { // create string template parser that will be used internally StringTemplateParser stringTemplateParser = new StringTemplateParser ( ) ; stringTemplateParser . setResolveEscapes ( false ) ; if ( ! ignoreMissingMacros ) { stringTemplateParser . setReplaceMissingKey ( false ) ; } else { stringTemplateParser . setReplaceMissingKey ( true ) ; stringTemplateParser . setMissingKeyReplacement ( StringPool . EMPTY ) ; } final Function < String , String > macroResolver = macroName -> { String [ ] lookupProfiles = profiles ; int leftIndex = macroName . indexOf ( ' ' ) ; if ( leftIndex != - 1 ) { int rightIndex = macroName . indexOf ( ' ' ) ; String profiles1 = macroName . substring ( leftIndex + 1 , rightIndex ) ; macroName = macroName . substring ( 0 , leftIndex ) . concat ( macroName . substring ( rightIndex + 1 ) ) ; lookupProfiles = StringUtil . splitc ( profiles1 , ' ' ) ; StringUtil . trimAll ( lookupProfiles ) ; } return lookupValue ( macroName , lookupProfiles ) ; } ; // start parsing int loopCount = 0 ; while ( loopCount ++ < MAX_INNER_MACROS ) { final String newValue = stringTemplateParser . parse ( value , macroResolver ) ; if ( newValue . equals ( value ) ) { break ; } if ( skipEmptyProps ) { if ( newValue . length ( ) == 0 ) { return null ; } } value = newValue ; } return value ; }
1<CODESPLIT>core/src/com/google/inject/internal/ConstructorInjector.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Provisions a new T .<CODESPLIT>protected CompletionStage < Result > onForbidden ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Finds type data of first annotated superclass or interface .<CODESPLIT>private void addConstantLongOrDouble ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/type/SqlType.java<CODESPLIT>src/main/java/com/alipay/remoting/util/FutureTaskUtil.java<CODESPLIT>Stores value in database . Value is casted to sql type .<CODESPLIT>public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
1<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/JdbcMutableAclService.java<CODESPLIT>src/main/java/org/java_websocket/AbstractWebSocket.java<CODESPLIT>Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .<CODESPLIT>private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAApi.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Run a block of code with a newly created EntityManager for the default Persistence Unit .<CODESPLIT>public double getDouble ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java<CODESPLIT>Bind this binding key to the given provider instance .<CODESPLIT>public ResponseSpecBuilder expectHeader ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
1<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>core/src/main/java/org/springframework/security/core/SpringSecurityCoreVersion.java<CODESPLIT>Creates a new Message with the given cause .<CODESPLIT>private static boolean disableChecks ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return true ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
1<CODESPLIT>src/jmh/java/io/reactivex/PerfAsyncConsumer.java<CODESPLIT>core/play/src/main/java/play/mvc/Results.java<CODESPLIT>Wait for the terminal signal .<CODESPLIT>public static Result status ( int status , JsonNode content , JsonEncoding encoding ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , encoding ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Maybe.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java<CODESPLIT>Retries at most times or until the predicate returns false whichever happens first .<CODESPLIT>public ResponseSpecBuilder expectHeader ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .<CODESPLIT>protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/QueueDrainHelper.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Signals the completion of the main sequence and switches to post - completion replay mode .<CODESPLIT>public T to ( final String personalName , final String to ) { return to ( new EmailAddress ( personalName , to ) ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/util/EncodingUtils.java<CODESPLIT>Locates last dot after the last slash or just slash .<CODESPLIT>public static byte [ ] subArray ( byte [ ] array , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
1<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/Http403ForbiddenEntryPoint.java<CODESPLIT>Convert the given exception to an exception that Play can report more information about .<CODESPLIT>public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionMonitor.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Start schedule task<CODESPLIT>public Long getLong ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/util/NettyEventLoopUtil.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .<CODESPLIT>public T to ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
1<CODESPLIT>taglibs/src/main/java/org/springframework/security/taglibs/authz/AbstractAuthorizeTag.java<CODESPLIT>jodd-joy/src/main/java/jodd/joy/JoyContextListener.java<CODESPLIT>Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .<CODESPLIT>private void configureServletContext ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , true , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , true , contextPath ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/CodeEmitter.java<CODESPLIT>openid/src/main/java/org/springframework/security/openid/OpenIDAuthenticationFilter.java<CODESPLIT>Casts from one primitive numeric type to another<CODESPLIT>private String utf8UrlEncode ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>Set the session config .<CODESPLIT>private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return false ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>Finally builds proxy methods if applied to current method .<CODESPLIT>public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpMultiMap.java<CODESPLIT>Registers property injection point .<CODESPLIT>public HttpMultiMap < V > clear ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/config/ObjectMapperConfig.java<CODESPLIT>oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/web/server/DefaultServerOAuth2AuthorizationRequestResolver.java<CODESPLIT>Specify a custom JAXB object mapper factory .<CODESPLIT>private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
1<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAConfig.java<CODESPLIT>Declares a namespace .<CODESPLIT>public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
1<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/ContactManagerBackend.java<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/BasicLookupStrategy.java<CODESPLIT>This is a public method .<CODESPLIT>private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ; // Lookup the parents, now that our JdbcTemplate has released the database // connection (SEC-547) if ( parentsToLookup . size ( ) > 0 ) { lookupPrimaryKeys ( acls , parentsToLookup , sids ) ; } }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>core/src/com/google/inject/internal/MembersInjectorStore.java<CODESPLIT>Setup the selector thread as well as basic server settings<CODESPLIT>@ SuppressWarnings ( "unchecked" ) // the MembersInjector type always agrees with the passed type public < T > MembersInjectorImpl < T > get ( TypeLiteral < T > key , Errors errors ) throws ErrorsException { return ( MembersInjectorImpl < T > ) cache . get ( key , errors ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Reads class or method annotation for action interceptors .<CODESPLIT>public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/WebApp.java<CODESPLIT>Gets the port number that this server listens on .<CODESPLIT>public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>web/src/main/java/org/springframework/security/web/header/writers/frameoptions/XFrameOptionsHeaderWriter.java<CODESPLIT>Appends TO address .<CODESPLIT>public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size<CODESPLIT>public final Self disable ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>Creates a ScheduledExecutorService with the given factory .<CODESPLIT>public ResultPath resolveResultPath ( String path , String value ) { boolean absolutePath = false ; if ( value != null ) { // [*] resolve alias in value value = resolveAlias ( value ) ; // [*] absolute paths if ( StringUtil . startsWithChar ( value , ' ' ) ) { absolutePath = true ; int dotNdx = value . indexOf ( ".." ) ; if ( dotNdx != - 1 ) { path = value . substring ( 0 , dotNdx ) ; value = value . substring ( dotNdx + 2 ) ; } else { path = value ; value = null ; } } else { // [*] resolve # in value and path int i = 0 ; while ( i < value . length ( ) ) { if ( value . charAt ( i ) != ' ' ) { break ; } int dotNdx = MadvocUtil . lastIndexOfSlashDot ( path ) ; if ( dotNdx != - 1 ) { // dot found path = path . substring ( 0 , dotNdx ) ; } i ++ ; } if ( i > 0 ) { // remove # from value value = value . substring ( i ) ; // [*] update path and value if ( StringUtil . startsWithChar ( value , ' ' ) ) { value = value . substring ( 1 ) ; } else { int dotNdx = value . indexOf ( ".." ) ; if ( dotNdx != - 1 ) { path += ' ' + value . substring ( 0 , dotNdx ) ; value = value . substring ( dotNdx + 2 ) ; } else { if ( value . length ( ) > 0 ) { if ( StringUtil . endsWithChar ( path , ' ' ) ) { path += value ; } else { path += ' ' + value ; } } value = null ; } } } } } if ( ! absolutePath ) { if ( resultPathPrefix != null ) { path = resultPathPrefix + path ; } } return new ResultPath ( path , value ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/savedrequest/FastHttpDateFormat.java<CODESPLIT>core/play/src/main/java/play/libs/Json.java<CODESPLIT>Gets the current date in HTTP format .<CODESPLIT>public static < A > A fromJson ( JsonNode json , Class < A > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/websphere/DefaultWASUsernameAndGroupsExtractor.java<CODESPLIT>Stores one argument . Index is 1 - based . No conversion occurs .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String securityName ) { Context ic = null ; try { // TODO: Cache UserRegistry object ic = new InitialContext ( ) ; Object objRef = ic . lookup ( USER_REGISTRY ) ; Object userReg = invokeMethod ( getNarrowMethod ( ) , null , objRef , Class . forName ( "com.ibm.websphere.security.UserRegistry" ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining WebSphere groups for user " + securityName + " using WebSphere UserRegistry " + userReg ) ; } final Collection groups = ( Collection ) invokeMethod ( getGroupsForUserMethod ( ) , userReg , new Object [ ] { securityName } ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Groups for user " + securityName + ": " + groups . toString ( ) ) ; } return new ArrayList ( groups ) ; } catch ( Exception e ) { logger . error ( "Exception occured while looking up groups for user" , e ) ; throw new RuntimeException ( "Exception occured while looking up groups for user" , e ) ; } finally { try { if ( ic != null ) { ic . close ( ) ; } } catch ( NamingException e ) { logger . debug ( "Exception occured while closing context" , e ) ; } } }
1<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>taglibs/src/main/java/org/springframework/security/taglibs/authz/JspAuthorizeTag.java<CODESPLIT>do create connections<CODESPLIT>public int doEndTag ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>Returns system property as an int .<CODESPLIT>public List < File > findAll ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsMapper.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Extension point to allow customized creation of the user s password from the attribute stored in the directory .<CODESPLIT>private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = false ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) { // only check if we haven't looked at this key yet BindingImpl depBinding = jitBindings . get ( depKey ) ; if ( depBinding != null ) { // if the binding still exists, validate boolean failed = cleanup ( depBinding , encountered ) ; // if children fail, we fail if ( depBinding instanceof ConstructorBindingImpl ) { ConstructorBindingImpl ctorBinding = ( ConstructorBindingImpl ) depBinding ; ip = ctorBinding . getInternalConstructor ( ) ; if ( ! ctorBinding . isInitialized ( ) ) { failed = true ; } } if ( failed ) { removeFailedJitBinding ( depBinding , ip ) ; bindingFailed = true ; } } else if ( state . getExplicitBinding ( depKey ) == null ) { // ignore keys if they were explicitly bound, but if neither JIT // nor explicit, it's also invalid & should let parent know. bindingFailed = true ; } } } return bindingFailed ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/DbMetaUtil.java<CODESPLIT>jodd-bean/src/main/java/jodd/introspector/Ctors.java<CODESPLIT>Resolves schema name from a type . Uses default schema name if not specified .<CODESPLIT>public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/search/FilterBasedLdapUserSearch.java<CODESPLIT>src/main/java/com/alipay/remoting/ReconnectManager.java<CODESPLIT>Return the LdapUserDetails containing the user s information<CODESPLIT>public void addReconnectTask ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>Builds a HEAD request .<CODESPLIT>public T setTarget ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/authentication/DefaultServiceAuthenticationDetails.java<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .<CODESPLIT>public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Returns the binary name of the class corresponding to this type . This method must not be used on method types .<CODESPLIT>public byte getByte ( String path ) { //The type returned from Groovy depends on the input, so we need to handle different numerical types. Object value = get ( path ) ; if ( value instanceof Byte ) { return ( Byte ) value ; } else if ( value instanceof Long ) { return ( ( Long ) value ) . byteValue ( ) ; } else if ( value instanceof Integer ) { return ( ( Integer ) value ) . byteValue ( ) ; } else { return ObjectConverter . convertObjectTo ( value , Byte . class ) ; } }
1<CODESPLIT>core/src/com/google/inject/internal/InjectorShell.java<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .<CODESPLIT>public void putBaseProperty ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/SpringSecurityCoreVersion.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcServer.java<CODESPLIT>Perform version checks with specific min Spring Version<CODESPLIT>private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>samples/xml/dms/src/main/java/sample/dms/DocumentDaoImpl.java<CODESPLIT>Loads all method arguments before INVOKESTATIC call .<CODESPLIT>private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) { // Need to go and lookup the parent, so do that first parentDirectory = getDirectoryWithImmediateParentPopulated ( parentDirectoryId ) ; } Directory directory = new Directory ( rs . getString ( "directory_name" ) , parentDirectory ) ; FieldUtils . setProtectedFieldValue ( "id" , directory , new Long ( rs . getLong ( "id" ) ) ) ; return directory ; } } ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Loads all method arguments before INVOKESPECIAL call .<CODESPLIT>private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } //Check if the whole payload is valid utf8, when the opcode indicates a text if ( curop == Opcode . TEXT && ! Charsetfunctions . isValidUTF8 ( frame . getPayloadData ( ) ) ) { log . error ( "Protocol error: Payload is not UTF8" ) ; throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } //Checking if the current continuous frame contains a correct payload with the other frames combined if ( curop == Opcode . CONTINUOUS && currentContinuousFrame != null ) { addToBufferList ( frame . getPayloadData ( ) ) ; } }
1<CODESPLIT>core/src/main/java/org/springframework/security/authentication/ProviderManager.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .<CODESPLIT>public String resolveRealName ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/WebSocketImpl.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Send Text data to the other end .<CODESPLIT>public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/plugins/RxJavaPlugins.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Removes all handlers and resets to default behavior .<CODESPLIT>public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java<CODESPLIT>config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java<CODESPLIT>Updates the email flags on the server .<CODESPLIT>@ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/LogConfig.java<CODESPLIT>Returns an identity function that simply returns its argument .<CODESPLIT>public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , true , logDetailIfValidationFails , urlEncodeRequestUri , true ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAApi.java<CODESPLIT>Wraps arguments passed into a list if necessary .<CODESPLIT>public void withTransaction ( Consumer < EntityManager > block ) { withTransaction ( em -> { block . accept ( em ) ; return null ; } ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/Url.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/CsrfShield.java<CODESPLIT>Get property value according to property key<CODESPLIT>@ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/encrypt/Encryptors.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .<CODESPLIT>public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
1<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>src/main/java/io/reactivex/Completable.java<CODESPLIT>Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .<CODESPLIT>private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
1<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>src/main/java/io/reactivex/internal/util/AppendOnlyLinkedArrayList.java<CODESPLIT>Cleans up any state that may have been cached when constructing the JIT binding .<CODESPLIT>public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return true ; } } a = ( Object [ ] ) a [ c ] ; } return false ; }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/JPAEntityManagerContext.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .<CODESPLIT>protected Set < T > getAll ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>web/src/main/java/org/springframework/security/web/util/UrlUtils.java<CODESPLIT>Returns just host url without path and query .<CODESPLIT>private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
1<CODESPLIT>jodd-joy/src/main/java/jodd/joy/madvoc/AppAction.java<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>Creates alias .<CODESPLIT>public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/type/SqlType.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Stores value in database . Value is casted to sql type .<CODESPLIT>private HandshakeState containsRequestedProtocol ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpMultiMap.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Returns all values associated with the name .<CODESPLIT>public static String parseRemoteHostName ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
1<CODESPLIT>src/main/java/org/java_websocket/AbstractWebSocket.java<CODESPLIT>web/src/main/java/org/springframework/security/web/util/UrlUtils.java<CODESPLIT>Start the connection lost timer<CODESPLIT>public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return false ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/AbstractConfiguredSecurityBuilder.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Gets a shared Object . Note that object heirarchies are not considered .<CODESPLIT>protected final UsefulException throwableToUsefulException ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
1<CODESPLIT>core/play/src/main/java/play/libs/streams/AkkaStreams.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>Bypass the given flow using the given splitter function .<CODESPLIT>public List < File > findAll ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
1<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>Invoked when a client makes a request that was forbidden .<CODESPLIT>public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>Add the given parameters to an already configured number of parameters .<CODESPLIT>public static < T , U > Function < T , U > castFunction ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/authentication/PreemptiveAuthProvider.java<CODESPLIT>src/main/java/com/alipay/remoting/CustomSerializerManager.java<CODESPLIT>Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .<CODESPLIT>public static CustomSerializer getCustomSerializer ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
1<CODESPLIT>src/main/java/io/reactivex/Flowable.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .<CODESPLIT>public String resolveJsonName ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
1<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>src/main/java/com/alipay/remoting/util/NettyEventLoopUtil.java<CODESPLIT>Extracts props to target map . This is all - in - one method that does many things at once .<CODESPLIT>public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
1<CODESPLIT>oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/NimbusJwtDecoder.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/openid/OpenIDLoginConfigurer.java<CODESPLIT>Decode and validate the JWT from its compact claims representation format<CODESPLIT>public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>Process the frame if it is the last frame<CODESPLIT>public MockMvcRequestSpecBuilder addMultiPart ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>rest-assured/src/main/java/io/restassured/authentication/PreemptiveAuthProvider.java<CODESPLIT>Calculates all dependencies required by the implementation and constructor .<CODESPLIT>public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/ldap/LdapServerBeanDefinitionParser.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Will be called if no url attribute is supplied .<CODESPLIT>public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig objectMapperConfig ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>jodd-core/src/main/java/jodd/util/Base64.java<CODESPLIT>Translates a message .<CODESPLIT>public static byte [ ] decode ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
1<CODESPLIT>src/main/java/io/reactivex/Completable.java<CODESPLIT>config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java<CODESPLIT>Creates a NullPointerException instance and sets the given Throwable as its initial cause .<CODESPLIT>private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
1<CODESPLIT>retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java<CODESPLIT>src/main/java/io/reactivex/internal/functions/ObjectHelper.java<CODESPLIT>The HTTP error to be used when an error is triggered .<CODESPLIT>public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
1<CODESPLIT>core/src/com/google/inject/internal/Initializer.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Registers an instance for member injection when that step is performed .<CODESPLIT>public T header ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/MurmurHash3.java<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>Gets a long from a byte buffer in little endian byte order .<CODESPLIT>private void demix ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ; // NOTE performance: darn, creation on stack! // right shift x [ 1 ] = ( y [ 1 ] << ( Long . SIZE - rotr ) ) | ( y [ 1 ] >>> rotr ) ; x [ 0 ] = y [ 0 ] - x [ 1 ] ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Scans single classpath directory .<CODESPLIT>private void addConstantUtf8Reference ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/type/SqlType.java<CODESPLIT>src/main/java/io/reactivex/processors/MulticastProcessor.java<CODESPLIT>Once when value is read from result set prepare it to match destination type .<CODESPLIT>public boolean offer ( T t ) { if ( once . get ( ) ) { return false ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return true ; } } return false ; }
1<CODESPLIT>openid/src/main/java/org/springframework/security/openid/OpenIDAuthenticationFilter.java<CODESPLIT>src/main/java/org/java_websocket/framing/CloseFrame.java<CODESPLIT>Performs URL encoding with UTF - 8<CODESPLIT>private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/framing/CloseFrame.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Update the payload to represent the close code and the reason<CODESPLIT>private void processFrameIsFin ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/ExceptionHelper.java<CODESPLIT>transport/client/play-ahc-ws/src/main/java/play/libs/ws/ahc/AhcWSClient.java<CODESPLIT>If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .<CODESPLIT>public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>src/main/java/com/alipay/remoting/Connection.java<CODESPLIT>Reads the target and creates destination class .<CODESPLIT>public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
1<CODESPLIT>core/play-java/src/main/java/play/libs/Comet.java<CODESPLIT>core/play/src/main/java/play/mvc/Call.java<CODESPLIT>Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .<CODESPLIT>public String absoluteURL ( Http . Request request ) { return absoluteURL ( request . secure ( ) , request . host ( ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>Builds advice field name .<CODESPLIT>public Object newInstance ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/parameters/AnnotationParameterNameDiscoverer.java<CODESPLIT>web/src/main/java/org/springframework/security/web/util/ThrowableAnalyzer.java<CODESPLIT>Gets the parameter names or null if not found .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/CodeEmitter.java<CODESPLIT>Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/ObjectHelper.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Verifies if the object is not null and returns it or throws a NullPointerException with the given message .<CODESPLIT>public Integer getInteger ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
1<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/AclClassIdUtils.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .<CODESPLIT>public Object lookupObject ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>Returns the value with the specified key as an object .<CODESPLIT>public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Locates last index of dot after the optional last slash .<CODESPLIT>private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/config/JsonPathConfig.java<CODESPLIT>Obtains the configuration attributes explicitly defined against this bean .<CODESPLIT>public JsonPathConfig numberReturnType ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
1<CODESPLIT>core/play/src/main/java/play/libs/F.java<CODESPLIT>src/main/java/com/alipay/remoting/BaseRemoting.java<CODESPLIT>Constructs a tuple of A B<CODESPLIT>protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Collects all action results .<CODESPLIT>public GuiceApplicationBuilder load ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>jodd-core/src/main/java/jodd/io/upload/MultipartRequestInputStream.java<CODESPLIT>Encrypts a block .<CODESPLIT>public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( true ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
1<CODESPLIT>src/main/java/org/java_websocket/client/WebSocketClient.java<CODESPLIT>core/src/com/google/inject/internal/InjectorShell.java<CODESPLIT>Initiates the websocket connection . This method does not block .<CODESPLIT>private static void bindLogger ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/websphere/DefaultWASUsernameAndGroupsExtractor.java<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/JPAEntityManagerContext.java<CODESPLIT>Get the WebSphere group names for the given security name .<CODESPLIT>public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( true ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/encrypt/Encryptors.java<CODESPLIT>Collects all action results .<CODESPLIT>public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAConfig.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java<CODESPLIT>Create a default JPA configuration from a map of names to unit names .<CODESPLIT>protected final void updateAuthenticationDefaults ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>Returns the float value with the specified key .<CODESPLIT>public final void error ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java<CODESPLIT>Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .<CODESPLIT>public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/MockMvcParamConfig.java<CODESPLIT>Execute a read operation<CODESPLIT>public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , true ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Initializables.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>Returns an initializable for an instance that requires no initialization .<CODESPLIT>public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/config/EncoderConfig.java<CODESPLIT>core/src/com/google/inject/internal/MembersInjectorStore.java<CODESPLIT>Specify the default charset for query parameters<CODESPLIT>ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) { // ignored for now } } return ImmutableList . copyOf ( injectors ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>Returns a function that cast the incoming values via a Class object .<CODESPLIT>public final void error ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>core/src/com/google/inject/internal/Scoping.java<CODESPLIT>Lists zip content .<CODESPLIT>static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ; // NOTE: SingletonScope relies on the fact that we are passing a // ProviderToInternalFactoryAdapter here.  If you change the type make sure to update // SingletonScope as well. Provider < T > scoped = scope . scope ( key , new ProviderToInternalFactoryAdapter < T > ( injector , creator ) ) ; return new InternalFactoryToProviderAdapter < T > ( scoped , source ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>core/play/src/main/java/play/libs/Json.java<CODESPLIT>Reads HTTP request body using the request stream . Once body is read it cannot be read again!<CODESPLIT>public static JsonNode parse ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/tag/TagUtil.java<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/AdminPermissionController.java<CODESPLIT>Renders tag body to string .<CODESPLIT>@ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Controller.java<CODESPLIT>rest-assured/src/main/java/io/restassured/specification/ProxySpecification.java<CODESPLIT>Generates a 501 NOT_IMPLEMENTED simple result .<CODESPLIT>public ProxySpecification withHost ( String host ) { return new ProxySpecification ( host , port , scheme , username , password ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .<CODESPLIT>public static < T > Callable < T > justCallable ( T value ) { return new JustValue < Object , T > ( value ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>src/main/java/com/alipay/remoting/util/TraceLogUtil.java<CODESPLIT>Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .<CODESPLIT>public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/wrapper/Buffer.java<CODESPLIT>Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .<CODESPLIT>public ServletOutputStream getOutputStream ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
1<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/websphere/DefaultWASUsernameAndGroupsExtractor.java<CODESPLIT>Formats an object in a user friendly way .<CODESPLIT>private static String getSecurityName ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) { // SEC-803 Object credential = subject . getPublicCredentials ( getWSCredentialClass ( ) ) . iterator ( ) . next ( ) ; if ( credential != null ) { userSecurityName = ( String ) invokeMethod ( getSecurityNameMethod ( ) , credential ) ; } } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Websphere security name is " + userSecurityName + " for subject " + subject ) ; } return userSecurityName ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Expect that a response header matches the supplied name and value .<CODESPLIT>public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Returns the size of values of this type . This method must not be used for method types .<CODESPLIT>public static HttpRequest post ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>Verifies whether value of cookie satisfies specified matcher .<CODESPLIT>public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/jtx/JtxDbUtil.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>Converter JTX transaction mode to DB transaction mode .<CODESPLIT>public static void newArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>jodd-http/src/main/java/jodd/http/Buffer.java<CODESPLIT>Returns the descriptor corresponding to the given method .<CODESPLIT>public Buffer append ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) { // nothing to append return buffer ; } list . addAll ( buffer . list ) ; last = buffer . last ; size += buffer . size ; return this ; }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>Bind this binding key to the given provider instance .<CODESPLIT>public Object newInstance ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAApi.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>Run a block of code with a newly created EntityManager for the default Persistence Unit .<CODESPLIT>public static int lastIndexOfSlashDot ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/header/writers/frameoptions/XFrameOptionsHeaderWriter.java<CODESPLIT>config/src/main/java/org/springframework/security/config/http/UserDetailsServiceFactoryBean.java<CODESPLIT>Writes the X - Frame - Options header value overwritting any previous value .<CODESPLIT>private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilter.java<CODESPLIT>Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ; // OK, create the switch user token targetUserRequest = createSwitchUserToken ( request , targetUser ) ; if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Switch User Token [" + targetUserRequest + "]" ) ; } // publish event if ( this . eventPublisher != null ) { this . eventPublisher . publishEvent ( new AuthenticationSwitchUserEvent ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) , targetUser ) ) ; } return targetUserRequest ; }
1<CODESPLIT>extensions/jmx/src/com/google/inject/tools/jmx/Manager.java<CODESPLIT>src/main/java/io/reactivex/Observable.java<CODESPLIT>Run with no arguments for usage instructions .<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/MultiPartSpecBuilder.java<CODESPLIT>Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>public MultiPartSpecBuilder controlName ( String controlName ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . controlName = controlName ; this . isControlNameExplicit = true ; return this ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>src/main/java/io/reactivex/internal/util/EndConsumerHelper.java<CODESPLIT>Resolves bean names for give type .<CODESPLIT>public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return false ; } return true ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Set the session config .<CODESPLIT>public Double getDouble ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>core/play/src/main/java/play/libs/Json.java<CODESPLIT>Extracts zip file content to the target directory .<CODESPLIT>public static JsonNode parse ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcClient.java<CODESPLIT>Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
1<CODESPLIT>oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/NimbusJwtDecoder.java<CODESPLIT>src/main/java/org/java_websocket/WebSocketImpl.java<CODESPLIT>Decode and validate the JWT from its compact claims representation format<CODESPLIT>private ByteBuffer generateHttpResponseDueToError ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/savedrequest/DefaultSavedRequest.java<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>Indicates the URL that the user agent used for this request .<CODESPLIT>private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return false ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>Loads all method arguments before INVOKESPECIAL call .<CODESPLIT>public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Results.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Generates a simple result with json content and UTF8 encoding .<CODESPLIT>public T from ( final String personalName , final String from ) { return from ( new EmailAddress ( personalName , from ) ) ; }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAApi.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>Run a block of code with a newly created EntityManager for the default Persistence Unit .<CODESPLIT>public static byte [ ] bytecodeSignatureOfType ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
1<CODESPLIT>jodd-joy/src/main/java/jodd/joy/madvoc/AppAction.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcResponseResolver.java<CODESPLIT>Adds action violation .<CODESPLIT>public static Object resolveResponseObject ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
1<CODESPLIT>core/play/src/main/java/play/libs/reflect/MemberUtils.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/UrlAuthorizationConfigurer.java<CODESPLIT>XXX Default access superclass workaround .<CODESPLIT>private static String hasRole ( String role ) { Assert . isTrue ( ! role . startsWith ( "ROLE_" ) , ( ) -> role + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + role ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java<CODESPLIT>Returns an identity function that simply returns its argument .<CODESPLIT>public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Builds an OPTIONS request .<CODESPLIT>public static String parseRemoteAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
1<CODESPLIT>persistence/play-jdbc-evolutions/src/main/java/play/db/evolutions/Evolutions.java<CODESPLIT>extensions/servlet/src/com/google/inject/servlet/ServletScopes.java<CODESPLIT>Create an evolutions reader based on a simple map of database names to evolutions .<CODESPLIT>public static < T > Callable < T > transferRequest ( Callable < T > callable ) { return wrap ( callable , transferRequest ( ) ) ; }
1<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/JdbcMutableAclService.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .<CODESPLIT>Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/authentication/ad/ActiveDirectoryLdapAuthenticationProvider.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Allows a custom environment properties to be used to create initial LDAP context .<CODESPLIT>public HttpRequest basicAuthentication ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>core/play/src/main/java/play/mvc/Controller.java<CODESPLIT>Lists zip content .<CODESPLIT>public static Result TODO ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/config/MultiPartConfig.java<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/MapBasedAttributes2GrantedAuthoritiesMapper.java<CODESPLIT>Specify an explicit default multipart boundary to use when sending multi - part data .<CODESPLIT>private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/AuthConfig.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java<CODESPLIT>Set authentication credentials to be used for the given host and port .<CODESPLIT>public ResponseSpecBuilder expectHeader ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/savedrequest/FastHttpDateFormat.java<CODESPLIT>core/src/com/google/inject/internal/Scoping.java<CODESPLIT>Gets the current date in HTTP format .<CODESPLIT>static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ; // NOTE: SingletonScope relies on the fact that we are passing a // ProviderToInternalFactoryAdapter here.  If you change the type make sure to update // SingletonScope as well. Provider < T > scoped = scope . scope ( key , new ProviderToInternalFactoryAdapter < T > ( injector , creator ) ) ; return new InternalFactoryToProviderAdapter < T > ( scoped , source ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionMonitor.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Start schedule task<CODESPLIT>private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
1<CODESPLIT>retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java<CODESPLIT>config/src/main/java/org/springframework/security/config/http/UserDetailsServiceFactoryBean.java<CODESPLIT>The HTTP error to be used when an error is triggered .<CODESPLIT>private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/websphere/WebSpherePreAuthenticatedWebAuthenticationDetailsSource.java<CODESPLIT>jodd-bean/src/main/java/jodd/bean/BeanCopy.java<CODESPLIT>Get a list of Granted Authorities based on the current user s WebSphere groups .<CODESPLIT>public static BeanCopy from ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>core/src/com/google/inject/spi/InjectionPoint.java<CODESPLIT>Add Play bindings .<CODESPLIT>private static boolean checkForMisplacedBindingAnnotations ( Member member , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return false ; } // don't warn about misplaced binding annotations on methods when there's a field with the same // name. In Scala, fields always get accessor methods (that we need to ignore). See bug 242. if ( member instanceof Method ) { try { if ( member . getDeclaringClass ( ) . getDeclaredField ( member . getName ( ) ) != null ) { return false ; } } catch ( NoSuchFieldException ignore ) { } } errors . misplacedBindingAnnotation ( member , misplacedBindingAnnotation ) ; return true ; }
1<CODESPLIT>jodd-joy/src/main/java/jodd/joy/JoyContextListener.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Configures servlet context .<CODESPLIT>public GuiceApplicationBuilder load ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/Langs.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/scope/RequestScope.java<CODESPLIT>Select a preferred language given the list of candidates .<CODESPLIT>protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , true ) ; } } } ) ; } }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>core/play/src/main/java/play/core/Paths.java<CODESPLIT>Parses this string as instance of a specific field<CODESPLIT>public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>src/main/java/io/reactivex/Maybe.java<CODESPLIT>Puts a string into the JSON object with the specified key .<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Results.java<CODESPLIT>jodd-http/src/main/java/jodd/http/Buffer.java<CODESPLIT>Generates a result with file contents .<CODESPLIT>public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
1<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>core/play/src/main/java/play/mvc/Controller.java<CODESPLIT>Gets the strategy for an annotation type .<CODESPLIT>@ Deprecated public static void flash ( String key , String value ) { flash ( ) . put ( key , value ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/RequestSpecBuilder.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .<CODESPLIT>protected void collectActionInterceptors ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>Set the Json config .<CODESPLIT>protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) { // alias markers not found if ( i == 0 ) { // try whole string as an alias String alias = lookupAlias ( value ) ; return ( alias != null ? alias : value ) ; } else { result . append ( value . substring ( i ) ) ; } break ; } // alias marked found result . append ( value . substring ( i , ndx ) ) ; ndx ++ ; int ndx2 = value . indexOf ( ' ' , ndx ) ; String aliasName = ( ndx2 == - 1 ? value . substring ( ndx ) : value . substring ( ndx , ndx2 ) ) ; // process alias String alias = lookupAlias ( aliasName ) ; if ( alias != null ) { result . append ( alias ) ; } else { // alias not found if ( log . isWarnEnabled ( ) ) { log . warn ( "Alias not found: " + aliasName ) ; } } i = ndx2 + 1 ; } // fix prefix '//' - may happened when aliases are used i = 0 ; len = result . length ( ) ; while ( i < len ) { if ( result . charAt ( i ) != ' ' ) { break ; } i ++ ; } if ( i > 1 ) { return result . substring ( i - 1 , len ) ; } return result . toString ( ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>Detects if alias is defined in annotation and registers it if so .<CODESPLIT>public static void requireAuthentication ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/BCrypt.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/wrapper/Buffer.java<CODESPLIT>Cycically extract a word of key material .<CODESPLIT>public PrintWriter getWriter ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) { // do not close the print writer after rendering // since it will remove reference to bufferedWriter } } ; } return outWriter ; }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/JPAEntityManagerContext.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/scope/RequestScope.java<CODESPLIT>Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>Stores element on stack into an array .<CODESPLIT>public T resolve ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .<CODESPLIT>public void putBaseProperty ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Registers static method provider .<CODESPLIT>public String queryString ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
1<CODESPLIT>jodd-bean/src/main/java/jodd/typeconverter/impl/LongArrayConverter.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/interceptor/EchoInterceptor.java<CODESPLIT>Converts array value to array .<CODESPLIT>@ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java<CODESPLIT>core/play/src/main/java/play/mvc/Action.java<CODESPLIT>Specifies the URL to validate the credentials .<CODESPLIT>public CompletionStage < Result > call ( Request req ) { // TODO: Make this method abstract after removing call(Context) return Context . safeCurrent ( ) . map ( threadLocalCtx -> { // A previous action did explicitly set a context onto the thread local (via // Http.Context.current.set(...)) // Let's use that context so the user doesn't loose data he/she set onto that ctx // (args,...) Context newCtx = threadLocalCtx . withRequest ( req . removeAttr ( CTX_ARGS ) ) ; Context . setCurrent ( newCtx ) ; return call ( newCtx ) ; } ) . orElseGet ( ( ) -> { // A previous action did not set a context explicitly, we simply create a new one to // pass on the request Context ctx = new Context ( req . removeAttr ( CTX_ARGS ) , contextComponents ) ; ctx . args = req . attrs ( ) . getOptional ( CTX_ARGS ) . orElse ( new HashMap <> ( ) ) ; return call ( ctx ) ; } ) ; }
1<CODESPLIT>core/play/src/main/java/play/core/Paths.java<CODESPLIT>core/play/src/main/java/play/http/HttpEntity.java<CODESPLIT>Create a path to targetPath that s relative to the given startPath .<CODESPLIT>public static final HttpEntity chunked ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilter.java<CODESPLIT>core/play/src/main/java-scala-2.13+/play/libs/CrossScala.java<CODESPLIT>Set the URL to respond to exit user processing .<CODESPLIT>@ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... array ) { return toSeq ( array ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>src/main/java/io/reactivex/processors/MulticastProcessor.java<CODESPLIT>Parses this string as instance of the given class .<CODESPLIT>public boolean offer ( T t ) { if ( once . get ( ) ) { return false ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return true ; } } return false ; }
1<CODESPLIT>core/src/com/google/inject/internal/InternalContext.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Adds to the state without setting the dependency .<CODESPLIT>public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
1<CODESPLIT>src/main/java/org/java_websocket/WebSocketAdapter.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>This default implementation does not do anything . Go ahead and overwrite it .<CODESPLIT>public DirContextOperations retrieveEntry ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ; // Object object = ctx.lookup(LdapUtils.getRelativeName(dn, ctx)); return new DirContextAdapter ( attrs , new DistinguishedName ( dn ) , new DistinguishedName ( ctx . getNameInNamespace ( ) ) ) ; } } ) ; }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAConfig.java<CODESPLIT>core/play/src/main/java/play/core/Paths.java<CODESPLIT>Create a default JPA configuration with the given name and unit name .<CODESPLIT>public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Checking the handshake for the role as server<CODESPLIT>private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( false ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return false ; } return true ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>src/main/java/io/reactivex/disposables/SerialDisposable.java<CODESPLIT>Set the Xml config .<CODESPLIT>@ Nullable public Disposable get ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Stores context path in page context and request scope .<CODESPLIT>public static HttpRequest put ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>src/main/java/io/reactivex/internal/operators/flowable/FlowableScalarXMap.java<CODESPLIT>Prepares response for file download with provided mime type .<CODESPLIT>public static < T , U > Flowable < U > scalarXMap ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Set the MockMVC config<CODESPLIT>public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... bindings ) { return load ( Guiceable . bindings ( bindings ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Results.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/WebApp.java<CODESPLIT>Generates a result with file contents .<CODESPLIT>public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/config/switches/ProtocolSwitch.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/j2ee/J2eePreAuthenticatedProcessingFilter.java<CODESPLIT>from byte to bit set<CODESPLIT>protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>Internal method extracted to avoid code duplication in AD search .<CODESPLIT>public static < T extends Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>jodd-bean/src/main/java/jodd/introspector/Ctors.java<CODESPLIT>Create a NTLM authentication scheme .<CODESPLIT>protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
1<CODESPLIT>core/src/com/google/inject/internal/util/SourceProvider.java<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>Returns true if the className should be skipped .<CODESPLIT>public static < T , U > Function < T , U > castFunction ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Verifies whether comment of cookie satisfies specified matcher .<CODESPLIT>public < K , V > Map < K , V > getMap ( String path ) { return get ( path ) ; }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/MapBasedAttributes2GrantedAuthoritiesMapper.java<CODESPLIT>Indicates if the request is elgible to be processed as the proxy receptor .<CODESPLIT>private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/authentication/DefaultServiceAuthenticationDetails.java<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAApi.java<CODESPLIT>If present removes the artifactParameterName and the corresponding value from the query String .<CODESPLIT>public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/result/RawData.java<CODESPLIT>core/src/com/google/inject/internal/InjectorShell.java<CODESPLIT>Defines download file name and mime type from the name extension .<CODESPLIT>private static void bindLogger ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpMultiMap.java<CODESPLIT>src/main/java/com/alipay/remoting/ConnectionEventListener.java<CODESPLIT>Returns all values associated with the name .<CODESPLIT>public void addConnectionEventProcessor ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( processor ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>core/src/com/google/inject/internal/WeakKeySet.java<CODESPLIT>Stores context path in server context and request scope .<CODESPLIT>private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/upload/MultipartRequestInputStream.java<CODESPLIT>persistence/play-java-jdbc/src/main/java/play/db/DefaultDatabase.java<CODESPLIT>Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .<CODESPLIT>< A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return block . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/Form.java<CODESPLIT>Get the result of an Object path expression as a long .<CODESPLIT>public JsonNode errorsAsJson ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Initializer.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .<CODESPLIT>public RestAssuredMockMvcConfig xmlConfig ( XmlConfig xmlConfig ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/config/switches/ProtocolSwitch.java<CODESPLIT>src/main/java/com/alipay/remoting/config/switches/ProtocolSwitch.java<CODESPLIT>from byte to bit set<CODESPLIT>public static byte toByte ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
1<CODESPLIT>core/src/com/google/inject/internal/Errors.java<CODESPLIT>jodd-db/src/main/java/jodd/db/DbQueryParser.java<CODESPLIT>Within guice s core allow for better missing binding messages<CODESPLIT>DbQueryNamedParameter lookupNamedParameter ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilter.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Attempt to switch to another user . If the user does not exist or is not active return null .<CODESPLIT>private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsMapper.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/chunks/TableChunk.java<CODESPLIT>Extension point to allow customized creation of the user s password from the attribute stored in the directory .<CODESPLIT>@ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Stores context path in server context and request scope .<CODESPLIT>private void removeFailedJitBinding ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>Determines if a user is already authenticated .<CODESPLIT>public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , true , allowDocTypeDeclaration ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>Prepares response for file download with provided mime type .<CODESPLIT>public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
1<CODESPLIT>extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>Returns true if the given class has a scope annotation .<CODESPLIT>protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/JPAEntityManagerContext.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Get the EntityManager stack .<CODESPLIT>@ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HeadersMultiMap.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>Adds new header value . If existing value exist it will be removed so the store the new key value .<CODESPLIT>protected String parseMethodAlias ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/codec/Utf8.java<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/XmlPath.java<CODESPLIT>Get the bytes of the String in UTF - 8 encoded form .<CODESPLIT>public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , false ) ; return getObjectAsType ( object , objectType ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Handler.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Removes the range between start and end from the Handler list that begins with the given element .<CODESPLIT>private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/validation/MappedConstraintValidatorFactory.java<CODESPLIT>web/src/main/java/org/springframework/security/web/savedrequest/FastHttpDateFormat.java<CODESPLIT>Adds validator as a singleton .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/observers/BlockingMultiObserver.java<CODESPLIT>core/play/src/main/java/play/libs/F.java<CODESPLIT>Block until the latch is counted down and return the error received or null if no error happened .<CODESPLIT>private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Handler.java<CODESPLIT>core/src/com/google/inject/spi/Message.java<CODESPLIT>Removes the range between start and end from the Handler list that begins with the given element .<CODESPLIT>private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Finally builds proxy methods if applied to current method .<CODESPLIT>void putBootstrapMethods ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/jtx/JtxDbUtil.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Converter JTX transaction mode to DB transaction mode .<CODESPLIT>private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/scope/RequestScope.java<CODESPLIT>Qualify this binding key with the given instance of an annotation .<CODESPLIT>protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
1<CODESPLIT>jodd-bean/src/main/java/jodd/introspector/Ctors.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/proxetta/ProxettaAwarePetiteContainer.java<CODESPLIT>Finds constructor description that matches given argument types .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/rememberme/AbstractRememberMeServices.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .<CODESPLIT>public T to ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Specify the HTTP Multipart mode when sending multi - part data .<CODESPLIT>public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>core/play/src/main/java-scala-2.13+/play/libs/CrossScala.java<CODESPLIT>Syntax sugar .<CODESPLIT>public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] array ) { return toSeq ( java . util . Arrays . asList ( array ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Flowable.java<CODESPLIT>src/main/java/io/reactivex/internal/operators/observable/ObservableScalarXMap.java<CODESPLIT>Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return true ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return true ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return true ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return true ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return true ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return true ; } return false ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/InvokeContext.java<CODESPLIT>core/play/src/main/java/play/mvc/Controller.java<CODESPLIT>get and use default if not found<CODESPLIT>public static Result TODO ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>Check if a message key is defined .<CODESPLIT>public static boolean getBoolean ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return true ; case "false" : case "no" : case "0" : case "off" : return false ; default : return defaultValue ; } }
1<CODESPLIT>samples/xml/dms/src/main/java/sample/dms/DocumentDaoImpl.java<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/HTTPBuilder.java<CODESPLIT>Executes recursive SQL as needed to build a full Directory hierarchy of objects<CODESPLIT>public void setHeaders ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/config/JsonPathConfig.java<CODESPLIT>src/main/java/org/java_websocket/client/WebSocketClient.java<CODESPLIT>Creates an json path configuration that uses the specified parser type as default .<CODESPLIT>private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Cleans up any state that may have been cached when constructing the JIT binding .<CODESPLIT>public T from ( final String personalName , final String from ) { return from ( new EmailAddress ( personalName , from ) ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>jodd-core/src/main/java/jodd/io/FileNameUtil.java<CODESPLIT>Collects all interceptors .<CODESPLIT>public static String [ ] split ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/FilterChainProxy.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Returns the first filter chain matching the supplied URL .<CODESPLIT>private void addConstantNameAndType ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
1<CODESPLIT>core/play-streams/src/main/java/play/libs/streams/ActorFlow.java<CODESPLIT>persistence/play-jdbc-evolutions/src/main/java/play/db/evolutions/Evolutions.java<CODESPLIT>Create a flow that is handled by an actor .<CODESPLIT>public static play . api . db . evolutions . EvolutionsReader fromMap ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Configures OAuth 2 . 0 Resource Server support .<CODESPLIT>private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) { //Ignore this exception in this case } } } }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/BackpressureHelper.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .<CODESPLIT>protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/intercept/aspectj/AspectJMethodSecurityInterceptor.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Handler.java<CODESPLIT>Method that is suitable for user with traditional AspectJ - code aspects .<CODESPLIT>static int getExceptionTableLength ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/util/EncodingUtils.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/RestAssuredConfig.java<CODESPLIT>Combine the individual byte arrays into one array .<CODESPLIT>public RestAssuredConfig redirect ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/libs/reflect/MemberUtils.java<CODESPLIT>core/src/com/google/inject/internal/RealMultibinder.java<CODESPLIT>Returns the sum of the object transformation cost for each class in the source argument list .<CODESPLIT>public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Returns an identity function that simply returns its argument .<CODESPLIT>public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... bindings ) { return load ( Guiceable . bindings ( bindings ) ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>Verifies whether expiry date of cookie satisfies specified matcher .<CODESPLIT>public static String getMethodDescriptor ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/MultiPartSpecBuilder.java<CODESPLIT>rest-assured/src/main/java/io/restassured/authentication/PreemptiveAuthProvider.java<CODESPLIT>Specify the control name of this multi - part .<CODESPLIT>public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
1<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/validation/Constraints.java<CODESPLIT>Creates a new Message with the given cause and a binding source stack .<CODESPLIT>public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > constraint ) { final Display displayAnnotation = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/CodeEmitter.java<CODESPLIT>Specifies the URL to validate the credentials .<CODESPLIT>public void zero_or_null ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
1<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>src/main/java/io/reactivex/internal/util/AppendOnlyLinkedArrayList.java<CODESPLIT>Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .<CODESPLIT>public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return true ; } } a = ( Object [ ] ) a [ c ] ; } return false ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/jackson2/SecurityJackson2Modules.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>Creates a TypeResolverBuilder that performs whitelisting .<CODESPLIT>protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) { // alias markers not found if ( i == 0 ) { // try whole string as an alias String alias = lookupAlias ( value ) ; return ( alias != null ? alias : value ) ; } else { result . append ( value . substring ( i ) ) ; } break ; } // alias marked found result . append ( value . substring ( i , ndx ) ) ; ndx ++ ; int ndx2 = value . indexOf ( ' ' , ndx ) ; String aliasName = ( ndx2 == - 1 ? value . substring ( ndx ) : value . substring ( ndx , ndx2 ) ) ; // process alias String alias = lookupAlias ( aliasName ) ; if ( alias != null ) { result . append ( alias ) ; } else { // alias not found if ( log . isWarnEnabled ( ) ) { log . warn ( "Alias not found: " + aliasName ) ; } } i = ndx2 + 1 ; } // fix prefix '//' - may happened when aliases are used i = 0 ; len = result . length ( ) ; while ( i < len ) { if ( result . charAt ( i ) != ' ' ) { break ; } i ++ ; } if ( i > 1 ) { return result . substring ( i - 1 , len ) ; } return result . toString ( ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/AbstractRemotingProcessor.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Process the remoting command with its own executor or with the defaultExecutor if its own if null .<CODESPLIT>private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
1<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Specify declared namespaces that will be used when parsing XML .<CODESPLIT>private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/validation/Constraints.java<CODESPLIT>Will walk the method inheritance tree to find the most specific declaration applicable .<CODESPLIT>public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
1<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>config/src/main/java/org/springframework/security/config/http/UserDetailsServiceFactoryBean.java<CODESPLIT>Specify declared namespaces that will be used when parsing XML .<CODESPLIT>private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/tag/TagUtil.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Renders tag body to string .<CODESPLIT>public static HttpRequest create ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/TypeData.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>Resolves real name from JSON name .<CODESPLIT>public String getTableAlias ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>core/src/com/google/inject/internal/MembersInjectorStore.java<CODESPLIT>Sets the FROM address by providing personal name and address .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) // the MembersInjector type always agrees with the passed type public < T > MembersInjectorImpl < T > get ( TypeLiteral < T > key , Errors errors ) throws ErrorsException { return ( MembersInjectorImpl < T > ) cache . get ( key , errors ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/BeanData.java<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>Injects all parameters .<CODESPLIT>public static long getInt ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Collects all filters .<CODESPLIT>public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaMethodBuilder.java<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .<CODESPLIT>public static void proxy ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionMonitor.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>Start schedule task<CODESPLIT>public Set < Map < String , List < String > > > searchForMultipleAttributeValues ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) { // Escape the params acording to RFC2254 Object [ ] encodedParams = new String [ params . length ] ; for ( int i = 0 ; i < params . length ; i ++ ) { encodedParams [ i ] = LdapEncoder . filterEncode ( params [ i ] . toString ( ) ) ; } String formattedFilter = MessageFormat . format ( filter , encodedParams ) ; logger . debug ( "Using filter: " + formattedFilter ) ; final HashSet < Map < String , List < String > > > set = new HashSet < Map < String , List < String > > > ( ) ; ContextMapper roleMapper = new ContextMapper ( ) { public Object mapFromContext ( Object ctx ) { DirContextAdapter adapter = ( DirContextAdapter ) ctx ; Map < String , List < String > > record = new HashMap < String , List < String > > ( ) ; if ( attributeNames == null || attributeNames . length == 0 ) { try { for ( NamingEnumeration ae = adapter . getAttributes ( ) . getAll ( ) ; ae . hasMore ( ) ; ) { Attribute attr = ( Attribute ) ae . next ( ) ; extractStringAttributeValues ( adapter , record , attr . getID ( ) ) ; } } catch ( NamingException x ) { org . springframework . ldap . support . LdapUtils . convertLdapException ( x ) ; } } else { for ( String attributeName : attributeNames ) { extractStringAttributeValues ( adapter , record , attributeName ) ; } } record . put ( DN_KEY , Arrays . asList ( getAdapterDN ( adapter ) ) ) ; set . add ( record ) ; return null ; } } ; SearchControls ctls = new SearchControls ( ) ; ctls . setSearchScope ( searchControls . getSearchScope ( ) ) ; ctls . setReturningAttributes ( attributeNames != null && attributeNames . length > 0 ? attributeNames : null ) ; search ( base , formattedFilter , ctls , roleMapper ) ; return set ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/ReflectUtils.java<CODESPLIT>Translates a message .<CODESPLIT>public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) { // TODO: error? } } return result ; }
1<CODESPLIT>core/src/com/google/inject/internal/ConstructorBindingImpl.java<CODESPLIT>src/main/java/io/reactivex/internal/util/BackpressureHelper.java<CODESPLIT>Returns an injection point that can be used to clean up the constructor store .<CODESPLIT>public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( requested . compareAndSet ( r , u ) ) { return r ; } } }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionMonitor.java<CODESPLIT>Checking the handshake for the role as client<CODESPLIT>public void start ( ) { /** initial delay to execute schedule task, unit: ms */ long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; /** period of schedule task, unit: ms*/ long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , true ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/validation/MappedConstraintValidatorFactory.java<CODESPLIT>web/src/main/java/org/springframework/security/web/util/ThrowableAnalyzer.java<CODESPLIT>Adds validator as a singleton .<CODESPLIT>private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java<CODESPLIT>src/main/java/com/alipay/remoting/ProcessorManager.java<CODESPLIT>Updates the default values for authentication .<CODESPLIT>public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
1<CODESPLIT>src/main/java/io/reactivex/processors/UnicastProcessor.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Creates an UnicastProcessor with the given internal buffer capacity hint .<CODESPLIT>public RestAssuredMockMvcConfig jsonConfig ( JsonConfig jsonConfig ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/BridgeMethodResolver.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>Finds all bridge methods that are being called with invokespecial & returns them .<CODESPLIT>public final Self overrides ( play . api . inject . Binding < ? > ... bindings ) { return overrides ( Guiceable . bindings ( bindings ) ) ; }
1<CODESPLIT>persistence/play-jdbc-evolutions/src/main/java/play/db/evolutions/Evolutions.java<CODESPLIT>src/main/java/com/alipay/remoting/util/FutureTaskUtil.java<CODESPLIT>Create an evolutions reader for the default database from a list of evolutions .<CODESPLIT>public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/filter/CharArrayResponseWrapper.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/rememberme/JdbcTokenRepositoryImpl.java<CODESPLIT>Returns buffered writer . Buffer will be created if not already used .<CODESPLIT>public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Set a http client parameter .<CODESPLIT>public static int parseRemotePort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/paramo/MethodFinder.java<CODESPLIT>Verifies whether secured property of cookie satisfies specified matcher .<CODESPLIT>MethodParameter [ ] getResolvedParameters ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/BeanData.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/ParamManager.java<CODESPLIT>Invokes init methods .<CODESPLIT>public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; } // resolve all references String value = PropertiesUtil . resolveProperty ( params , key ) ; entry . setValue ( value ) ; } if ( list . isEmpty ( ) ) { return StringPool . EMPTY_ARRAY ; } else { return list . toArray ( new String [ 0 ] ) ; } }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java<CODESPLIT>Getter to return the socket used by this specific connection<CODESPLIT>protected final void updateAccessDefaults ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>public void broadcast ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Controller.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java<CODESPLIT>Generates a 501 NOT_IMPLEMENTED simple result .<CODESPLIT>ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; } // process messages final ReceivedEmail [ ] emails = new ReceivedEmail [ messages . length ] ; for ( int i = 0 ; i < messages . length ; i ++ ) { final Message msg = messages [ i ] ; // we need to parse message BEFORE flags are set! emails [ i ] = new ReceivedEmail ( msg , envelope , attachmentStorage ) ; if ( ! EmailUtil . isEmptyFlags ( flagsToSet ) ) { emails [ i ] . flags ( flagsToSet ) ; msg . setFlags ( flagsToSet , true ) ; } if ( ! EmailUtil . isEmptyFlags ( flagsToUnset ) ) { emails [ i ] . flags ( ) . remove ( flagsToUnset ) ; msg . setFlags ( flagsToUnset , false ) ; } if ( EmailUtil . isEmptyFlags ( flagsToSet ) && ! emails [ i ] . isSeen ( ) ) { msg . setFlag ( Flags . Flag . SEEN , false ) ; } } if ( processedMessageConsumer != null ) { processedMessageConsumer . accept ( messages ) ; } // if messages were marked to be deleted, we need to expunge the folder if ( ! EmailUtil . isEmptyFlags ( flagsToSet ) ) { if ( flagsToSet . contains ( Flags . Flag . DELETED ) ) { folder . expunge ( ) ; } } return emails ; } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to fetch messages" , msgexc ) ; } }
1<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>src/main/java/io/reactivex/disposables/CompositeDisposable.java<CODESPLIT>Invoked when a client makes a bad request .<CODESPLIT>public int size ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>jodd-joy/src/main/java/jodd/joy/madvoc/AppAction.java<CODESPLIT>Disable modules by class .<CODESPLIT>protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/proxy/MethodProxy.java<CODESPLIT>core/play/src/main/java/play/core/Paths.java<CODESPLIT>Invoke the original method on a different object of the same type .<CODESPLIT>public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/j2ee/J2eePreAuthenticatedProcessingFilter.java<CODESPLIT>Sets the FROM address by providing personal name and address .<CODESPLIT>protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java<CODESPLIT>Defines include patterns .<CODESPLIT>public ResponseSpecBuilder expectCookie ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>core/play/src/main/java/play/mvc/Results.java<CODESPLIT>Add Play bindings .<CODESPLIT>public static Result status ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Returns all includes for given type . Returns an empty array when no includes are defined .<CODESPLIT>int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
1<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilter.java<CODESPLIT>Invoked when a server error occurs .<CODESPLIT>protected Authentication attemptExitUser ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException { // need to check to see if the current user has a SwitchUserGrantedAuthority Authentication current = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( null == current ) { throw new AuthenticationCredentialsNotFoundException ( this . messages . getMessage ( "SwitchUserFilter.noCurrentUser" , "No current user associated with this request" ) ) ; } // check to see if the current user did actual switch to another user // if so, get the original source user so we can switch back Authentication original = getSourceAuthentication ( current ) ; if ( original == null ) { this . logger . debug ( "Could not find original user Authentication object!" ) ; throw new AuthenticationCredentialsNotFoundException ( this . messages . getMessage ( "SwitchUserFilter.noOriginalAuthentication" , "Could not find original Authentication object" ) ) ; } // get the source user details UserDetails originalUser = null ; Object obj = original . getPrincipal ( ) ; if ( ( obj != null ) && obj instanceof UserDetails ) { originalUser = ( UserDetails ) obj ; } // publish event if ( this . eventPublisher != null ) { this . eventPublisher . publishEvent ( new AuthenticationSwitchUserEvent ( current , originalUser ) ) ; } return original ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Call.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/LdapUtils.java<CODESPLIT>Transform this call to an WebSocket URL .<CODESPLIT>public static DistinguishedName getFullDn ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
1<CODESPLIT>src/main/java/io/reactivex/Observable.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/scope/RequestScope.java<CODESPLIT>Wraps an ObservableSource into an Observable if not already an Observable .<CODESPLIT>protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/upload/MultipartRequestInputStream.java<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .<CODESPLIT>public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base ) { return fromDirectoryAndJar ( directory , jarFile , base , false ) ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/AbstractConfiguredSecurityBuilder.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>Gets a shared Object . Note that object heirarchies are not considered .<CODESPLIT>public final Self overrides ( play . api . inject . Module ... modules ) { return overrides ( Guiceable . modules ( modules ) ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>Resolves result path .<CODESPLIT>public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ; // We ignore any pre-existing binding annotation. final Key < ? > returnKey = Key . get ( returnType . getTypeLiteral ( ) , RETURN_ANNOTATION ) ; Module assistedModule = new AbstractModule ( ) { @ Override @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) // raw keys are necessary for the args array and return value protected void configure ( ) { Binder binder = binder ( ) . withSource ( method ) ; int p = 0 ; if ( ! data . optimized ) { for ( Key < ? > paramKey : data . paramTypes ) { // Wrap in a Provider to cover null, and to prevent Guice from injecting the // parameter binder . bind ( ( Key ) paramKey ) . toProvider ( Providers . of ( args [ p ++ ] ) ) ; } } else { for ( Key < ? > paramKey : data . paramTypes ) { // Bind to our ThreadLocalProviders. binder . bind ( ( Key ) paramKey ) . toProvider ( data . providers . get ( p ++ ) ) ; } } Constructor constructor = data . constructor ; // Constructor *should* always be non-null here, // but if it isn't, we'll end up throwing a fairly good error // message for the user. if ( constructor != null ) { binder . bind ( returnKey ) . toConstructor ( constructor , ( TypeLiteral ) data . implementationType ) . in ( Scopes . NO_SCOPE ) ; // make sure we erase any scope on the implementation type } } } ; Injector forCreate = injector . createChildInjector ( assistedModule ) ; Binding < ? > binding = forCreate . getBinding ( returnKey ) ; // If we have providers cached in data, cache the binding for future optimizations. if ( data . optimized ) { data . cachedBinding = binding ; } return binding ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/FileNameUtil.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Does the work of getting the path .<CODESPLIT>public void broadcast ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , clients ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/InternalContext.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Adds to the state without setting the dependency .<CODESPLIT>public void defineParameters ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>Override bindings using Play modules .<CODESPLIT>public MockMvcRequestSpecBuilder addMultiPart ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
1<CODESPLIT>samples/xml/dms/src/main/java/sample/dms/DataSourcePopulator.java<CODESPLIT>src/main/java/com/alipay/remoting/CustomSerializerManager.java<CODESPLIT>Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .<CODESPLIT>public static void registerCustomSerializer ( String className , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>Reads class or method annotation for action filters .<CODESPLIT>private boolean authenticated ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>Collects all action runtime configurations .<CODESPLIT>public static int getArgumentsAndReturnSizes ( final String methodDescriptor ) { int argumentsSize = 1 ; // Skip the first character, which is always a '('. int currentOffset = 1 ; int currentChar = methodDescriptor . charAt ( currentOffset ) ; // Parse the argument types and compute their size, one at a each loop iteration. while ( currentChar != ' ' ) { if ( currentChar == ' ' || currentChar == ' ' ) { currentOffset ++ ; argumentsSize += 2 ; } else { while ( methodDescriptor . charAt ( currentOffset ) == ' ' ) { currentOffset ++ ; } if ( methodDescriptor . charAt ( currentOffset ++ ) == ' ' ) { // Skip the argument descriptor content. currentOffset = methodDescriptor . indexOf ( ' ' , currentOffset ) + 1 ; } argumentsSize += 1 ; } currentChar = methodDescriptor . charAt ( currentOffset ) ; } currentChar = methodDescriptor . charAt ( currentOffset + 1 ) ; if ( currentChar == ' ' ) { return argumentsSize << 2 ; } else { int returnSize = ( currentChar == ' ' || currentChar == ' ' ) ? 2 : 1 ; return argumentsSize << 2 | returnSize ; } }
1<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Adds base property .<CODESPLIT>public Float getFloat ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Returns just host url without path and query .<CODESPLIT>public < K , V > Map < K , V > getMap ( String path ) { return get ( path ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/AbstractAuthenticationTargetUrlRequestHandler.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Builds the target URL according to the logic defined in the main class Javadoc<CODESPLIT>public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/BeanSerializer.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>Reads property using property descriptor .<CODESPLIT>public FindFile searchPath ( final URL searchPath ) { File file = FileUtil . toContainerFile ( searchPath ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( file ) ; return this ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>jodd-http/src/main/java/jodd/http/Buffer.java<CODESPLIT>Specify excluded jars .<CODESPLIT>public void writeTo ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException { // start final int size = size ( ) ; final int callbackSize = progressListener . callbackSize ( size ) ; int count = 0 ; // total count int step = 0 ; // step is offset in current chunk progressListener . transferred ( count ) ; // loop for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] bytes = fastByteBuffer . toArray ( ) ; int offset = 0 ; while ( offset < bytes . length ) { // calc the remaining sending chunk size int chunk = callbackSize - step ; // check if this chunk size fits the bytes array if ( offset + chunk > bytes . length ) { chunk = bytes . length - offset ; } // writes the chunk out . write ( bytes , offset , chunk ) ; offset += chunk ; step += chunk ; count += chunk ; // listener if ( step >= callbackSize ) { progressListener . transferred ( count ) ; step -= callbackSize ; } } } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; int remaining = uploadable . getSize ( ) ; try { while ( remaining > 0 ) { // calc the remaining sending chunk size int chunk = callbackSize - step ; // check if this chunk size fits the remaining size if ( chunk > remaining ) { chunk = remaining ; } // writes remaining chunk StreamUtil . copy ( inputStream , out , chunk ) ; remaining -= chunk ; step += chunk ; count += chunk ; // listener if ( step >= callbackSize ) { progressListener . transferred ( count ) ; step -= callbackSize ; } } } finally { StreamUtil . close ( inputStream ) ; } } } // end if ( step != 0 ) { progressListener . transferred ( count ) ; } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .<CODESPLIT>private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
1<CODESPLIT>core/play-java/src/main/java/play/libs/Comet.java<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .<CODESPLIT>public static < T , U > Function < T , U > castFunction ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>Creates a new Message with the given cause and a binding source stack .<CODESPLIT>public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , true ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsManager.java<CODESPLIT>Parses this string as instance of the given class .<CODESPLIT>public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>persistence/play-jdbc-evolutions/src/main/java/play/db/evolutions/Evolutions.java<CODESPLIT>Create a http basic authentication scheme .<CODESPLIT>public static void cleanupEvolutions ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/codec/Utf8.java<CODESPLIT>src/main/java/org/java_websocket/framing/CloseFrame.java<CODESPLIT>Get the bytes of the String in UTF - 8 encoded form .<CODESPLIT>public void setCode ( int code ) { this . code = code ; // CloseFrame.TLS_ERROR is not allowed to be transfered over the wire if ( code == CloseFrame . TLS_ERROR ) { this . code = CloseFrame . NOCODE ; this . reason = "" ; } updatePayload ( ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>Execute a write operation<CODESPLIT>protected String [ ] readMethodActionPath ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) { // read annotation String methodActionPath = annotationValues != null ? annotationValues . value ( ) : null ; if ( methodActionPath == null ) { methodActionPath = methodName ; } else { if ( methodActionPath . equals ( Action . NONE ) ) { return ArraysUtil . array ( null , null ) ; } } // check for defaults for ( String path : actionConfig . getActionMethodNames ( ) ) { if ( methodActionPath . equals ( path ) ) { methodActionPath = null ; break ; } } return ArraysUtil . array ( methodName , methodActionPath ) ; }
1<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>Adds base property .<CODESPLIT>public final Self bindings ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>Add default filters that will be applied to each request .<CODESPLIT>protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ; // update position pointers if ( first == null ) { first = propsEntry ; } else { last . next = propsEntry ; } last = propsEntry ; // add to the map map . put ( key , propsEntry ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Creates a new Message with the given cause .<CODESPLIT>public DetailedCookieMatcher version ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/config/JsonPathConfig.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpMultiMap.java<CODESPLIT>Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .<CODESPLIT>@ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
1<CODESPLIT>core/play/src/main/java/play/Environment.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsManager.java<CODESPLIT>Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .<CODESPLIT>public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/rememberme/JdbcTokenRepositoryImpl.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/DefaultSpringSecurityContextSource.java<CODESPLIT>Loads the token data for the supplied series identifier .<CODESPLIT>private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Indexes bindings by type .<CODESPLIT>private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
1<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>jodd-core/src/main/java/jodd/buffer/FastCharBuffer.java<CODESPLIT>Indicates if the request is elgible to be processed as the proxy receptor .<CODESPLIT>private void grow ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) { // special case, min capacity is larger then a grow newCapacity = minCapacity + 512 ; } buffer = Arrays . copyOf ( buffer , newCapacity ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcCommandFactory.java<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAConfig.java<CODESPLIT>create server exception using error msg and fill the stack trace using the stack trace of throwable .<CODESPLIT>public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Converter for String - > Optional and Optional - > String<CODESPLIT>private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = false ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) { // only check if we haven't looked at this key yet BindingImpl depBinding = jitBindings . get ( depKey ) ; if ( depBinding != null ) { // if the binding still exists, validate boolean failed = cleanup ( depBinding , encountered ) ; // if children fail, we fail if ( depBinding instanceof ConstructorBindingImpl ) { ConstructorBindingImpl ctorBinding = ( ConstructorBindingImpl ) depBinding ; ip = ctorBinding . getInternalConstructor ( ) ; if ( ! ctorBinding . isInitialized ( ) ) { failed = true ; } } if ( failed ) { removeFailedJitBinding ( depBinding , ip ) ; bindingFailed = true ; } } else if ( state . getExplicitBinding ( depKey ) == null ) { // ignore keys if they were explicitly bound, but if neither JIT // nor explicit, it's also invalid & should let parent know. bindingFailed = true ; } } } return bindingFailed ; }
1<CODESPLIT>extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethodsModule.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/EmailUtil.java<CODESPLIT>Returns a module which creates bindings for provider methods from the given module .<CODESPLIT>public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return true ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return false ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return false ; } return true ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>Complete the target with a single value or indicate there is a value available in fusion mode .<CODESPLIT>public Object lookupObject ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/advice/DelegateAdviceUtil.java<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>Applies advice on given target class and returns proxy instance .<CODESPLIT>public static void unzip ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>src/main/java/io/reactivex/internal/util/BackpressureHelper.java<CODESPLIT>Registers destroy method .<CODESPLIT>public static long multiplyCap ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseBuilder.java<CODESPLIT>src/main/java/io/reactivex/internal/util/AppendOnlyLinkedArrayList.java<CODESPLIT>Build the actual response<CODESPLIT>public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return true ; } } a = ( Object [ ] ) a [ c ] ; } return false ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .<CODESPLIT>private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
1<CODESPLIT>src/main/java/io/reactivex/subjects/UnicastSubject.java<CODESPLIT>src/main/java/com/alipay/remoting/ScheduledDisconnectStrategy.java<CODESPLIT>Creates an UnicastSubject with the given internal buffer capacity hint .<CODESPLIT>@ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/password/MessageDigestPasswordEncoder.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .<CODESPLIT>public RestAssuredMockMvcConfig jsonConfig ( JsonConfig jsonConfig ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>extensions/struts2/src/com/google/inject/struts2/Struts2Factory.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Returns true if the given class has a scope annotation .<CODESPLIT>@ Override public Connection getAndCreateIfAbsent ( Url url ) throws InterruptedException , RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this . getConnectionPoolAndCreateIfAbsent ( url . getUniqueKey ( ) , new ConnectionPoolCall ( url ) ) ; if ( null != pool ) { return pool . get ( ) ; } else { logger . error ( "[NOTIFYME] bug detected! pool here must not be null!" ) ; return null ; } }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAApi.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/encrypt/Encryptors.java<CODESPLIT>Get a newly created EntityManager for the specified persistence unit name .<CODESPLIT>public static TextEncryptor delux ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ConnectionEventHandler.java<CODESPLIT>jodd-joy/src/main/java/jodd/joy/madvoc/AppAction.java<CODESPLIT>print info log<CODESPLIT>protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>src/main/java/com/alipay/remoting/rpc/protocol/UserProcessorRegisterHelper.java<CODESPLIT>Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .<CODESPLIT>public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
1<CODESPLIT>core/src/com/google/inject/internal/InternalContext.java<CODESPLIT>core/src/com/google/inject/TypeLiteral.java<CODESPLIT>Sets the new current dependency & adds it to the state .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > providerType ( ) { // This cast is safe and wouldn't generate a warning if Type had a type // parameter. return ( TypeLiteral < Provider < T > > ) get ( Types . providerOf ( getType ( ) ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>Complete the target without any value .<CODESPLIT>protected void collectActionResults ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Stores one argument . Index is 1 - based . No conversion occurs .<CODESPLIT>public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapAuthority.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Returns the first attribute value for a specified attribute<CODESPLIT>public void forEachBeanType ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/Buffer.java<CODESPLIT>core/src/com/google/inject/internal/TypeConverterBindingProcessor.java<CODESPLIT>Appends other buffer to this one .<CODESPLIT>static void prepareBuiltInConverters ( InjectorImpl injector ) { // Configure type converters. convertToPrimitiveType ( injector , int . class , Integer . class ) ; convertToPrimitiveType ( injector , long . class , Long . class ) ; convertToPrimitiveType ( injector , boolean . class , Boolean . class ) ; convertToPrimitiveType ( injector , byte . class , Byte . class ) ; convertToPrimitiveType ( injector , short . class , Short . class ) ; convertToPrimitiveType ( injector , float . class , Float . class ) ; convertToPrimitiveType ( injector , double . class , Double . class ) ; convertToClass ( injector , Character . class , new TypeConverter ( ) { @ Override public Object convert ( String value , TypeLiteral < ? > toType ) { value = value . trim ( ) ; if ( value . length ( ) != 1 ) { throw new RuntimeException ( "Length != 1." ) ; } return value . charAt ( 0 ) ; } @ Override public String toString ( ) { return "TypeConverter<Character>" ; } } ) ; convertToClasses ( injector , Matchers . subclassesOf ( Enum . class ) , new TypeConverter ( ) { @ Override @ SuppressWarnings ( "unchecked" ) public Object convert ( String value , TypeLiteral < ? > toType ) { return Enum . valueOf ( ( Class ) toType . getRawType ( ) , value ) ; } @ Override public String toString ( ) { return "TypeConverter<E extends Enum<E>>" ; } } ) ; internalConvertToTypes ( injector , new AbstractMatcher < TypeLiteral < ? > > ( ) { @ Override public boolean matches ( TypeLiteral < ? > typeLiteral ) { return typeLiteral . getRawType ( ) == Class . class ; } @ Override public String toString ( ) { return "Class<?>" ; } } , new TypeConverter ( ) { @ Override @ SuppressWarnings ( "unchecked" ) public Object convert ( String value , TypeLiteral < ? > toType ) { try { return Class . forName ( value ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e . getMessage ( ) ) ; } } @ Override public String toString ( ) { return "TypeConverter<Class<?>>" ; } } ) ; }
1<CODESPLIT>core/play-java/src/main/java/play/libs/Comet.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .<CODESPLIT>public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
1<CODESPLIT>core/src/com/google/inject/internal/InterceptorStackCallback.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .<CODESPLIT>private static SearchControls buildControls ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpMultiMap.java<CODESPLIT>taglibs/src/main/java/org/springframework/security/taglibs/authz/AbstractAuthorizeTag.java<CODESPLIT>Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .<CODESPLIT>public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/validation/Constraints.java<CODESPLIT>src/main/java/io/reactivex/internal/operators/observable/ObservableScalarXMap.java<CODESPLIT>Converts a constraint to a human - readable value .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return true ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return true ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return true ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return true ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return true ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return true ; } return false ; }
1<CODESPLIT>core/play/src/main/java/play/http/HttpEntity.java<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>Convert the given source of ByteStrings to a chunked entity .<CODESPLIT>protected static long [ ] bytesToLongs ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Create a http basic authentication scheme .<CODESPLIT>@ Override public CompletionStage < Result > onClientError ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>core/play/src/main/java/play/libs/streams/AkkaStreams.java<CODESPLIT>Returns entity descriptor for provided table reference .<CODESPLIT>public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/WebSocketAdapter.java<CODESPLIT>core/play/src/main/java/play/inject/BindingKey.java<CODESPLIT>This default implementation does not do anything . Go ahead and overwrite it .<CODESPLIT>public < A extends T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Performs an LDAP compare operation of the value of an attribute for a particular directory entry .<CODESPLIT>public Long getLong ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Initializer.java<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>Registers an instance for member injection when that step is performed .<CODESPLIT>public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
1<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>src/main/java/io/reactivex/internal/operators/flowable/FlowableScalarXMap.java<CODESPLIT>Returns the formatted message for an exception with the specified messages .<CODESPLIT>public static < T , U > Flowable < U > scalarXMap ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Notification.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/proxetta/ProxettaAwarePetiteContainer.java<CODESPLIT>Returns the contained value if this notification is an onNext signal null otherwise .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/authentication/configurers/provisioning/UserDetailsManagerConfigurer.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Populates the users that have been added .<CODESPLIT>public T textMessage ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/encrypt/CipherUtils.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Constructs a new Cipher .<CODESPLIT>@ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Verifies whether expiry date of cookie satisfies specified matcher .<CODESPLIT>public static String parseRemoteAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/RealMapBinder.java<CODESPLIT>jodd-core/src/main/java/jodd/io/FileNameUtil.java<CODESPLIT>since it s an easy way to group a type and an optional annotation type or instance .<CODESPLIT>public static String relativePath ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/BytecodeGen.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Returns true if the member can be called by a fast class generated in a different classloader .<CODESPLIT>public static HttpRequest connect ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Sets Host header from current host and port .<CODESPLIT>void putBootstrapMethods ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java<CODESPLIT>Adds many query parameters at once . Although it accepts objects each value will be converted to string .<CODESPLIT>public String convertColumnNameToPropertyName ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = false ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = true ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = false ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>Prepares response for various provided data .<CODESPLIT>public static byte [ ] bytecodeSignatureOfType ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>Returns a function that cast the incoming values via a Class object .<CODESPLIT>private static byte [ ] readStream ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/protocol/RpcRequestProcessor.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>deserialize request command<CODESPLIT>public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ; // find ins and outs final Class [ ] paramTypes = actionClassMethod . getParameterTypes ( ) ; final MethodParam [ ] params = new MethodParam [ paramTypes . length ] ; final Annotation [ ] [ ] paramAnns = actionClassMethod . getParameterAnnotations ( ) ; String [ ] methodParamNames = null ; // for all elements: action and method arguments... for ( int ndx = 0 ; ndx < paramTypes . length ; ndx ++ ) { Class paramType = paramTypes [ ndx ] ; // lazy init to postpone bytecode usage, when method has no arguments if ( methodParamNames == null ) { methodParamNames = actionMethodParamNameResolver . resolveParamNames ( actionClassMethod ) ; } final String paramName = methodParamNames [ ndx ] ; final Annotation [ ] parameterAnnotations = paramAnns [ ndx ] ; final ScopeData paramsScopeData = scopeDataInspector . inspectMethodParameterScopes ( paramName , paramType , parameterAnnotations ) ; MapperFunction mapperFunction = null ; for ( final Annotation annotation : parameterAnnotations ) { if ( annotation instanceof Mapper ) { mapperFunction = MapperFunctionInstances . get ( ) . lookup ( ( ( Mapper ) annotation ) . value ( ) ) ; break ; } } params [ ndx ] = new MethodParam ( paramTypes [ ndx ] , paramName , scopeDataInspector . detectAnnotationType ( parameterAnnotations ) , paramsScopeData , mapperFunction ) ; } return new ActionRuntime ( null , actionClass , actionClassMethod , filters , interceptors , actionDefinition , actionResult , defaultActionResult , async , auth , scopeData , params ) ; }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>Set the module loader . Overrides the default or any previously configured values .<CODESPLIT>protected T setTarget ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
1<CODESPLIT>core/play-java/src/main/java/play/libs/XPath.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/password/StandardPasswordEncoder.java<CODESPLIT>Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order<CODESPLIT>private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return false ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
1<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>extensions/jmx/src/com/google/inject/tools/jmx/Manager.java<CODESPLIT>Gets the strategy for an annotation .<CODESPLIT>public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ; // Sleep forever. Thread . sleep ( Long . MAX_VALUE ) ; }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>persistence/play-jdbc-evolutions/src/main/java/play/db/evolutions/Evolutions.java<CODESPLIT>Override the module loader with the given Play modules .<CODESPLIT>public static play . api . db . evolutions . EvolutionsReader fromMap ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/framing/CloseFrame.java<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>Update the payload to represent the close code and the reason<CODESPLIT>public static boolean getBoolean ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return true ; case "false" : case "no" : case "0" : case "off" : return false ; default : return defaultValue ; } }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/SpringSecurityCoreVersion.java<CODESPLIT>core/play-java/src/main/java/play/libs/Time.java<CODESPLIT>Loads the spring version or null if it cannot be found .<CODESPLIT>public static Date parseCRONExpression ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
1<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/codec/Utf8.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java<CODESPLIT>Get the bytes of the String in UTF - 8 encoded form .<CODESPLIT>public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Flowable.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/UrlAuthorizationConfigurer.java<CODESPLIT>Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .<CODESPLIT>private static String hasRole ( String role ) { Assert . isTrue ( ! role . startsWith ( "ROLE_" ) , ( ) -> role + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + role ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .<CODESPLIT>public String resolveRealName ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/Form.java<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/AuthConfig.java<CODESPLIT>Retrieve all global errors - errors without a key .<CODESPLIT>public void ntlm ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/rememberme/AbstractRememberMeServices.java<CODESPLIT>jodd-joy/src/main/java/jodd/joy/JoyContextListener.java<CODESPLIT>Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .<CODESPLIT>private void configureServletContext ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , true , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , true , contextPath ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/framing/CloseFrame.java<CODESPLIT>core/src/com/google/inject/internal/InjectorShell.java<CODESPLIT>Set the close code for this close frame<CODESPLIT>private static void bindLogger ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/util/matcher/RegexRequestMatcher.java<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .<CODESPLIT>private boolean isMatch ( String methodName , String mappedName ) { return ( mappedName . endsWith ( "*" ) && methodName . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && methodName . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java<CODESPLIT>Will walk the method inheritance tree to find the most specific declaration applicable .<CODESPLIT>public ResponseSpecBuilder expectCookie ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
1<CODESPLIT>core/src/com/google/inject/internal/SingleParameterInjector.java<CODESPLIT>core/play/src/main/java-scala-2.13+/play/libs/CrossScala.java<CODESPLIT>Returns an array of parameter values .<CODESPLIT>public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/reactive/result/method/annotation/CurrentSecurityContextArgumentResolver.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/LogConfig.java<CODESPLIT>resolve the argument to inject into the controller parameter .<CODESPLIT>public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , true , logDetailIfValidationFails , urlEncodeRequestUri , true ) ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/core/userdetails/UserDetailsResourceFactoryBean.java<CODESPLIT>jodd-core/src/main/java/jodd/io/upload/MultipartRequestInputStream.java<CODESPLIT>Creates a UserDetailsResourceFactoryBean with a resource from the provided String<CODESPLIT>public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( true ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/session/ConcurrentSessionControlAuthenticationStrategy.java<CODESPLIT>src/main/java/org/java_websocket/AbstractWebSocket.java<CODESPLIT>Allows subclasses to customise behaviour when too many sessions are detected .<CODESPLIT>public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ; //Reset all the pings try { ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( getConnections ( ) ) ; WebSocketImpl webSocketImpl ; for ( WebSocket conn : connections ) { if ( conn instanceof WebSocketImpl ) { webSocketImpl = ( WebSocketImpl ) conn ; webSocketImpl . updateLastPong ( ) ; } } } catch ( Exception e ) { log . error ( "Exception during connection lost restart" , e ) ; } restartConnectionLostTimer ( ) ; } } }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>Disable modules by class .<CODESPLIT>public static void addToZip ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) { // add folder record if ( ! StringUtil . endsWithChar ( path , ' ' ) ) { path += ' ' ; } } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( file . lastModified ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } if ( isDir ) { zipEntry . setSize ( 0 ) ; zipEntry . setCrc ( 0 ) ; } zos . putNextEntry ( zipEntry ) ; if ( ! isDir ) { InputStream is = new FileInputStream ( file ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } } zos . closeEntry ( ) ; // continue adding if ( recursive && file . isDirectory ( ) ) { boolean noRelativePath = StringUtil . isEmpty ( path ) ; final File [ ] children = file . listFiles ( ) ; if ( children != null && children . length != 0 ) { for ( File child : children ) { String childRelativePath = ( noRelativePath ? StringPool . EMPTY : path ) + child . getName ( ) ; addToZip ( zos , child , childRelativePath , comment , recursive ) ; } } } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Handler.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Returns the number of elements of the Handler list that begins with the given element .<CODESPLIT>public static int parseRemotePort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
1<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository<CODESPLIT>public HttpRequest setHostHeader ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>Get the result of an Object path expression as a byte .<CODESPLIT>public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>Return all non - assisted dependencies .<CODESPLIT>public static byte [ ] bytecodeSignatureOfType ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/ConstructorInjectorStore.java<CODESPLIT>core/src/com/google/inject/internal/BytecodeGen.java<CODESPLIT>Returns a new complete constructor injector with injection listeners registered .<CODESPLIT>private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return false ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return false ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return false ; } } return true ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>core/play/src/main/java/play/libs/concurrent/DefaultFutures.java<CODESPLIT>Appends the descriptor corresponding to this type to the given string buffer .<CODESPLIT>@ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
1<CODESPLIT>taglibs/src/main/java/org/springframework/security/taglibs/authz/AbstractAuthorizeTag.java<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/MapBasedAttributes2GrantedAuthoritiesMapper.java<CODESPLIT>Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .<CODESPLIT>private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/j2ee/J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource.java<CODESPLIT>Returns byte array of created class .<CODESPLIT>public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/JdbcMutableAclService.java<CODESPLIT>Get a messages context appropriate for the given candidates .<CODESPLIT>protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , true ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>Registers constructor injection point .<CODESPLIT>private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) { // Read the attribute_info's attribute_name and attribute_length fields. String attributeName = readUTF8 ( currentAttributeOffset , charBuffer ) ; int attributeLength = readInt ( currentAttributeOffset + 2 ) ; currentAttributeOffset += 6 ; if ( Constants . BOOTSTRAP_METHODS . equals ( attributeName ) ) { // Read the num_bootstrap_methods field and create an array of this size. currentBootstrapMethodOffsets = new int [ readUnsignedShort ( currentAttributeOffset ) ] ; // Compute and store the offset of each 'bootstrap_methods' array field entry. int currentBootstrapMethodOffset = currentAttributeOffset + 2 ; for ( int j = 0 ; j < currentBootstrapMethodOffsets . length ; ++ j ) { currentBootstrapMethodOffsets [ j ] = currentBootstrapMethodOffset ; // Skip the bootstrap_method_ref and num_bootstrap_arguments fields (2 bytes each), // as well as the bootstrap_arguments array field (of size num_bootstrap_arguments * 2). currentBootstrapMethodOffset += 4 + readUnsignedShort ( currentBootstrapMethodOffset + 2 ) * 2 ; } return currentBootstrapMethodOffsets ; } currentAttributeOffset += attributeLength ; } return null ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/RandomSelectStrategy.java<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationFilter.java<CODESPLIT>get one connection randomly<CODESPLIT>private boolean proxyReceptorRequest ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcServer.java<CODESPLIT>src/main/java/com/alipay/remoting/ConnectionEventHandler.java<CODESPLIT>init netty write buffer water mark<CODESPLIT>private void infoLog ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Returns a function that cast the incoming values via a Class object .<CODESPLIT>int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
1<CODESPLIT>samples/xml/contacts/src/main/java/sample/contact/AdminPermissionController.java<CODESPLIT>src/main/java/com/alipay/remoting/BaseRemoting.java<CODESPLIT>Displays the permission admin page for a particular contact .<CODESPLIT>protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/websphere/DefaultWASUsernameAndGroupsExtractor.java<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>Get the WebSphere group names for the given security name .<CODESPLIT>@ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > getAssistedMethods ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>extensions/servlet/src/com/google/inject/servlet/ServletUtils.java<CODESPLIT>Scans classes inside single JAR archive . Archive is scanned as a zip file .<CODESPLIT>static String normalizePath ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; } // Normalize the path.  we need to decode path segments, normalize and rejoin in order to // 1. decode and normalize safe percent escaped characters.  e.g. %70 -> 'p' // 2. decode and interpret dangerous character sequences. e.g. /%2E/ -> '/./' -> '/' // 3. preserve dangerous encoded characters. e.g. '/%2F/' -> '///' -> '/%2F' List < String > segments = new ArrayList <> ( ) ; for ( String segment : SLASH_SPLITTER . split ( path ) ) { // This decodes all non-special characters from the path segment.  so if someone passes // /%2E/foo we will normalize it to /./foo and then /foo String normalized = UrlEscapers . urlPathSegmentEscaper ( ) . escape ( lenientDecode ( segment , UTF_8 , false ) ) ; if ( "." . equals ( normalized ) ) { // skip } else if ( ".." . equals ( normalized ) ) { if ( segments . size ( ) > 1 ) { segments . remove ( segments . size ( ) - 1 ) ; } } else { segments . add ( normalized ) ; } } SLASH_JOINER . appendTo ( sb , segments ) ; if ( query != null ) { sb . append ( query ) ; } return sb . toString ( ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/SimpleAuthorityMapper.java<CODESPLIT>src/main/java/com/alipay/remoting/ProcessorManager.java<CODESPLIT>Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .<CODESPLIT>public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/result/RawData.java<CODESPLIT>src/main/java/com/alipay/remoting/RemotingContext.java<CODESPLIT>Defines download file name and mime type from the name extension .<CODESPLIT>public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
1<CODESPLIT>jodd-jtx/src/main/java/jodd/jtx/JtxTransaction.java<CODESPLIT>jodd-core/src/main/java/jodd/crypt/Threefish.java<CODESPLIT>Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .<CODESPLIT>protected static long [ ] bytesToLongs ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebSecurityConfiguration.java<CODESPLIT>core/src/com/google/inject/internal/RealMultibinder.java<CODESPLIT>Creates the Spring Security Filter Chain<CODESPLIT>public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Override the module loader with the given guiceable modules .<CODESPLIT>protected TypeData findSubclassTypeData ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) { // current type has annotation, don't find anything, let type data be created return null ; } ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; // lookup superclasses Class [ ] superClasses = cd . getAllSuperclasses ( ) ; for ( Class superClass : superClasses ) { if ( superClass . getAnnotation ( defaultAnnotation ) != null ) { // annotated subclass founded! return _lookupTypeData ( superClass ) ; } } Class [ ] interfaces = cd . getAllInterfaces ( ) ; for ( Class interfaze : interfaces ) { if ( interfaze . getAnnotation ( defaultAnnotation ) != null ) { // annotated subclass founded! return _lookupTypeData ( interfaze ) ; } } return null ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Translates a message .<CODESPLIT>public HttpRequest host ( final String host ) { this . host = host ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , host ) ; } return this ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/Lang.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HeadersMultiMap.java<CODESPLIT>Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .<CODESPLIT>public void addHeader ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/SimpleUrlAuthenticationSuccessHandler.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Removes temporary authentication - related data which may have been stored in the session during the authentication process .<CODESPLIT>public static HttpRequest delete ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/type/SqlType.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Once when value is read from result set prepare it to match destination type .<CODESPLIT>private void addConstantUtf8 ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/authentication/jaas/JaasAuthenticationProvider.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java<CODESPLIT>Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .<CODESPLIT>public ResponseSpecBuilder expectCookie ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>Validates argument index .<CODESPLIT>public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/ZipUtil.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Compresses a file into zlib archive .<CODESPLIT>Symbol addConstantMethodref ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>jodd-jtx/src/main/java/jodd/jtx/JtxTransaction.java<CODESPLIT>Sends correct headers to require basic authentication for the given realm .<CODESPLIT>public void setRollbackOnly ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/header/writers/frameoptions/XFrameOptionsHeaderWriter.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Writes the X - Frame - Options header value overwritting any previous value .<CODESPLIT>public static HttpRequest trace ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java<CODESPLIT>core/play/src/main/java/play/mvc/Action.java<CODESPLIT>Converts property name to column name .<CODESPLIT>public CompletionStage < Result > call ( Request req ) { // TODO: Make this method abstract after removing call(Context) return Context . safeCurrent ( ) . map ( threadLocalCtx -> { // A previous action did explicitly set a context onto the thread local (via // Http.Context.current.set(...)) // Let's use that context so the user doesn't loose data he/she set onto that ctx // (args,...) Context newCtx = threadLocalCtx . withRequest ( req . removeAttr ( CTX_ARGS ) ) ; Context . setCurrent ( newCtx ) ; return call ( newCtx ) ; } ) . orElseGet ( ( ) -> { // A previous action did not set a context explicitly, we simply create a new one to // pass on the request Context ctx = new Context ( req . removeAttr ( CTX_ARGS ) , contextComponents ) ; ctx . args = req . attrs ( ) . getOptional ( CTX_ARGS ) . orElse ( new HashMap <> ( ) ) ; return call ( ctx ) ; } ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/validation/Constraints.java<CODESPLIT>core/src/com/google/inject/internal/InternalContext.java<CODESPLIT>Converts a constraint to a human - readable value .<CODESPLIT>Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/jackson2/SecurityJackson2Modules.java<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>Creates a TypeResolverBuilder that performs whitelisting .<CODESPLIT>@ Override protected Collection < ConfigAttribute > findAttributes ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
1<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Gets a key for an injection type and an annotation strategy .<CODESPLIT>public JsonObject put ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>src/main/java/com/alipay/remoting/Connection.java<CODESPLIT>Builds a CONNECT request .<CODESPLIT>public void close ( ) { if ( closed . compareAndSet ( false , true ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
1<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>transport/server/play-server/src/main/java/play/server/Server.java<CODESPLIT>Get all connections of all poolKey .<CODESPLIT>public static Server forRouter ( Mode mode , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( block ) ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>src/main/java/org/java_websocket/WebSocketAdapter.java<CODESPLIT>Get the result of an Object path expression as a map .<CODESPLIT>@ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/Form.java<CODESPLIT>web/src/main/java/org/springframework/security/web/FilterChainProxy.java<CODESPLIT>Returns the form errors serialized as Json using the given Lang .<CODESPLIT>public List < Filter > getFilters ( String url ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/plugins/RxJavaPlugins.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Removes all handlers and resets to default behavior .<CODESPLIT>public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
1<CODESPLIT>src/main/java/io/reactivex/subjects/PublishSubject.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/scope/RequestScope.java<CODESPLIT>Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .<CODESPLIT>protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , true ) ; } } } ) ; } }
1<CODESPLIT>src/main/java/com/alipay/remoting/ReconnectManager.java<CODESPLIT>core/src/com/google/inject/internal/ConstructorInjector.java<CODESPLIT>add reconnect task<CODESPLIT>private T provision ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; } // Store reference. If an injector re-enters this factory, they'll get the same reference. constructionContext . setCurrentReference ( t ) ; MembersInjectorImpl < T > localMembersInjector = membersInjector ; localMembersInjector . injectMembers ( t , context , false ) ; localMembersInjector . notifyListeners ( t ) ; return t ; } catch ( InvocationTargetException userException ) { Throwable cause = userException . getCause ( ) != null ? userException . getCause ( ) : userException ; throw InternalProvisionException . errorInjectingConstructor ( cause ) . addSource ( constructionProxy . getInjectionPoint ( ) ) ; } finally { constructionContext . removeCurrentReference ( ) ; } }
1<CODESPLIT>src/main/java/io/reactivex/internal/functions/Functions.java<CODESPLIT>src/main/java/com/alipay/remoting/ConnectionEventListener.java<CODESPLIT>Returns a function that cast the incoming values via a Class object .<CODESPLIT>public void addConnectionEventProcessor ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( processor ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/ReconnectManager.java<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>stop reconnect thread<CODESPLIT>public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , true , allowDocTypeDeclaration ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpMultiMap.java<CODESPLIT>src/main/java/com/alipay/remoting/ProcessorManager.java<CODESPLIT>Clears the map .<CODESPLIT>public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcClient.java<CODESPLIT>src/main/java/io/reactivex/internal/util/EndConsumerHelper.java<CODESPLIT>Close all connections of a address<CODESPLIT>public static boolean validate ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return false ; } return true ; }
1<CODESPLIT>retrofit/src/main/java/retrofit2/HttpServiceMethod.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java<CODESPLIT>Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .<CODESPLIT>public String convertColumnNameToPropertyName ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = false ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = true ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = false ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>Returns all action wrappers . Returns a copy in new set .<CODESPLIT>public < K , V > Map < K , V > getMap ( String path ) { return get ( path ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilter.java<CODESPLIT>Removes last CamelWord<CODESPLIT>protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ; // OK, create the switch user token targetUserRequest = createSwitchUserToken ( request , targetUser ) ; if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Switch User Token [" + targetUserRequest + "]" ) ; } // publish event if ( this . eventPublisher != null ) { this . eventPublisher . publishEvent ( new AuthenticationSwitchUserEvent ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) , targetUser ) ) ; } return targetUserRequest ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/scope/RequestScope.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>Injects request attributes .<CODESPLIT>public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/protocol/RpcRequestProcessor.java<CODESPLIT>core/src/com/google/inject/internal/InternalContext.java<CODESPLIT>pre process remoting context initial some useful infos and pass to biz<CODESPLIT>Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return previous ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/codec/ProtocolCodeBasedDecoder.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/BeanData.java<CODESPLIT>decode the protocol code<CODESPLIT>public void invokeInitMethods ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
1<CODESPLIT>src/main/java/org/java_websocket/WebSocketImpl.java<CODESPLIT>src/main/java/io/reactivex/internal/util/EndConsumerHelper.java<CODESPLIT>Send Text data to the other end .<CODESPLIT>public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return false ; } return true ; }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAConfig.java<CODESPLIT>src/main/java/io/reactivex/Notification.java<CODESPLIT>Create a default JPA configuration from a map of names to unit names .<CODESPLIT>@ Nullable public Throwable getError ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>Collects all filters .<CODESPLIT>public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
1<CODESPLIT>src/main/java/org/java_websocket/AbstractWebSocket.java<CODESPLIT>src/main/java/org/java_websocket/WebSocketImpl.java<CODESPLIT>Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping<CODESPLIT>@ Override public void send ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>src/main/java/org/java_websocket/WebSocketImpl.java<CODESPLIT>Parse the remote host ip of the channel .<CODESPLIT>private void closeConnectionDueToWrongHandshake ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , false ) ; }
1<CODESPLIT>openid/src/main/java/org/springframework/security/openid/OpenIDAuthenticationFilter.java<CODESPLIT>jodd-bean/src/main/java/jodd/typeconverter/impl/LongArrayConverter.java<CODESPLIT>Performs URL encoding with UTF - 8<CODESPLIT>protected long [ ] convertArrayToArray ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else { // convert object array to target array final Object [ ] array = ( Object [ ] ) value ; result = new long [ array . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) { result [ i ] = convertType ( array [ i ] ) ; } } return result ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java<CODESPLIT>Computes the display string for any value .<CODESPLIT>public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Prepares parameters for further processing .<CODESPLIT>public HttpRequest query ( final String name1 , final Object value1 , final Object ... parameters ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>core/src/com/google/inject/internal/InterceptorStackCallback.java<CODESPLIT>Builds an OPTIONS request .<CODESPLIT>private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
1<CODESPLIT>core/src/com/google/inject/internal/BytecodeGen.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
1<CODESPLIT>src/main/java/org/java_websocket/WebSocketAdapter.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>This default implementation does not do anything . Go ahead and overwrite it .<CODESPLIT>public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
1<CODESPLIT>core/src/com/google/inject/spi/Message.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .<CODESPLIT>public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/HttpRequestFactory.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>Get the HttpRequest class that represents this request type .<CODESPLIT>public T resolve ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
1<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Resolves all macros in this props set . Called on property lookup .<CODESPLIT>@ Override public void createConnectionAndHealIfNeed ( Url url ) throws InterruptedException , RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this . getConnectionPoolAndCreateIfAbsent ( url . getUniqueKey ( ) , new ConnectionPoolCall ( url ) ) ; if ( null != pool ) { healIfNeed ( pool , url ) ; } else { logger . error ( "[NOTIFYME] bug detected! pool here must not be null!" ) ; } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>core/src/com/google/inject/internal/Messages.java<CODESPLIT>Creates new instance of action runtime configuration . Initialize caches .<CODESPLIT>public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
1<CODESPLIT>persistence/play-jdbc-evolutions/src/main/java/play/db/evolutions/Evolutions.java<CODESPLIT>src/main/java/io/reactivex/subjects/UnicastSubject.java<CODESPLIT>Create an evolutions reader for the default database from a list of evolutions .<CODESPLIT>@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , true ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>@ Override public void createConnectionAndHealIfNeed ( Url url ) throws InterruptedException , RemotingException { // get and create a connection pool with initialized connections. ConnectionPool pool = this . getConnectionPoolAndCreateIfAbsent ( url . getUniqueKey ( ) , new ConnectionPoolCall ( url ) ) ; if ( null != pool ) { healIfNeed ( pool , url ) ; } else { logger . error ( "[NOTIFYME] bug detected! pool here must not be null!" ) ; } }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/CsrfShield.java<CODESPLIT>Registers destroy method .<CODESPLIT>protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/LogConfig.java<CODESPLIT>Process the frame if it is a closing frame<CODESPLIT>public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , true , logDetailIfValidationFails , urlEncodeRequestUri , true ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/BCrypt.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/transform/impl/FieldProviderTransformer.java<CODESPLIT>Cycically extract a word of key material .<CODESPLIT>private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/RestAssured.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Instruct REST Assured to connect to a proxy using a URI .<CODESPLIT>public void removeBean ( final Class type ) { // collect bean names Set < String > beanNames = new HashSet <> ( ) ; for ( BeanDefinition def : beans . values ( ) ) { if ( def . type . equals ( type ) ) { beanNames . add ( def . name ) ; } } // remove collected bean names for ( String beanName : beanNames ) { removeBean ( beanName ) ; } }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>src/main/java/io/reactivex/processors/UnicastProcessor.java<CODESPLIT>Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .<CODESPLIT>@ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Registers property injection point .<CODESPLIT>private static Seq < Object > convertArgsToScalaBuffer ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/print/ResponsePrinter.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>Prints the response to the print stream<CODESPLIT>public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>core/src/main/java/org/springframework/security/util/FieldUtils.java<CODESPLIT>Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .<CODESPLIT>public static Field getField ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) { // Try superclass if ( clazz . getSuperclass ( ) != null ) { return getField ( clazz . getSuperclass ( ) , fieldName ) ; } throw new IllegalStateException ( "Could not locate field '" + fieldName + "' on class " + clazz ) ; } }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/action/MadvocConfigurations.java<CODESPLIT>Enables basic authentication by adding required header .<CODESPLIT>protected void collectActionRuntimes ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/FileNameUtil.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>Converts all separators to the system separator .<CODESPLIT>public FindFile searchPath ( final URI searchPath ) { File file ; try { file = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( file ) ; return this ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>jodd-props/src/main/java/jodd/props/PropsData.java<CODESPLIT>Returns the binary name of the class corresponding to this type . This method must not be used on method types .<CODESPLIT>public Map extract ( Map target , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; } // make sure prefix ends with a dot if ( prefix != null ) { if ( ! StringUtil . endsWithChar ( prefix , ' ' ) ) { prefix += StringPool . DOT ; } } if ( profiles != null ) { for ( String profile : profiles ) { while ( true ) { final Map < String , PropsEntry > map = this . profileProperties . get ( profile ) ; if ( map != null ) { extractMap ( target , map , profiles , wildcardPatterns , prefix ) ; } final int ndx = profile . lastIndexOf ( ' ' ) ; if ( ndx == - 1 ) { break ; } profile = profile . substring ( 0 , ndx ) ; } } } extractMap ( target , this . baseProperties , profiles , wildcardPatterns , prefix ) ; return target ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/ProxettaFactory.java<CODESPLIT>core/src/com/google/inject/spi/Message.java<CODESPLIT>Returns byte array of created class .<CODESPLIT>private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>core/play/src/main/java/play/http/HttpEntity.java<CODESPLIT>Indexes bindings by type .<CODESPLIT>public CompletionStage < ByteString > consumeData ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>core/src/com/google/inject/internal/RealMultibinder.java<CODESPLIT>Get a messages context appropriate for the given request .<CODESPLIT>Key < T > getKeyForNewItem ( ) { checkConfiguration ( ! bindingSelection . isInitialized ( ) , "Multibinder was already initialized" ) ; return Key . get ( bindingSelection . getElementTypeLiteral ( ) , new RealElement ( bindingSelection . getSetName ( ) , MULTIBINDER , "" ) ) ; }
1<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceBuilder.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Add Play bindings .<CODESPLIT>public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/SocketChannelIOHelper.java<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java<CODESPLIT>Returns whether the whole outQueue has been flushed<CODESPLIT>public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
1<CODESPLIT>core/src/com/google/inject/spi/ProviderLookup.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Sets the actual provider .<CODESPLIT>< T > BindingImpl < T > getBindingOrThrow ( Key < T > key , Errors errors , JitLimitation jitType ) throws ErrorsException { // Check explicit bindings, i.e. bindings created by modules. BindingImpl < T > binding = state . getExplicitBinding ( key ) ; if ( binding != null ) { return binding ; } // Look for an on-demand binding. return getJustInTimeBinding ( key , errors , jitType ) ; }
1<CODESPLIT>json-path/src/main/java/io/restassured/path/json/JsonPath.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>Get the result of an Object path expression as a byte .<CODESPLIT>protected Label readLabel ( final int bytecodeOffset , final Label [ ] labels ) { if ( labels [ bytecodeOffset ] == null ) { labels [ bytecodeOffset ] = new Label ( ) ; } return labels [ bytecodeOffset ] ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.java<CODESPLIT>jodd-joy/src/main/java/jodd/joy/JoyContextListener.java<CODESPLIT>Provided so that subclasses may configure what is put into the authentication request s details property .<CODESPLIT>private void configureServletContext ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , true , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , true , contextPath ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size<CODESPLIT>public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/paramo/MethodFinder.java<CODESPLIT>src/main/java/io/reactivex/Maybe.java<CODESPLIT>Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
1<CODESPLIT>core/play/src/main/java/play/libs/F.java<CODESPLIT>persistence/play-java-jdbc/src/main/java/play/db/Databases.java<CODESPLIT>Constructs a tuple of A B C D E<CODESPLIT>public static Database createFrom ( String driver , String url , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , url , config ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/Langs.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationBuilder.java<CODESPLIT>Select a preferred language given the list of candidates .<CODESPLIT>public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
1<CODESPLIT>config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractAuthenticationFilterConfigurer.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Specifies the URL to validate the credentials .<CODESPLIT>private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>json-path/src/main/java/io/restassured/path/json/config/JsonPathConfig.java<CODESPLIT>Specify the HTTP Multipart mode when sending multi - part data .<CODESPLIT>public JsonPathConfig defaultParserType ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/validation/MappedConstraintValidatorFactory.java<CODESPLIT>rest-assured/src/main/java/io/restassured/authentication/PreemptiveAuthProvider.java<CODESPLIT>need to do so .<CODESPLIT>public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Type.java<CODESPLIT>Converts column name to property name .<CODESPLIT>public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
1<CODESPLIT>core/src/main/java/org/springframework/security/authentication/jaas/AbstractJaasAuthenticationProvider.java<CODESPLIT>src/main/java/io/reactivex/Maybe.java<CODESPLIT>Attempts to login the user given the Authentication objects principal and credential<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/JdbcMutableAclService.java<CODESPLIT>Creates unique key for method signatures map .<CODESPLIT>protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , true ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Complete the target with an error signal .<CODESPLIT>public T cc ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpMultiMap.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Clears the map .<CODESPLIT>private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } //Check if the whole payload is valid utf8, when the opcode indicates a text if ( curop == Opcode . TEXT && ! Charsetfunctions . isValidUTF8 ( frame . getPayloadData ( ) ) ) { log . error ( "Protocol error: Payload is not UTF8" ) ; throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } //Checking if the current continuous frame contains a correct payload with the other frames combined if ( curop == Opcode . CONTINUOUS && currentContinuousFrame != null ) { addToBufferList ( frame . getPayloadData ( ) ) ; } }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Reads class or method annotation for action interceptors .<CODESPLIT>@ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/AppendOnlyLinkedArrayList.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .<CODESPLIT>public T to ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/WrapperManager.java<CODESPLIT>Returns system property as a long .<CODESPLIT>protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
1<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Parses this string as instance of the given class .<CODESPLIT>public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/sqlgen/TemplateData.java<CODESPLIT>core/play/src/main/java/play/mvc/Controller.java<CODESPLIT>Registers a hint .<CODESPLIT>@ Deprecated public static void session ( String key , String value ) { session ( ) . put ( key , value ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/MapBasedAttributes2GrantedAuthoritiesMapper.java<CODESPLIT>src/main/java/io/reactivex/internal/observers/DeferredScalarDisposable.java<CODESPLIT>Map the given array of attributes to Spring Security GrantedAuthorities .<CODESPLIT>public final void error ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
1<CODESPLIT>core/play/src/main/java/play/core/Paths.java<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>Create a canonical path that does not contain parent directories current directories or superfluous directory separators .<CODESPLIT>public Long getLong ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>Converts column name to property name .<CODESPLIT>public static HttpRequest create ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Scoping.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/DbMetaUtil.java<CODESPLIT>Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .<CODESPLIT>public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java<CODESPLIT>Appends TO address by personal name and email address .<CODESPLIT>private static SearchControls buildControls ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java<CODESPLIT>core/src/com/google/inject/internal/ConstructorInjectorStore.java<CODESPLIT>Child Observers will observe the events of the ConnectableObservable on the specified scheduler .<CODESPLIT>public ConstructorInjector < ? > get ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>src/main/java/org/java_websocket/client/WebSocketClient.java<CODESPLIT>Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .<CODESPLIT>private int getPort ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>core/play-java/src/main/java/play/libs/Comet.java<CODESPLIT>Locates first dot after the last slash .<CODESPLIT>public static Flow < JsonNode , ByteString , NotUsed > json ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( callbackName ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>cas/src/main/java/org/springframework/security/cas/web/CasAuthenticationEntryPoint.java<CODESPLIT>Builds advice method name .<CODESPLIT>protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , false ) ; }
1<CODESPLIT>acl/src/main/java/org/springframework/security/acls/jdbc/JdbcMutableAclService.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/search/FilterBasedLdapUserSearch.java<CODESPLIT>Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .<CODESPLIT>@ Override public DirContextOperations searchForUser ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; } // Search should never return multiple results if properly configured, so just // rethrow throw notFound ; } }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>jodd-db/src/main/java/jodd/db/oom/naming/ColumnNamingStrategy.java<CODESPLIT>Verifies whether version of cookie satisfies specified matcher .<CODESPLIT>public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Completable.java<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsManager.java<CODESPLIT>Creates a NullPointerException instance and sets the given Throwable as its initial cause .<CODESPLIT>protected DistinguishedName buildGroupDn ( String group ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return dn ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/crypt/BCrypt.java<CODESPLIT>src/main/java/io/reactivex/internal/util/AppendOnlyLinkedArrayList.java<CODESPLIT>Cycically extract a word of key material .<CODESPLIT>public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return true ; } } a = ( Object [ ] ) a [ c ] ; } return false ; }
1<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/XmlPath.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/result/RawData.java<CODESPLIT>Get an XML document as a Java Object .<CODESPLIT>public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/scope/RequestScope.java<CODESPLIT>crypto/src/main/java/org/springframework/security/crypto/password/StandardPasswordEncoder.java<CODESPLIT>Injects request attributes .<CODESPLIT>private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return false ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/DefaultLdapUsernameToDnMapper.java<CODESPLIT>core/src/com/google/inject/internal/util/LineNumbers.java<CODESPLIT>Assembles the Distinguished Name that should be used the given username .<CODESPLIT>public Integer getLineNumber ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>src/main/java/org/java_websocket/server/WebSocketServer.java<CODESPLIT>Prepares return value .<CODESPLIT>private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return false ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return true ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>src/main/java/io/reactivex/Observable.java<CODESPLIT>Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>@ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/filter/log/ResponseLoggingFilter.java<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>Create a new logging filter without using the new operator . Will make the DSL look nicer .<CODESPLIT>public static void requireAuthentication ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/SpringSecurityCoreVersion.java<CODESPLIT>src/main/java/io/reactivex/internal/util/EndConsumerHelper.java<CODESPLIT>Perform version checks with specific min Spring Version<CODESPLIT>public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return false ; } return true ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/FindFile.java<CODESPLIT>src/main/java/org/java_websocket/client/WebSocketClient.java<CODESPLIT>Specifies the search path . Throws an exception if URL is invalid .<CODESPLIT>private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/AuthorityUtils.java<CODESPLIT>Method to generate a full bytebuffer out of all the fragmented frame payload<CODESPLIT>public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ResultMapper.java<CODESPLIT>core/src/com/google/inject/internal/util/SourceProvider.java<CODESPLIT>Resolves result path .<CODESPLIT>public Object getFromClassNames ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/FieldVisitor.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Visits an annotation of the field .<CODESPLIT>private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
1<CODESPLIT>src/main/java/com/alipay/remoting/rpc/RpcAddressParser.java<CODESPLIT>core/play/src/main/java/play/libs/reflect/MemberUtils.java<CODESPLIT>try get from cache<CODESPLIT>private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { // slight penalty for interface match. // we still want an exact match to override an interface match, // but // an interface match should override anything where we have to // get a superclass. cost += 0.25f ; break ; } cost ++ ; srcClass = srcClass . getSuperclass ( ) ; } /*      * If the destination class is null, we've traveled all the way up to      * an Object match. We'll penalize this by adding 1.5 to the cost.      */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
1<CODESPLIT>core/src/com/google/inject/TypeLiteral.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Returns an immutable list of the resolved types .<CODESPLIT>public < T > String print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/TinyBitSet.java<CODESPLIT>Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .<CODESPLIT>public int cardinality ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/io/PathUtil.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .<CODESPLIT>@ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/rememberme/AbstractRememberMeServices.java<CODESPLIT>core/play-java/src/main/java/play/libs/Comet.java<CODESPLIT>Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .<CODESPLIT>public static Flow < JsonNode , ByteString , NotUsed > json ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( callbackName ) ) ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Returns system property as a long .<CODESPLIT>public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
1<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/j2ee/J2eePreAuthenticatedProcessingFilter.java<CODESPLIT>Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .<CODESPLIT>protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
1<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>extensions/throwingproviders/src/com/google/inject/throwingproviders/CheckedProviderMethodsModule.java<CODESPLIT>Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .<CODESPLIT>static Module forModule ( Module module ) { // avoid infinite recursion, since installing a module always installs itself if ( module instanceof CheckedProviderMethodsModule ) { return Modules . EMPTY_MODULE ; } return new CheckedProviderMethodsModule ( module ) ; }
1<CODESPLIT>taglibs/src/main/java/org/springframework/security/taglibs/authz/JspAuthorizeTag.java<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>Default processing of the end tag returning EVAL_PAGE .<CODESPLIT>public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Maybe.java<CODESPLIT>src/main/java/io/reactivex/processors/UnicastProcessor.java<CODESPLIT>Retries at most times or until the predicate returns false whichever happens first .<CODESPLIT>@ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/authentication/SpringSecurityAuthenticationSource.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/transform/impl/FieldProviderTransformer.java<CODESPLIT>Get the principals of the logged in user in this case the distinguished name .<CODESPLIT>private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java<CODESPLIT>Get all connections of all poolKey .<CODESPLIT>public XmlPathConfig declareNamespaces ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft.java<CODESPLIT>core/src/com/google/inject/internal/MoreTypes.java<CODESPLIT>Checking the handshake for the role as client<CODESPLIT>public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; // the following casts are generally unsafe, but com.google.inject.Provider extends // javax.inject.Provider and is covariant @ SuppressWarnings ( "unchecked" ) TypeLiteral < T > guiceProviderType = ( TypeLiteral < T > ) TypeLiteral . get ( Types . providerOf ( parameterizedType . getActualTypeArguments ( ) [ 0 ] ) ) ; return guiceProviderType ; } @ SuppressWarnings ( "unchecked" ) TypeLiteral < T > wrappedPrimitives = ( TypeLiteral < T > ) PRIMITIVE_TO_WRAPPER . get ( typeLiteral ) ; if ( wrappedPrimitives != null ) { return wrappedPrimitives ; } // If we know this isn't a subclass, return as-is. if ( typeLiteral . getClass ( ) == TypeLiteral . class ) { return typeLiteral ; } // recreate the TypeLiteral to avoid anonymous TypeLiterals from holding refs to their // surrounding classes. @ SuppressWarnings ( "unchecked" ) TypeLiteral < T > recreated = ( TypeLiteral < T > ) TypeLiteral . get ( typeLiteral . getType ( ) ) ; return recreated ; }
1<CODESPLIT>src/main/java/org/java_websocket/WebSocketAdapter.java<CODESPLIT>core/play-guice/src/main/java/play/inject/guice/GuiceApplicationLoader.java<CODESPLIT>This default implementation does not do anything . Go ahead and overwrite it .<CODESPLIT>public GuiceApplicationBuilder builder ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/CodeEmitter.java<CODESPLIT>retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java<CODESPLIT>package - protected for EmitUtils try to fix<CODESPLIT>public void setDelay ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/session/ConcurrentSessionControlAuthenticationStrategy.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.java<CODESPLIT>Allows subclasses to customise behaviour when too many sessions are detected .<CODESPLIT>protected void setDetails ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/RequestSpecBuilder.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java<CODESPLIT>Add a parameter to be sent with the request .<CODESPLIT>public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/util/UrlUtils.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .<CODESPLIT>public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
1<CODESPLIT>jodd-db/src/main/java/jodd/db/type/SqlType.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/CodeEmitter.java<CODESPLIT>Once when value is read from result set prepare it to match destination type .<CODESPLIT>public void load_arg ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
1<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>Process the frame if it is a binary frame<CODESPLIT>private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = false ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) { // only check if we haven't looked at this key yet BindingImpl depBinding = jitBindings . get ( depKey ) ; if ( depBinding != null ) { // if the binding still exists, validate boolean failed = cleanup ( depBinding , encountered ) ; // if children fail, we fail if ( depBinding instanceof ConstructorBindingImpl ) { ConstructorBindingImpl ctorBinding = ( ConstructorBindingImpl ) depBinding ; ip = ctorBinding . getInternalConstructor ( ) ; if ( ! ctorBinding . isInitialized ( ) ) { failed = true ; } } if ( failed ) { removeFailedJitBinding ( depBinding , ip ) ; bindingFailed = true ; } } else if ( state . getExplicitBinding ( depKey ) == null ) { // ignore keys if they were explicitly bound, but if neither JIT // nor explicit, it's also invalid & should let parent know. bindingFailed = true ; } } } return bindingFailed ; }
1<CODESPLIT>core/src/com/google/inject/internal/InjectorImpl.java<CODESPLIT>config/src/main/java/org/springframework/security/config/http/UserDetailsServiceFactoryBean.java<CODESPLIT>Safely gets the dependencies of possibly not initialized bindings .<CODESPLIT>private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
1<CODESPLIT>core/src/com/google/inject/internal/Annotations.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Generates an Annotation for the annotation class . Requires that the annotation is all optionals .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
1<CODESPLIT>core/src/com/google/inject/internal/InternalContext.java<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/EmitUtils.java<CODESPLIT>Adds to the state without setting the dependency .<CODESPLIT>private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>src/main/java/org/java_websocket/drafts/Draft_6455.java<CODESPLIT>Returns just host url without path and query .<CODESPLIT>private String generateFinalKey ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Completable.java<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>Creates a NullPointerException instance and sets the given Throwable as its initial cause .<CODESPLIT>private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; } // Require that every key exist in the constructor to match up exactly. for ( Key < ? > key : paramList ) { // If it didn't exist in the constructor set, we can't use it. if ( ! constructorKeys . remove ( key ) ) { return false ; } } // If any keys remain and their annotation is Assisted, we can't use it. for ( Key < ? > key : constructorKeys ) { if ( key . getAnnotationType ( ) == Assisted . class ) { return false ; } } // All @Assisted params match up to the method's parameters. return true ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/tag/TagUtil.java<CODESPLIT>rest-assured/src/main/java/io/restassured/matcher/DetailedCookieMatcher.java<CODESPLIT>Renders tag body to string .<CODESPLIT>public DetailedCookieMatcher domain ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
1<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/RequestSpecBuilder.java<CODESPLIT>src/main/java/io/reactivex/subjects/UnicastSubject.java<CODESPLIT>Add a parameter to be sent with the request .<CODESPLIT>@ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , true ) ; }
1<CODESPLIT>src/main/java/com/alipay/remoting/util/FutureTaskUtil.java<CODESPLIT>src/main/java/com/alipay/remoting/ProcessorManager.java<CODESPLIT>launder the throwable<CODESPLIT>public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
1<CODESPLIT>core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java<CODESPLIT>core/play/src/main/java/play/mvc/Controller.java<CODESPLIT>Obtains the configuration attributes explicitly defined against this bean .<CODESPLIT>@ Deprecated public static void flash ( String key , String value ) { flash ( ) . put ( key , value ) ; }
1<CODESPLIT>ldap/src/main/java/org/springframework/security/ldap/authentication/BindAuthenticator.java<CODESPLIT>src/main/java/io/reactivex/internal/operators/flowable/FlowableScalarXMap.java<CODESPLIT>Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .<CODESPLIT>@ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return true ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return true ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return true ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return true ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return true ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return true ; } return false ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/ServletUtil.java<CODESPLIT>src/main/java/org/java_websocket/framing/CloseFrame.java<CODESPLIT>Prepares response for file download with provided mime type .<CODESPLIT>public void setCode ( int code ) { this . code = code ; // CloseFrame.TLS_ERROR is not allowed to be transfered over the wire if ( code == CloseFrame . TLS_ERROR ) { this . code = CloseFrame . NOCODE ; this . reason = "" ; } updatePayload ( ) ; }
1<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/component/ActionMethodParser.java<CODESPLIT>core/src/com/google/inject/internal/ConstructorBindingImpl.java<CODESPLIT>Reads class or method annotation for action interceptors .<CODESPLIT>InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
1<CODESPLIT>openid/src/main/java/org/springframework/security/openid/OpenIDAuthenticationFilter.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Performs URL encoding with UTF - 8<CODESPLIT>public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
1<CODESPLIT>jodd-core/src/main/java/jodd/system/SystemUtil.java<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>Returns system property as an int .<CODESPLIT>public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , true ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
1<CODESPLIT>jodd-mail/src/main/java/jodd/mail/EmailUtil.java<CODESPLIT>src/main/java/com/alipay/remoting/ConnectionPool.java<CODESPLIT>Extracts encoding from a given content type .<CODESPLIT>public void add ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . conns . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
1<CODESPLIT>taglibs/src/main/java/org/springframework/security/taglibs/authz/AbstractAuthorizeTag.java<CODESPLIT>src/main/java/com/alipay/remoting/Url.java<CODESPLIT>Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .<CODESPLIT>public String getProperty ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
1<CODESPLIT>src/main/java/io/reactivex/Maybe.java<CODESPLIT>src/main/java/com/alipay/remoting/CustomSerializerManager.java<CODESPLIT>Wraps a CompletableSource into a Maybe .<CODESPLIT>public static CustomSerializer getCustomSerializer ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/FactoryProvider2.java<CODESPLIT>src/main/java/com/alipay/remoting/config/switches/ProtocolSwitch.java<CODESPLIT>the collection is immutable .<CODESPLIT>public static byte toByte ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
1<CODESPLIT>core/play/src/main/java/play/libs/F.java<CODESPLIT>src/main/java/com/alipay/remoting/util/RemotingUtil.java<CODESPLIT>Constructs a tuple of A B C D E<CODESPLIT>public static String parseRemoteIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
1<CODESPLIT>core/src/com/google/inject/internal/WeakKeySet.java<CODESPLIT>src/main/java/io/reactivex/Maybe.java<CODESPLIT>There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .<CODESPLIT>@ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/JsonObject.java<CODESPLIT>src/main/java/com/alipay/remoting/util/NettyEventLoopUtil.java<CODESPLIT>Returns the float value with the specified key .<CODESPLIT>public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/ClassReader.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/RestAssuredMockMvcConfig.java<CODESPLIT>Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .<CODESPLIT>public RestAssuredMockMvcConfig logConfig ( LogConfig logConfig ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/core/TinyBitSet.java<CODESPLIT>web/src/main/java/org/springframework/security/web/util/UrlUtils.java<CODESPLIT>If bit 31 is set then this method results in an infinite loop .<CODESPLIT>private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
1<CODESPLIT>core/play/src/main/java/play/i18n/MessagesApi.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/LoginUrlAuthenticationEntryPoint.java<CODESPLIT>Get a messages context appropriate for the given candidates .<CODESPLIT>protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; } // Fall through to server-side forward with warning message logger . warn ( "Unable to redirect to HTTPS as no port mapping found for HTTP port " + serverPort ) ; return null ; }
1<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilter.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/ReceiveMailSession.java<CODESPLIT>Attempt to exit from an already switched user .<CODESPLIT>public void updateEmailFlags ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , true ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
1<CODESPLIT>src/main/java/com/alipay/remoting/RemotingContext.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>whether this request already timeout<CODESPLIT>public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , true ) ; }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/JPAEntityManagerContext.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/proxetta/asm/ProxettaAsmUtil.java<CODESPLIT>Get the default EntityManager for this thread .<CODESPLIT>public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
1<CODESPLIT>jodd-http/src/main/java/jodd/http/HttpRequest.java<CODESPLIT>core/src/com/google/inject/internal/Errors.java<CODESPLIT>Returns just host url without path and query .<CODESPLIT>< T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ; // Keys which have similar strings as the desired key List < String > possibleMatches = new ArrayList <> ( ) ; // Check for other keys that may have the same type, // but not the same annotation TypeLiteral < T > type = key . getTypeLiteral ( ) ; List < Binding < T > > sameTypes = injector . findBindingsByType ( type ) ; if ( ! sameTypes . isEmpty ( ) ) { sb . append ( format ( "%n  Did you mean?" ) ) ; int howMany = Math . min ( sameTypes . size ( ) , MAX_MATCHING_TYPES_REPORTED ) ; for ( int i = 0 ; i < howMany ; ++ i ) { // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the given annotation vs actual annotation. sb . append ( format ( "%n    * %s" , sameTypes . get ( i ) . getKey ( ) ) ) ; } int remaining = sameTypes . size ( ) - MAX_MATCHING_TYPES_REPORTED ; if ( remaining > 0 ) { String plural = ( remaining == 1 ) ? "" : "s" ; sb . append ( format ( "%n    %d more binding%s with other annotations." , remaining , plural ) ) ; } } else { // For now, do a simple substring search for possibilities. This can help spot // issues when there are generics being used (such as a wrapper class) and the // user has forgotten they need to bind based on the wrapper, not the underlying // class. In the future, consider doing a strict in-depth type search. // TODO: Look into a better way to prioritize suggestions. For example, possbily // use levenshtein distance of the type literal strings. String want = type . toString ( ) ; Map < Key < ? > , Binding < ? > > bindingMap = injector . getAllBindings ( ) ; for ( Key < ? > bindingKey : bindingMap . keySet ( ) ) { String have = bindingKey . getTypeLiteral ( ) . toString ( ) ; if ( have . contains ( want ) || want . contains ( have ) ) { Formatter fmt = new Formatter ( ) ; Messages . formatSource ( fmt , bindingMap . get ( bindingKey ) . getSource ( ) ) ; String match = String . format ( "%s bound%s" , convert ( bindingKey ) , fmt . toString ( ) ) ; possibleMatches . add ( match ) ; // TODO: Consider a check that if there are more than some number of results, // don't suggest any. if ( possibleMatches . size ( ) > MAX_RELATED_TYPES_REPORTED ) { // Early exit if we have found more than we need. break ; } } } if ( ( possibleMatches . size ( ) > 0 ) && ( possibleMatches . size ( ) <= MAX_RELATED_TYPES_REPORTED ) ) { sb . append ( format ( "%n  Did you mean?" ) ) ; for ( String possibleMatch : possibleMatches ) { sb . append ( format ( "%n    %s" , possibleMatch ) ) ; } } } // If where are no possibilities to suggest, then handle the case of missing // annotations on simple types. This is usually a bad idea. if ( sameTypes . isEmpty ( ) && possibleMatches . isEmpty ( ) && key . getAnnotation ( ) == null && COMMON_AMBIGUOUS_TYPES . contains ( key . getTypeLiteral ( ) . getRawType ( ) ) ) { // We don't recommend using such simple types without annotations. sb . append ( format ( "%nThe key seems very generic, did you forget an annotation?" ) ) ; } return addMessage ( sb . toString ( ) ) ; }
1<CODESPLIT>src/main/java/io/reactivex/internal/util/ExceptionHelper.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .<CODESPLIT>Symbol addConstantMethodref ( final String owner , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
1<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/Handler.java<CODESPLIT>src/main/java/com/alipay/remoting/DefaultConnectionManager.java<CODESPLIT>Removes the range between start and end from the Handler list that begins with the given element .<CODESPLIT>@ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
1<CODESPLIT>src/main/java/org/java_websocket/framing/CloseFrame.java<CODESPLIT>core/play/src/main/java/play/core/cookie/encoding/ClientCookieEncoder.java<CODESPLIT>Update the payload to represent the close code and the reason<CODESPLIT>public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
1<CODESPLIT>core/play/src/main/java/play/mvc/Call.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/scope/RequestScope.java<CODESPLIT>Transform this call to an WebSocket URL .<CODESPLIT>protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , true ) ; } } } ) ; } }
1<CODESPLIT>core/src/com/google/inject/internal/ConstructorInjectorStore.java<CODESPLIT>dev-mode/play-docs/src/main/java/play/docs/BuildDocHandlerFactory.java<CODESPLIT>Returns a new complete constructor injector with injection listeners registered .<CODESPLIT>public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
1<CODESPLIT>cglib/src/main/java/net/sf/cglib/util/ParallelSorter.java<CODESPLIT>jodd-json/src/main/java/jodd/json/meta/JsonAnnotationManager.java<CODESPLIT>Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .<CODESPLIT>protected TypeData _lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
1<CODESPLIT>persistence/play-java-jpa/src/main/java/play/db/jpa/DefaultJPAConfig.java<CODESPLIT>rest-assured/src/main/java/io/restassured/internal/http/HTTPBuilder.java<CODESPLIT>Create a default JPA configuration from a map of names to unit names .<CODESPLIT>public Object request ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , configClosure ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/ProviderMethodsModule.java<CODESPLIT>jodd-mail/src/main/java/jodd/mail/CommonEmail.java<CODESPLIT>Returns the annotation that is claimed by the scanner or null if there is none .<CODESPLIT>public T header ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
1<CODESPLIT>core/src/com/google/inject/internal/Scoping.java<CODESPLIT>core/play/src/main/java/play/inject/Binding.java<CODESPLIT>Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .<CODESPLIT>public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
1<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>jodd-core/src/main/java/jodd/io/findfile/ClassScanner.java<CODESPLIT>Specify a string to send to the server using multi - part form data with a specific mime - type .<CODESPLIT>public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
1<CODESPLIT>core/src/com/google/inject/internal/WeakKeySet.java<CODESPLIT>modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java<CODESPLIT>There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .<CODESPLIT>public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
1<CODESPLIT>core/src/com/google/inject/spi/DependencyAndSource.java<CODESPLIT>web/src/main/java/org/springframework/security/web/authentication/preauth/AbstractPreAuthenticatedProcessingFilter.java<CODESPLIT>Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .<CODESPLIT>protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return false ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return false ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return true ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/authority/mapping/SimpleAttributes2GrantedAuthoritiesMapper.java<CODESPLIT>core/src/main/java/org/springframework/security/access/expression/method/DefaultMethodSecurityExpressionHandler.java<CODESPLIT>Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .<CODESPLIT>protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
1<CODESPLIT>extensions/assistedinject/src/com/google/inject/assistedinject/Parameter.java<CODESPLIT>rest-assured/src/main/java/io/restassured/builder/ResponseBuilder.java<CODESPLIT>Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .<CODESPLIT>public ResponseBuilder setHeader ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
1<CODESPLIT>jodd-servlet/src/main/java/jodd/servlet/CsrfShield.java<CODESPLIT>core/src/com/google/inject/Key.java<CODESPLIT>Checks token value . C<CODESPLIT>static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
1<CODESPLIT>jodd-json/src/main/java/jodd/json/Path.java<CODESPLIT>web/play-java-forms/src/main/java/play/data/format/Formatters.java<CODESPLIT>Parses input dot - separated string that represents a path .<CODESPLIT>public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
1<CODESPLIT>core/src/com/google/inject/internal/DeferredLookups.java<CODESPLIT>rest-assured/src/main/java/io/restassured/config/HttpClientConfig.java<CODESPLIT>Initialize the specified lookups either immediately or when the injector is created .<CODESPLIT>public HttpClientConfig httpMultipartMode ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , true ) ; }
1<CODESPLIT>jodd-joy/src/main/java/jodd/joy/madvoc/AppAction.java<CODESPLIT>src/main/java/com/alipay/remoting/util/FutureTaskUtil.java<CODESPLIT>Validates action . Profiles are reset after the invocation .<CODESPLIT>public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
1<CODESPLIT>core/src/main/java/org/springframework/security/core/parameters/AnnotationParameterNameDiscoverer.java<CODESPLIT>jodd-proxetta/src/main/java/jodd/asm7/SymbolTable.java<CODESPLIT>Gets the parameter names or null if not found .<CODESPLIT>void putConstantPool ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
1<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>jodd-madvoc/src/main/java/jodd/madvoc/MadvocUtil.java<CODESPLIT>Invoked in prod mode when a server error occurs .<CODESPLIT>public static String stripLastCamelWord ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
1<CODESPLIT>jodd-petite/src/main/java/jodd/petite/PetiteBeans.java<CODESPLIT>core/play/src/main/java/play/http/DefaultHttpErrorHandler.java<CODESPLIT>Registers method injection point .<CODESPLIT>protected final UsefulException throwableToUsefulException ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }